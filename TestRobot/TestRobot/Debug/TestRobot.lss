
TestRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000038d8  0000396c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a39  0080010e  0080010e  0000397a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000397a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000039ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c32  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001521  00000000  00000000  0000791a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000216a  00000000  00000000  00008e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad8  00000000  00000000  0000afa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c24  00000000  00000000  0000ba80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000268a  00000000  00000000  0000c6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000ed2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
       2:	00 00       	nop
       4:	78 c0       	rjmp	.+240    	; 0xf6 <__bad_interrupt>
       6:	00 00       	nop
       8:	76 c0       	rjmp	.+236    	; 0xf6 <__bad_interrupt>
       a:	00 00       	nop
       c:	74 c0       	rjmp	.+232    	; 0xf6 <__bad_interrupt>
       e:	00 00       	nop
      10:	72 c0       	rjmp	.+228    	; 0xf6 <__bad_interrupt>
      12:	00 00       	nop
      14:	70 c0       	rjmp	.+224    	; 0xf6 <__bad_interrupt>
      16:	00 00       	nop
      18:	6e c0       	rjmp	.+220    	; 0xf6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6c c0       	rjmp	.+216    	; 0xf6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6a c0       	rjmp	.+212    	; 0xf6 <__bad_interrupt>
      22:	00 00       	nop
      24:	68 c0       	rjmp	.+208    	; 0xf6 <__bad_interrupt>
      26:	00 00       	nop
      28:	66 c0       	rjmp	.+204    	; 0xf6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	64 c0       	rjmp	.+200    	; 0xf6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	62 c0       	rjmp	.+196    	; 0xf6 <__bad_interrupt>
      32:	00 00       	nop
      34:	60 c0       	rjmp	.+192    	; 0xf6 <__bad_interrupt>
      36:	00 00       	nop
      38:	5e c0       	rjmp	.+188    	; 0xf6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5c c0       	rjmp	.+184    	; 0xf6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__vector_16>
      44:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__vector_17>
      48:	56 c0       	rjmp	.+172    	; 0xf6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	54 c0       	rjmp	.+168    	; 0xf6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	52 c0       	rjmp	.+164    	; 0xf6 <__bad_interrupt>
      52:	00 00       	nop
      54:	50 c0       	rjmp	.+160    	; 0xf6 <__bad_interrupt>
      56:	00 00       	nop
      58:	4e c0       	rjmp	.+156    	; 0xf6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4c c0       	rjmp	.+152    	; 0xf6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4a c0       	rjmp	.+148    	; 0xf6 <__bad_interrupt>
      62:	00 00       	nop
      64:	48 c0       	rjmp	.+144    	; 0xf6 <__bad_interrupt>
      66:	00 00       	nop
      68:	46 c0       	rjmp	.+140    	; 0xf6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	44 c0       	rjmp	.+136    	; 0xf6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	42 c0       	rjmp	.+132    	; 0xf6 <__bad_interrupt>
      72:	00 00       	nop
      74:	40 c0       	rjmp	.+128    	; 0xf6 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_30>
      7c:	3c c0       	rjmp	.+120    	; 0xf6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3a c0       	rjmp	.+116    	; 0xf6 <__bad_interrupt>
      82:	00 00       	nop
      84:	38 c0       	rjmp	.+112    	; 0xf6 <__bad_interrupt>
      86:	00 00       	nop
      88:	36 c0       	rjmp	.+108    	; 0xf6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	43 10       	cpse	r4, r3
      8e:	48 10       	cpse	r4, r8
      90:	4c 10       	cpse	r4, r12
      92:	53 10       	cpse	r5, r3
      94:	5f 10       	cpse	r5, r15
      96:	65 10       	cpse	r6, r5
      98:	6a 10       	cpse	r6, r10
      9a:	72 10       	cpse	r7, r2
      9c:	05 a8       	ldd	r0, Z+53	; 0x35
      9e:	4c cd       	rjmp	.-1384   	; 0xfffffb38 <__eeprom_end+0xff7efb38>
      a0:	b2 d4       	rcall	.+2404   	; 0xa06 <main+0x238>
      a2:	4e b9       	out	0x0e, r20	; 14
      a4:	38 36       	cpi	r19, 0x68	; 104
      a6:	a9 02       	muls	r26, r25
      a8:	0c 50       	subi	r16, 0x0C	; 12
      aa:	b9 91       	ld	r27, Y+
      ac:	86 88       	ldd	r8, Z+22	; 0x16
      ae:	08 3c       	cpi	r16, 0xC8	; 200
      b0:	a6 aa       	std	Z+54, r10	; 0x36
      b2:	aa 2a       	or	r10, r26
      b4:	be 00       	.word	0x00be	; ????
      b6:	00 00       	nop
      b8:	80 3f       	cpi	r24, 0xF0	; 240

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e1       	ldi	r29, 0x10	; 16
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e8 ed       	ldi	r30, 0xD8	; 216
      ce:	f8 e3       	ldi	r31, 0x38	; 56
      d0:	00 e0       	ldi	r16, 0x00	; 0
      d2:	0b bf       	out	0x3b, r16	; 59
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
      d6:	07 90       	elpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	ae 30       	cpi	r26, 0x0E	; 14
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>

000000e0 <__do_clear_bss>:
      e0:	2b e0       	ldi	r18, 0x0B	; 11
      e2:	ae e0       	ldi	r26, 0x0E	; 14
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a7 34       	cpi	r26, 0x47	; 71
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	6e d3       	rcall	.+1756   	; 0x7ce <main>
      f2:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <_exit>

000000f6 <__bad_interrupt>:
      f6:	84 cf       	rjmp	.-248    	; 0x0 <__vectors>

000000f8 <Ext_memo_init>:
      f8:	8c e0       	ldi	r24, 0x0C	; 12
      fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
      fe:	8e e1       	ldi	r24, 0x1E	; 30
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     106:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     10a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     10e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     112:	08 95       	ret

00000114 <ApplyRobotVelocities>:
	 |
	 |
	 |
	Robot==>________>VVVx
	*/
}
     114:	2f 92       	push	r2
     116:	3f 92       	push	r3
     118:	4f 92       	push	r4
     11a:	5f 92       	push	r5
     11c:	6f 92       	push	r6
     11e:	7f 92       	push	r7
     120:	8f 92       	push	r8
     122:	9f 92       	push	r9
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	00 d0       	rcall	.+0      	; 0x13a <ApplyRobotVelocities+0x26>
     13a:	00 d0       	rcall	.+0      	; 0x13c <ApplyRobotVelocities+0x28>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	1c 01       	movw	r2, r24
     142:	fc 01       	movw	r30, r24
     144:	c0 84       	ldd	r12, Z+8	; 0x08
     146:	d1 84       	ldd	r13, Z+9	; 0x09
     148:	e2 84       	ldd	r14, Z+10	; 0x0a
     14a:	f3 84       	ldd	r15, Z+11	; 0x0b
     14c:	0c e5       	ldi	r16, 0x5C	; 92
     14e:	11 e0       	ldi	r17, 0x01	; 1
     150:	f8 01       	movw	r30, r16
     152:	c0 86       	std	Z+8, r12	; 0x08
     154:	d1 86       	std	Z+9, r13	; 0x09
     156:	e2 86       	std	Z+10, r14	; 0x0a
     158:	f3 86       	std	Z+11, r15	; 0x0b
     15a:	fc 01       	movw	r30, r24
     15c:	84 81       	ldd	r24, Z+4	; 0x04
     15e:	95 81       	ldd	r25, Z+5	; 0x05
     160:	a6 81       	ldd	r26, Z+6	; 0x06
     162:	b7 81       	ldd	r27, Z+7	; 0x07
     164:	bc 01       	movw	r22, r24
     166:	cd 01       	movw	r24, r26
     168:	90 58       	subi	r25, 0x80	; 128
     16a:	27 ed       	ldi	r18, 0xD7	; 215
     16c:	33 eb       	ldi	r19, 0xB3	; 179
     16e:	4d e5       	ldi	r20, 0x5D	; 93
     170:	5f e3       	ldi	r21, 0x3F	; 63
     172:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     176:	4b 01       	movw	r8, r22
     178:	5c 01       	movw	r10, r24
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	5f e3       	ldi	r21, 0x3F	; 63
     182:	f1 01       	movw	r30, r2
     184:	60 81       	ld	r22, Z
     186:	71 81       	ldd	r23, Z+1	; 0x01
     188:	82 81       	ldd	r24, Z+2	; 0x02
     18a:	93 81       	ldd	r25, Z+3	; 0x03
     18c:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     190:	9b 01       	movw	r18, r22
     192:	ac 01       	movw	r20, r24
     194:	c5 01       	movw	r24, r10
     196:	b4 01       	movw	r22, r8
     198:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
     19c:	2b 01       	movw	r4, r22
     19e:	3c 01       	movw	r6, r24
     1a0:	f8 01       	movw	r30, r16
     1a2:	64 83       	std	Z+4, r22	; 0x04
     1a4:	75 83       	std	Z+5, r23	; 0x05
     1a6:	86 83       	std	Z+6, r24	; 0x06
     1a8:	97 83       	std	Z+7, r25	; 0x07
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	5f e3       	ldi	r21, 0x3F	; 63
     1b2:	f1 01       	movw	r30, r2
     1b4:	64 81       	ldd	r22, Z+4	; 0x04
     1b6:	75 81       	ldd	r23, Z+5	; 0x05
     1b8:	86 81       	ldd	r24, Z+6	; 0x06
     1ba:	97 81       	ldd	r25, Z+7	; 0x07
     1bc:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     1c0:	4b 01       	movw	r8, r22
     1c2:	5c 01       	movw	r10, r24
     1c4:	27 ed       	ldi	r18, 0xD7	; 215
     1c6:	33 eb       	ldi	r19, 0xB3	; 179
     1c8:	4d e5       	ldi	r20, 0x5D	; 93
     1ca:	5f e3       	ldi	r21, 0x3F	; 63
     1cc:	f1 01       	movw	r30, r2
     1ce:	60 81       	ld	r22, Z
     1d0:	71 81       	ldd	r23, Z+1	; 0x01
     1d2:	82 81       	ldd	r24, Z+2	; 0x02
     1d4:	93 81       	ldd	r25, Z+3	; 0x03
     1d6:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     1da:	9b 01       	movw	r18, r22
     1dc:	ac 01       	movw	r20, r24
     1de:	c5 01       	movw	r24, r10
     1e0:	b4 01       	movw	r22, r8
     1e2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
     1e6:	f8 01       	movw	r30, r16
     1e8:	60 83       	st	Z, r22
     1ea:	71 83       	std	Z+1, r23	; 0x01
     1ec:	82 83       	std	Z+2, r24	; 0x02
     1ee:	93 83       	std	Z+3, r25	; 0x03
     1f0:	2b ed       	ldi	r18, 0xDB	; 219
     1f2:	3f e0       	ldi	r19, 0x0F	; 15
     1f4:	49 e4       	ldi	r20, 0x49	; 73
     1f6:	50 e4       	ldi	r21, 0x40	; 64
     1f8:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     1fc:	2f ee       	ldi	r18, 0xEF	; 239
     1fe:	3d eb       	ldi	r19, 0xBD	; 189
     200:	47 e7       	ldi	r20, 0x77	; 119
     202:	5f e3       	ldi	r21, 0x3F	; 63
     204:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     208:	4b 01       	movw	r8, r22
     20a:	5c 01       	movw	r10, r24
     20c:	04 e4       	ldi	r16, 0x44	; 68
     20e:	11 e0       	ldi	r17, 0x01	; 1
     210:	f8 01       	movw	r30, r16
     212:	60 83       	st	Z, r22
     214:	71 83       	std	Z+1, r23	; 0x01
     216:	82 83       	std	Z+2, r24	; 0x02
     218:	93 83       	std	Z+3, r25	; 0x03
     21a:	2b ed       	ldi	r18, 0xDB	; 219
     21c:	3f e0       	ldi	r19, 0x0F	; 15
     21e:	49 e4       	ldi	r20, 0x49	; 73
     220:	50 e4       	ldi	r21, 0x40	; 64
     222:	c3 01       	movw	r24, r6
     224:	b2 01       	movw	r22, r4
     226:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     22a:	2f ee       	ldi	r18, 0xEF	; 239
     22c:	3d eb       	ldi	r19, 0xBD	; 189
     22e:	47 e7       	ldi	r20, 0x77	; 119
     230:	5f e3       	ldi	r21, 0x3F	; 63
     232:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     236:	2b 01       	movw	r4, r22
     238:	3c 01       	movw	r6, r24
     23a:	f8 01       	movw	r30, r16
     23c:	64 83       	std	Z+4, r22	; 0x04
     23e:	75 83       	std	Z+5, r23	; 0x05
     240:	86 83       	std	Z+6, r24	; 0x06
     242:	97 83       	std	Z+7, r25	; 0x07
     244:	23 e3       	ldi	r18, 0x33	; 51
     246:	33 e3       	ldi	r19, 0x33	; 51
     248:	43 e4       	ldi	r20, 0x43	; 67
     24a:	50 e4       	ldi	r21, 0x40	; 64
     24c:	c7 01       	movw	r24, r14
     24e:	b6 01       	movw	r22, r12
     250:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     254:	22 e6       	ldi	r18, 0x62	; 98
     256:	30 e1       	ldi	r19, 0x10	; 16
     258:	48 e7       	ldi	r20, 0x78	; 120
     25a:	5f e3       	ldi	r21, 0x3F	; 63
     25c:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     260:	6b 01       	movw	r12, r22
     262:	7c 01       	movw	r14, r24
     264:	f8 01       	movw	r30, r16
     266:	60 87       	std	Z+8, r22	; 0x08
     268:	71 87       	std	Z+9, r23	; 0x09
     26a:	82 87       	std	Z+10, r24	; 0x0a
     26c:	93 87       	std	Z+11, r25	; 0x0b
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	5f e3       	ldi	r21, 0x3F	; 63
     276:	c3 01       	movw	r24, r6
     278:	b2 01       	movw	r22, r4
     27a:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     27e:	69 83       	std	Y+1, r22	; 0x01
     280:	7a 83       	std	Y+2, r23	; 0x02
     282:	8b 83       	std	Y+3, r24	; 0x03
     284:	9c 83       	std	Y+4, r25	; 0x04
     286:	2a e5       	ldi	r18, 0x5A	; 90
     288:	34 e6       	ldi	r19, 0x64	; 100
     28a:	4b eb       	ldi	r20, 0xBB	; 187
     28c:	5d e3       	ldi	r21, 0x3D	; 61
     28e:	c7 01       	movw	r24, r14
     290:	b6 01       	movw	r22, r12
     292:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	0c e2       	ldi	r16, 0x2C	; 44
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	27 ed       	ldi	r18, 0xD7	; 215
     2a0:	33 eb       	ldi	r19, 0xB3	; 179
     2a2:	4d e5       	ldi	r20, 0x5D	; 93
     2a4:	5f e3       	ldi	r21, 0x3F	; 63
     2a6:	c5 01       	movw	r24, r10
     2a8:	b4 01       	movw	r22, r8
     2aa:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     2ae:	29 81       	ldd	r18, Y+1	; 0x01
     2b0:	3a 81       	ldd	r19, Y+2	; 0x02
     2b2:	4b 81       	ldd	r20, Y+3	; 0x03
     2b4:	5c 81       	ldd	r21, Y+4	; 0x04
     2b6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
     2ba:	a7 01       	movw	r20, r14
     2bc:	96 01       	movw	r18, r12
     2be:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
     2c2:	2f e8       	ldi	r18, 0x8F	; 143
     2c4:	32 ec       	ldi	r19, 0xC2	; 194
     2c6:	45 ef       	ldi	r20, 0xF5	; 245
     2c8:	5c e3       	ldi	r21, 0x3C	; 60
     2ca:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
     2ce:	f8 01       	movw	r30, r16
     2d0:	60 83       	st	Z, r22
     2d2:	71 83       	std	Z+1, r23	; 0x01
     2d4:	82 83       	std	Z+2, r24	; 0x02
     2d6:	93 83       	std	Z+3, r25	; 0x03
     2d8:	a7 01       	movw	r20, r14
     2da:	96 01       	movw	r18, r12
     2dc:	c3 01       	movw	r24, r6
     2de:	b2 01       	movw	r22, r4
     2e0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
     2e4:	2f e8       	ldi	r18, 0x8F	; 143
     2e6:	32 ec       	ldi	r19, 0xC2	; 194
     2e8:	45 ef       	ldi	r20, 0xF5	; 245
     2ea:	5c e3       	ldi	r21, 0x3C	; 60
     2ec:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
     2f0:	f8 01       	movw	r30, r16
     2f2:	64 83       	std	Z+4, r22	; 0x04
     2f4:	75 83       	std	Z+5, r23	; 0x05
     2f6:	86 83       	std	Z+6, r24	; 0x06
     2f8:	97 83       	std	Z+7, r25	; 0x07
     2fa:	27 ed       	ldi	r18, 0xD7	; 215
     2fc:	33 eb       	ldi	r19, 0xB3	; 179
     2fe:	4d e5       	ldi	r20, 0x5D	; 93
     300:	5f eb       	ldi	r21, 0xBF	; 191
     302:	c5 01       	movw	r24, r10
     304:	b4 01       	movw	r22, r8
     306:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     30a:	29 81       	ldd	r18, Y+1	; 0x01
     30c:	3a 81       	ldd	r19, Y+2	; 0x02
     30e:	4b 81       	ldd	r20, Y+3	; 0x03
     310:	5c 81       	ldd	r21, Y+4	; 0x04
     312:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
     316:	9b 01       	movw	r18, r22
     318:	ac 01       	movw	r20, r24
     31a:	c7 01       	movw	r24, r14
     31c:	b6 01       	movw	r22, r12
     31e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
     322:	2f e8       	ldi	r18, 0x8F	; 143
     324:	32 ec       	ldi	r19, 0xC2	; 194
     326:	45 ef       	ldi	r20, 0xF5	; 245
     328:	5c e3       	ldi	r21, 0x3C	; 60
     32a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
     32e:	f8 01       	movw	r30, r16
     330:	60 87       	std	Z+8, r22	; 0x08
     332:	71 87       	std	Z+9, r23	; 0x09
     334:	82 87       	std	Z+10, r24	; 0x0a
     336:	93 87       	std	Z+11, r25	; 0x0b
     338:	c8 01       	movw	r24, r16
     33a:	5c d5       	rcall	.+2744   	; 0xdf4 <MotorStart>
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	df 90       	pop	r13
     352:	cf 90       	pop	r12
     354:	bf 90       	pop	r11
     356:	af 90       	pop	r10
     358:	9f 90       	pop	r9
     35a:	8f 90       	pop	r8
     35c:	7f 90       	pop	r7
     35e:	6f 90       	pop	r6
     360:	5f 90       	pop	r5
     362:	4f 90       	pop	r4
     364:	3f 90       	pop	r3
     366:	2f 90       	pop	r2
     368:	08 95       	ret

0000036a <ApplyVelocities>:
     36a:	2f 92       	push	r2
     36c:	3f 92       	push	r3
     36e:	4f 92       	push	r4
     370:	5f 92       	push	r5
     372:	6f 92       	push	r6
     374:	7f 92       	push	r7
     376:	8f 92       	push	r8
     378:	9f 92       	push	r9
     37a:	af 92       	push	r10
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	00 d0       	rcall	.+0      	; 0x390 <ApplyVelocities+0x26>
     390:	00 d0       	rcall	.+0      	; 0x392 <ApplyVelocities+0x28>
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	1c 01       	movw	r2, r24
     398:	c0 90 13 08 	lds	r12, 0x0813	; 0x800813 <current_position+0x8>
     39c:	d0 90 14 08 	lds	r13, 0x0814	; 0x800814 <current_position+0x9>
     3a0:	e0 90 15 08 	lds	r14, 0x0815	; 0x800815 <current_position+0xa>
     3a4:	f0 90 16 08 	lds	r15, 0x0816	; 0x800816 <current_position+0xb>
     3a8:	c7 01       	movw	r24, r14
     3aa:	b6 01       	movw	r22, r12
     3ac:	0e 94 67 19 	call	0x32ce	; 0x32ce <cos>
     3b0:	4b 01       	movw	r8, r22
     3b2:	5c 01       	movw	r10, r24
     3b4:	c7 01       	movw	r24, r14
     3b6:	b6 01       	movw	r22, r12
     3b8:	0e 94 b5 1b 	call	0x376a	; 0x376a <sin>
     3bc:	6b 01       	movw	r12, r22
     3be:	7c 01       	movw	r14, r24
     3c0:	f1 01       	movw	r30, r2
     3c2:	44 80       	ldd	r4, Z+4	; 0x04
     3c4:	55 80       	ldd	r5, Z+5	; 0x05
     3c6:	66 80       	ldd	r6, Z+6	; 0x06
     3c8:	77 80       	ldd	r7, Z+7	; 0x07
     3ca:	08 e3       	ldi	r16, 0x38	; 56
     3cc:	11 e0       	ldi	r17, 0x01	; 1
     3ce:	20 81       	ld	r18, Z
     3d0:	31 81       	ldd	r19, Z+1	; 0x01
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	c5 01       	movw	r24, r10
     3d8:	b4 01       	movw	r22, r8
     3da:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     3de:	69 83       	std	Y+1, r22	; 0x01
     3e0:	7a 83       	std	Y+2, r23	; 0x02
     3e2:	8b 83       	std	Y+3, r24	; 0x03
     3e4:	9c 83       	std	Y+4, r25	; 0x04
     3e6:	a3 01       	movw	r20, r6
     3e8:	92 01       	movw	r18, r4
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     3f2:	9b 01       	movw	r18, r22
     3f4:	ac 01       	movw	r20, r24
     3f6:	69 81       	ldd	r22, Y+1	; 0x01
     3f8:	7a 81       	ldd	r23, Y+2	; 0x02
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
     402:	f8 01       	movw	r30, r16
     404:	60 83       	st	Z, r22
     406:	71 83       	std	Z+1, r23	; 0x01
     408:	82 83       	std	Z+2, r24	; 0x02
     40a:	93 83       	std	Z+3, r25	; 0x03
     40c:	c7 01       	movw	r24, r14
     40e:	b6 01       	movw	r22, r12
     410:	90 58       	subi	r25, 0x80	; 128
     412:	f1 01       	movw	r30, r2
     414:	20 81       	ld	r18, Z
     416:	31 81       	ldd	r19, Z+1	; 0x01
     418:	42 81       	ldd	r20, Z+2	; 0x02
     41a:	53 81       	ldd	r21, Z+3	; 0x03
     41c:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     420:	6b 01       	movw	r12, r22
     422:	7c 01       	movw	r14, r24
     424:	a3 01       	movw	r20, r6
     426:	92 01       	movw	r18, r4
     428:	c5 01       	movw	r24, r10
     42a:	b4 01       	movw	r22, r8
     42c:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     430:	9b 01       	movw	r18, r22
     432:	ac 01       	movw	r20, r24
     434:	c7 01       	movw	r24, r14
     436:	b6 01       	movw	r22, r12
     438:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
     43c:	f8 01       	movw	r30, r16
     43e:	64 83       	std	Z+4, r22	; 0x04
     440:	75 83       	std	Z+5, r23	; 0x05
     442:	86 83       	std	Z+6, r24	; 0x06
     444:	97 83       	std	Z+7, r25	; 0x07
     446:	f1 01       	movw	r30, r2
     448:	80 85       	ldd	r24, Z+8	; 0x08
     44a:	91 85       	ldd	r25, Z+9	; 0x09
     44c:	a2 85       	ldd	r26, Z+10	; 0x0a
     44e:	b3 85       	ldd	r27, Z+11	; 0x0b
     450:	f8 01       	movw	r30, r16
     452:	80 87       	std	Z+8, r24	; 0x08
     454:	91 87       	std	Z+9, r25	; 0x09
     456:	a2 87       	std	Z+10, r26	; 0x0a
     458:	b3 87       	std	Z+11, r27	; 0x0b
     45a:	c8 01       	movw	r24, r16
     45c:	5b de       	rcall	.-842    	; 0x114 <ApplyRobotVelocities>
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	bf 90       	pop	r11
     478:	af 90       	pop	r10
     47a:	9f 90       	pop	r9
     47c:	8f 90       	pop	r8
     47e:	7f 90       	pop	r7
     480:	6f 90       	pop	r6
     482:	5f 90       	pop	r5
     484:	4f 90       	pop	r4
     486:	3f 90       	pop	r3
     488:	2f 90       	pop	r2
     48a:	08 95       	ret

0000048c <ApplyVW>:
     48c:	e0 e5       	ldi	r30, 0x50	; 80
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	10 82       	st	Z, r1
     492:	11 82       	std	Z+1, r1	; 0x01
     494:	12 82       	std	Z+2, r1	; 0x02
     496:	13 82       	std	Z+3, r1	; 0x03
     498:	64 83       	std	Z+4, r22	; 0x04
     49a:	75 83       	std	Z+5, r23	; 0x05
     49c:	86 83       	std	Z+6, r24	; 0x06
     49e:	97 83       	std	Z+7, r25	; 0x07
     4a0:	20 87       	std	Z+8, r18	; 0x08
     4a2:	31 87       	std	Z+9, r19	; 0x09
     4a4:	42 87       	std	Z+10, r20	; 0x0a
     4a6:	53 87       	std	Z+11, r21	; 0x0b
     4a8:	cf 01       	movw	r24, r30
     4aa:	34 ce       	rjmp	.-920    	; 0x114 <ApplyRobotVelocities>
     4ac:	08 95       	ret

000004ae <ApplyVxVy_double>:
void ApplyVxVy_double(double VVVx , double VVVy )
{
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
	mV[0]=-VVVy;mV[1]=VVVx;mV[2]=0; 
     4b2:	e0 e5       	ldi	r30, 0x50	; 80
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	89 01       	movw	r16, r18
     4b8:	9a 01       	movw	r18, r20
     4ba:	30 58       	subi	r19, 0x80	; 128
     4bc:	00 83       	st	Z, r16
     4be:	11 83       	std	Z+1, r17	; 0x01
     4c0:	22 83       	std	Z+2, r18	; 0x02
     4c2:	33 83       	std	Z+3, r19	; 0x03
     4c4:	64 83       	std	Z+4, r22	; 0x04
     4c6:	75 83       	std	Z+5, r23	; 0x05
     4c8:	86 83       	std	Z+6, r24	; 0x06
     4ca:	97 83       	std	Z+7, r25	; 0x07
     4cc:	10 86       	std	Z+8, r1	; 0x08
     4ce:	11 86       	std	Z+9, r1	; 0x09
     4d0:	12 86       	std	Z+10, r1	; 0x0a
     4d2:	13 86       	std	Z+11, r1	; 0x0b
	ApplyVelocities(mV);
     4d4:	cf 01       	movw	r24, r30
     4d6:	49 df       	rcall	.-366    	; 0x36a <ApplyVelocities>
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	08 95       	ret

000004de <lcd_cmd>:
     4de:	e0 e0       	ldi	r30, 0x00	; 0
     4e0:	f1 e2       	ldi	r31, 0x21	; 33
     4e2:	10 82       	st	Z, r1
     4e4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__bss_end+0x14b9>
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	80 83       	st	Z, r24
     4ec:	00 00       	nop
     4ee:	00 00       	nop
     4f0:	10 82       	st	Z, r1
     4f2:	85 e8       	ldi	r24, 0x85	; 133
     4f4:	8a 95       	dec	r24
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <lcd_cmd+0x16>
     4f8:	00 00       	nop
     4fa:	08 95       	ret

000004fc <LcdInit>:
     4fc:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <__bss_end+0x15b9>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     500:	8f e9       	ldi	r24, 0x9F	; 159
     502:	9f e0       	ldi	r25, 0x0F	; 15
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <LcdInit+0x8>
     508:	00 c0       	rjmp	.+0      	; 0x50a <LcdInit+0xe>
     50a:	00 00       	nop
     50c:	88 e3       	ldi	r24, 0x38	; 56
     50e:	e7 df       	rcall	.-50     	; 0x4de <lcd_cmd>
     510:	8c e0       	ldi	r24, 0x0C	; 12
     512:	e5 df       	rcall	.-54     	; 0x4de <lcd_cmd>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	e3 df       	rcall	.-58     	; 0x4de <lcd_cmd>
     518:	8f e9       	ldi	r24, 0x9F	; 159
     51a:	9f e0       	ldi	r25, 0x0F	; 15
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <LcdInit+0x20>
     520:	00 c0       	rjmp	.+0      	; 0x522 <LcdInit+0x26>
     522:	00 00       	nop
     524:	08 95       	ret

00000526 <LedOn>:
     526:	90 e8       	ldi	r25, 0x80	; 128
     528:	95 bf       	out	0x35, r25	; 53
     52a:	24 e4       	ldi	r18, 0x44	; 68
     52c:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     530:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     534:	80 95       	com	r24
     536:	80 93 00 23 	sts	0x2300, r24	; 0x802300 <__bss_end+0x17b9>
     53a:	08 95       	ret

0000053c <SPI_Recieve_Path>:
void SPI_Recieve_Path(void)
{
	static char Recieve_flag = 0;
	static char i=0;
	//static char mnm = 0;
	if (SPDR == 254)
     53c:	8f b1       	in	r24, 0x0f	; 15
     53e:	8e 3f       	cpi	r24, 0xFE	; 254
     540:	a1 f4       	brne	.+40     	; 0x56a <SPI_Recieve_Path+0x2e>
	{
		SPDR = Position[Pose_index];
     542:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <Pose_index>
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	ea 5c       	subi	r30, 0xCA	; 202
     54a:	fd 4f       	sbci	r31, 0xFD	; 253
     54c:	80 81       	ld	r24, Z
     54e:	8f b9       	out	0x0f, r24	; 15
		Pose_index++;
     550:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Pose_index>
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Pose_index>
		if (Pose_index==7)
     55a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Pose_index>
     55e:	87 30       	cpi	r24, 0x07	; 7
     560:	09 f0       	breq	.+2      	; 0x564 <SPI_Recieve_Path+0x28>
     562:	8d c0       	rjmp	.+282    	; 0x67e <SPI_Recieve_Path+0x142>
		{
			Pose_index=0;
     564:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Pose_index>
     568:	08 95       	ret
		}
		return;
	}
	if (Num_of_agent == 255)
     56a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Num_of_agent>
     56e:	8f 3f       	cpi	r24, 0xFF	; 255
     570:	69 f4       	brne	.+26     	; 0x58c <SPI_Recieve_Path+0x50>
	{
		Num_of_agent = SPDR;
     572:	8f b1       	in	r24, 0x0f	; 15
     574:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Num_of_agent>
		if(main_flag==1)
     578:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <main_flag>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	09 f0       	breq	.+2      	; 0x582 <SPI_Recieve_Path+0x46>
     580:	7e c0       	rjmp	.+252    	; 0x67e <SPI_Recieve_Path+0x142>
		{
			Num_of_agent=1;
     582:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Num_of_agent>
			main_flag=0;
     586:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <main_flag>
     58a:	08 95       	ret
		}
		return;
	}
	if(Leader == 2)
     58c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <Leader>
     590:	92 30       	cpi	r25, 0x02	; 2
     592:	31 f4       	brne	.+12     	; 0x5a0 <SPI_Recieve_Path+0x64>
	{
		Leader=SPDR;
     594:	8f b1       	in	r24, 0x0f	; 15
     596:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Leader>
		Follower_Pose_index=0;
     59a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Follower_Pose_index>
		return;
     59e:	08 95       	ret
	}
	
	if ((Num_of_agent==1) || (Num_of_agent > 1 && Leader==1))
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	29 f0       	breq	.+10     	; 0x5ae <SPI_Recieve_Path+0x72>
     5a4:	08 f4       	brcc	.+2      	; 0x5a8 <SPI_Recieve_Path+0x6c>
     5a6:	6b c0       	rjmp	.+214    	; 0x67e <SPI_Recieve_Path+0x142>
     5a8:	91 30       	cpi	r25, 0x01	; 1
     5aa:	09 f0       	breq	.+2      	; 0x5ae <SPI_Recieve_Path+0x72>
     5ac:	52 c0       	rjmp	.+164    	; 0x652 <SPI_Recieve_Path+0x116>
	{
		if (path_flag==0)
     5ae:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <path_flag>
     5b2:	21 11       	cpse	r18, r1
     5b4:	64 c0       	rjmp	.+200    	; 0x67e <SPI_Recieve_Path+0x142>
		{
			if (!Recieve_flag)
     5b6:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <Recieve_flag.1901>
     5ba:	21 11       	cpse	r18, r1
     5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <SPI_Recieve_Path+0x9c>
			{
				Path [i][0]=SPDR;
     5be:	2f b1       	in	r18, 0x0f	; 15
     5c0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e2 59       	subi	r30, 0x92	; 146
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	20 83       	st	Z, r18
				Recieve_flag=1;
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <Recieve_flag.1901>
     5d6:	0f c0       	rjmp	.+30     	; 0x5f6 <SPI_Recieve_Path+0xba>
			}
			else if (Recieve_flag)
			{
				Path[i][1]=SPDR;
     5d8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     5dc:	3f b1       	in	r19, 0x0f	; 15
     5de:	e2 2f       	mov	r30, r18
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	e2 59       	subi	r30, 0x92	; 146
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	31 83       	std	Z+1, r19	; 0x01
				Recieve_flag=0;
     5ec:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Recieve_flag.1901>
				i++;
     5f0:	2f 5f       	subi	r18, 0xFF	; 255
     5f2:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__data_end>
			}
			if (Path[i-1][0]==255 && Path[i-1][1]==255)
     5f6:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__data_end>
     5fa:	24 2f       	mov	r18, r20
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	31 09       	sbc	r19, r1
     602:	f9 01       	movw	r30, r18
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	e2 59       	subi	r30, 0x92	; 146
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	50 81       	ld	r21, Z
     60e:	5f 3f       	cpi	r21, 0xFF	; 255
     610:	b1 f5       	brne	.+108    	; 0x67e <SPI_Recieve_Path+0x142>
     612:	22 0f       	add	r18, r18
     614:	33 1f       	adc	r19, r19
     616:	f9 01       	movw	r30, r18
     618:	e2 59       	subi	r30, 0x92	; 146
     61a:	fe 4f       	sbci	r31, 0xFE	; 254
     61c:	21 81       	ldd	r18, Z+1	; 0x01
     61e:	2f 3f       	cpi	r18, 0xFF	; 255
     620:	71 f5       	brne	.+92     	; 0x67e <SPI_Recieve_Path+0x142>
			{
				if (Num_of_agent>1&&Leader==1)
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	38 f0       	brcs	.+14     	; 0x634 <SPI_Recieve_Path+0xf8>
     626:	91 30       	cpi	r25, 0x01	; 1
     628:	29 f4       	brne	.+10     	; 0x634 <SPI_Recieve_Path+0xf8>
				{
					Position[5]=1;
     62a:	e6 e3       	ldi	r30, 0x36	; 54
     62c:	f2 e0       	ldi	r31, 0x02	; 2
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	85 83       	std	Z+5, r24	; 0x05
					Position[6]=1;
     632:	86 83       	std	Z+6, r24	; 0x06
				}
				tnr_start = 0;
     634:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tnr_start>
				path_flag = 1;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <path_flag>
				j=0;
     63e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <j>
				stop_OA_index=i-2;
     642:	42 50       	subi	r20, 0x02	; 2
     644:	40 93 11 01 	sts	0x0111, r20	; 0x800111 <stop_OA_index>
				i=0;
     648:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
				Pose_index=0;
     64c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Pose_index>
     650:	08 95       	ret
			}
		}
	}
	else if(Num_of_agent>1&& Leader==0)
     652:	91 11       	cpse	r25, r1
     654:	14 c0       	rjmp	.+40     	; 0x67e <SPI_Recieve_Path+0x142>
	{
		Follower_pose[Follower_Pose_index] =SPDR;
     656:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Follower_Pose_index>
     65a:	9f b1       	in	r25, 0x0f	; 15
     65c:	e8 2f       	mov	r30, r24
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	e0 50       	subi	r30, 0x00	; 0
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	90 83       	st	Z, r25
		Follower_Pose_index++;
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Follower_Pose_index>
		if(Follower_Pose_index==2)
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	39 f4       	brne	.+14     	; 0x67e <SPI_Recieve_Path+0x142>
		{
			path_flag =1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <path_flag>
			Follower_Pose_index=0;
     676:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Follower_Pose_index>
			Pose_index=0;
     67a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Pose_index>
     67e:	08 95       	ret

00000680 <Update_position>:
	return;

}

void Update_position()
{
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
	update_current_cell();
     68c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <update_current_cell>
	Position[0] = current_cell[0];
     690:	01 e5       	ldi	r16, 0x51	; 81
     692:	12 e0       	ldi	r17, 0x02	; 2
     694:	f8 01       	movw	r30, r16
     696:	60 81       	ld	r22, Z
     698:	71 81       	ldd	r23, Z+1	; 0x01
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	93 81       	ldd	r25, Z+3	; 0x03
     69e:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__fixunssfsi>
     6a2:	c6 e3       	ldi	r28, 0x36	; 54
     6a4:	d2 e0       	ldi	r29, 0x02	; 2
     6a6:	68 83       	st	Y, r22
	Position[1] = current_cell[1];
     6a8:	f8 01       	movw	r30, r16
     6aa:	64 81       	ldd	r22, Z+4	; 0x04
     6ac:	75 81       	ldd	r23, Z+5	; 0x05
     6ae:	86 81       	ldd	r24, Z+6	; 0x06
     6b0:	97 81       	ldd	r25, Z+7	; 0x07
     6b2:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__fixunssfsi>
     6b6:	69 83       	std	Y+1, r22	; 0x01
	Position[2] = round(current_position[2]/6.283185307*255);
     6b8:	0b e0       	ldi	r16, 0x0B	; 11
     6ba:	18 e0       	ldi	r17, 0x08	; 8
     6bc:	2b ed       	ldi	r18, 0xDB	; 219
     6be:	3f e0       	ldi	r19, 0x0F	; 15
     6c0:	49 ec       	ldi	r20, 0xC9	; 201
     6c2:	50 e4       	ldi	r21, 0x40	; 64
     6c4:	f8 01       	movw	r30, r16
     6c6:	60 85       	ldd	r22, Z+8	; 0x08
     6c8:	71 85       	ldd	r23, Z+9	; 0x09
     6ca:	82 85       	ldd	r24, Z+10	; 0x0a
     6cc:	93 85       	ldd	r25, Z+11	; 0x0b
     6ce:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	4f e7       	ldi	r20, 0x7F	; 127
     6d8:	53 e4       	ldi	r21, 0x43	; 67
     6da:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     6de:	0e 94 95 1b 	call	0x372a	; 0x372a <round>
     6e2:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__fixunssfsi>
     6e6:	6a 83       	std	Y+2, r22	; 0x02
	Position[3] = ((int)(current_position[0]*100))%25;
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	48 ec       	ldi	r20, 0xC8	; 200
     6ee:	52 e4       	ldi	r21, 0x42	; 66
     6f0:	f8 01       	movw	r30, r16
     6f2:	60 81       	ld	r22, Z
     6f4:	71 81       	ldd	r23, Z+1	; 0x01
     6f6:	82 81       	ldd	r24, Z+2	; 0x02
     6f8:	93 81       	ldd	r25, Z+3	; 0x03
     6fa:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     6fe:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
     702:	0f 2e       	mov	r0, r31
     704:	f9 e1       	ldi	r31, 0x19	; 25
     706:	ef 2e       	mov	r14, r31
     708:	f1 2c       	mov	r15, r1
     70a:	f0 2d       	mov	r31, r0
     70c:	cb 01       	movw	r24, r22
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 3a 1c 	call	0x3874	; 0x3874 <__divmodhi4>
     714:	8b 83       	std	Y+3, r24	; 0x03
	Position[4] = ((int)(current_position[1]*100))%25;
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	48 ec       	ldi	r20, 0xC8	; 200
     71c:	52 e4       	ldi	r21, 0x42	; 66
     71e:	f8 01       	movw	r30, r16
     720:	64 81       	ldd	r22, Z+4	; 0x04
     722:	75 81       	ldd	r23, Z+5	; 0x05
     724:	86 81       	ldd	r24, Z+6	; 0x06
     726:	97 81       	ldd	r25, Z+7	; 0x07
     728:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     72c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
     730:	cb 01       	movw	r24, r22
     732:	b7 01       	movw	r22, r14
     734:	0e 94 3a 1c 	call	0x3874	; 0x3874 <__divmodhi4>
     738:	8c 83       	std	Y+4, r24	; 0x04
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	08 95       	ret

00000748 <clear_path>:

void clear_path (void)
{
     748:	ef e6       	ldi	r30, 0x6F	; 111
     74a:	f1 e0       	ldi	r31, 0x01	; 1
     74c:	87 e3       	ldi	r24, 0x37	; 55
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	df 01       	movw	r26, r30
     752:	11 97       	sbiw	r26, 0x01	; 1
	char i=0 ;
	for (i=0 ; i<100 ; i++)
	{
		Path [i][0] = 0;
     754:	1c 92       	st	X, r1
		Path [i][1] = 0;
     756:	10 82       	st	Z, r1
     758:	32 96       	adiw	r30, 0x02	; 2
}

void clear_path (void)
{
	char i=0 ;
	for (i=0 ; i<100 ; i++)
     75a:	e8 17       	cp	r30, r24
     75c:	f9 07       	cpc	r31, r25
     75e:	c1 f7       	brne	.-16     	; 0x750 <clear_path+0x8>
	{
		Path [i][0] = 0;
		Path [i][1] = 0;
	}
}
     760:	08 95       	ret

00000762 <main_init>:
void main_init()
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
	//***initializations***//
	Ext_memo_init();
     766:	c8 dc       	rcall	.-1648   	; 0xf8 <Ext_memo_init>
	AvrInit();
     768:	d6 d1       	rcall	.+940    	; 0xb16 <AvrInit>
	LcdInit();
     76a:	c8 de       	rcall	.-624    	; 0x4fc <LcdInit>
	MotorInit();
     76c:	d5 d2       	rcall	.+1450   	; 0xd18 <MotorInit>
	init_SPI(SLAVE);
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <init_SPI>
	Set_SPI_Recieve(SPI_Recieve_Path);
     774:	8e e9       	ldi	r24, 0x9E	; 158
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <Set_SPI_Recieve>
	clear_path();
     77c:	e5 df       	rcall	.-54     	; 0x748 <clear_path>
	LedOn(RLED);
     77e:	80 e1       	ldi	r24, 0x10	; 16
     780:	d2 de       	rcall	.-604    	; 0x526 <LedOn>
	
	psd_init();
     782:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <psd_init>
	SEI();
     786:	78 94       	sei
	psd_clear();
     788:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <psd_clear>
	
	
	int n = 1;//change for number of robot
	current_cell[0]=1;
     78c:	c1 e5       	ldi	r28, 0x51	; 81
     78e:	d2 e0       	ldi	r29, 0x02	; 2
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	60 e8       	ldi	r22, 0x80	; 128
     796:	7f e3       	ldi	r23, 0x3F	; 63
     798:	48 83       	st	Y, r20
     79a:	59 83       	std	Y+1, r21	; 0x01
     79c:	6a 83       	std	Y+2, r22	; 0x02
     79e:	7b 83       	std	Y+3, r23	; 0x03
	current_position[0]=0.25;
     7a0:	eb e0       	ldi	r30, 0x0B	; 11
     7a2:	f8 e0       	ldi	r31, 0x08	; 8
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e8       	ldi	r26, 0x80	; 128
     7aa:	be e3       	ldi	r27, 0x3E	; 62
     7ac:	80 83       	st	Z, r24
     7ae:	91 83       	std	Z+1, r25	; 0x01
     7b0:	a2 83       	std	Z+2, r26	; 0x02
     7b2:	b3 83       	std	Z+3, r27	; 0x03
	if (n==1)
	{
		current_cell[1]=1;
     7b4:	4c 83       	std	Y+4, r20	; 0x04
     7b6:	5d 83       	std	Y+5, r21	; 0x05
     7b8:	6e 83       	std	Y+6, r22	; 0x06
     7ba:	7f 83       	std	Y+7, r23	; 0x07
		current_position[1]=0.25;
     7bc:	84 83       	std	Z+4, r24	; 0x04
     7be:	95 83       	std	Z+5, r25	; 0x05
     7c0:	a6 83       	std	Z+6, r26	; 0x06
     7c2:	b7 83       	std	Z+7, r27	; 0x07
	else //(n==3)
	{
		current_cell[1]=14;
		current_position[1]=3.50;
	}
	Timer_init();
     7c4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Timer_init>
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <main>:
int main(void)
{
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	62 97       	sbiw	r28, 0x12	; 18
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
	double main_vx=0, main_vy =0;
	int track_result ;
	main_init();
     7e2:	bf df       	rcall	.-130    	; 0x762 <main_init>
	
	//for test only
	//_delay_ms(4000);
	char iP [2][5] = {{1,1,5,5,-1},{1,5,5,1,-1}};
     7e4:	8a e0       	ldi	r24, 0x0A	; 10
     7e6:	e4 e0       	ldi	r30, 0x04	; 4
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	de 01       	movw	r26, r28
     7ec:	11 96       	adiw	r26, 0x01	; 1
     7ee:	01 90       	ld	r0, Z+
     7f0:	0d 92       	st	X+, r0
     7f2:	8a 95       	dec	r24
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0x20>
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5f       	subi	r16, 0xFF	; 255
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	ce 01       	movw	r24, r28
     7fe:	06 96       	adiw	r24, 0x06	; 6
     800:	af e6       	ldi	r26, 0x6F	; 111
     802:	b1 e0       	ldi	r27, 0x01	; 1
     804:	9c 01       	movw	r18, r24
	for (int e=0 ; e<5 ; e++){Path[e][0]=iP[0][e];Path[e][1]=iP[1][e];} 
     806:	f8 01       	movw	r30, r16
     808:	61 91       	ld	r22, Z+
     80a:	8f 01       	movw	r16, r30
     80c:	ad 01       	movw	r20, r26
     80e:	41 50       	subi	r20, 0x01	; 1
     810:	51 09       	sbc	r21, r1
     812:	fa 01       	movw	r30, r20
     814:	60 83       	st	Z, r22
     816:	fc 01       	movw	r30, r24
     818:	41 91       	ld	r20, Z+
     81a:	cf 01       	movw	r24, r30
     81c:	4c 93       	st	X, r20
     81e:	12 96       	adiw	r26, 0x02	; 2
     820:	02 17       	cp	r16, r18
     822:	13 07       	cpc	r17, r19
     824:	81 f7       	brne	.-32     	; 0x806 <main+0x38>
	path_flag = 1 ;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <path_flag>
	stop_OA_index=100; 
     82c:	94 e6       	ldi	r25, 0x64	; 100
     82e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <stop_OA_index>
	current_cell[0]=1;current_cell[1]=1;
     832:	e1 e5       	ldi	r30, 0x51	; 81
     834:	f2 e0       	ldi	r31, 0x02	; 2
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	60 e8       	ldi	r22, 0x80	; 128
     83c:	7f e3       	ldi	r23, 0x3F	; 63
     83e:	40 83       	st	Z, r20
     840:	51 83       	std	Z+1, r21	; 0x01
     842:	62 83       	std	Z+2, r22	; 0x02
     844:	73 83       	std	Z+3, r23	; 0x03
     846:	44 83       	std	Z+4, r20	; 0x04
     848:	55 83       	std	Z+5, r21	; 0x05
     84a:	66 83       	std	Z+6, r22	; 0x06
     84c:	77 83       	std	Z+7, r23	; 0x07
	Num_of_agent=1;
     84e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Num_of_agent>
	Leader=2;
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Leader>
// 	Follower_pose[0]=25;
// 	Follower_pose[1]=25;
	//for test only 
	OutOfPath=0 ; 
     858:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <OutOfPath>
	}
	Timer_init();
}
int main(void)
{
	double main_vx=0, main_vy =0;
     85c:	1f 86       	std	Y+15, r1	; 0x0f
     85e:	18 8a       	std	Y+16, r1	; 0x10
     860:	19 8a       	std	Y+17, r1	; 0x11
     862:	1a 8a       	std	Y+18, r1	; 0x12
     864:	1b 86       	std	Y+11, r1	; 0x0b
     866:	1c 86       	std	Y+12, r1	; 0x0c
     868:	1d 86       	std	Y+13, r1	; 0x0d
     86a:	1e 86       	std	Y+14, r1	; 0x0e
					
					
				}
				else //follower
				{
					main_flag=1;
     86c:	99 24       	eor	r9, r9
     86e:	93 94       	inc	r9
							Position[5] = 0;
							Position[6] = 0;
						}
					}
					else{flip_flop=1;}
					current_position[0]+=main_vx*0.1;
     870:	0f 2e       	mov	r0, r31
     872:	fb e0       	ldi	r31, 0x0B	; 11
     874:	cf 2e       	mov	r12, r31
     876:	f8 e0       	ldi	r31, 0x08	; 8
     878:	df 2e       	mov	r13, r31
     87a:	f0 2d       	mov	r31, r0
				{
					main_flag=1;
					if (flip_flop==1)
					{
						flip_flop=0;
						if (Follower_pose[0]==0&&Follower_pose[1]==0) //leader stopped
     87c:	0f 2e       	mov	r0, r31
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	ef 2e       	mov	r14, r31
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	ff 2e       	mov	r15, r31
     886:	f0 2d       	mov	r31, r0
							LedOn(RLED);
							main_vx = (double)Follower_pose[0]/100;
							main_vy = (double)Follower_pose[1]/100;
							ApplyVxVy_double(main_vx,main_vy);
							LedOn(RLED);
							Position[5] = 0;
     888:	0f 2e       	mov	r0, r31
     88a:	f6 e3       	ldi	r31, 0x36	; 54
     88c:	af 2e       	mov	r10, r31
     88e:	f2 e0       	ldi	r31, 0x02	; 2
     890:	bf 2e       	mov	r11, r31
     892:	f0 2d       	mov	r31, r0
							ApplyVW(0,0);
							tracking_init();
							clear_path();
							LedOn(GLED);
							path_flag=0;
							Leader=2 ;
     894:	68 94       	set
     896:	88 24       	eor	r8, r8
     898:	81 f8       	bld	r8, 1
							Num_of_agent = 255 ;
     89a:	77 24       	eor	r7, r7
     89c:	7a 94       	dec	r7
					psd_read ();
					
					//while( psd[0]==0 || psd[1]==0 || psd[2]==0 );
					//LedOn(GLED);
					_delay_ms(10);
					if (psd[0]!=0&&psd[1]!=0&&psd[2]!=0)LedOn(GLED);
     89e:	0f e3       	ldi	r16, 0x3F	; 63
     8a0:	12 e0       	ldi	r17, 0x02	; 2
// 	Follower_pose[1]=25;
	//for test only 
	OutOfPath=0 ; 
	while(1)
	{
		while (!path_flag);
     8a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <path_flag>
     8a6:	88 23       	and	r24, r24
     8a8:	e1 f3       	breq	.-8      	; 0x8a2 <main+0xd4>
		// inside timer
		if (Timer_counter == TOV)
     8aa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Timer_counter>
     8ae:	81 36       	cpi	r24, 0x61	; 97
     8b0:	c1 f7       	brne	.-16     	; 0x8a2 <main+0xd4>
		{
			if (Num_of_agent==1) //track path
     8b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Num_of_agent>
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	09 f0       	breq	.+2      	; 0x8bc <main+0xee>
     8ba:	73 c0       	rjmp	.+230    	; 0x9a2 <main+0x1d4>
			{
				LedOn(RLED);
     8bc:	80 e1       	ldi	r24, 0x10	; 16
     8be:	33 de       	rcall	.-922    	; 0x526 <LedOn>
				Position[5]=0;
     8c0:	f5 01       	movw	r30, r10
     8c2:	15 82       	std	Z+5, r1	; 0x05
				Position[6]=0;
     8c4:	16 82       	std	Z+6, r1	; 0x06
				// Apply the code here
				if((at_cell_center==1)&&(j<stop_OA_index))//check if the robot at the center of cell
     8c6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <at_cell_center>
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <main+0x102>
     8ce:	3f c0       	rjmp	.+126    	; 0x94e <main+0x180>
     8d0:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <j>
     8d4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <stop_OA_index>
     8d8:	98 17       	cp	r25, r24
     8da:	b8 f5       	brcc	.+110    	; 0x94a <main+0x17c>
				{
					
					psd_clear();
     8dc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <psd_clear>
					psd_read ();
     8e0:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <psd_read>
     8e4:	8f e1       	ldi	r24, 0x1F	; 31
     8e6:	9e e4       	ldi	r25, 0x4E	; 78
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <main+0x11a>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <main+0x120>
     8ee:	00 00       	nop
					
					//while( psd[0]==0 || psd[1]==0 || psd[2]==0 );
					//LedOn(GLED);
					_delay_ms(10);
					if (psd[0]!=0&&psd[1]!=0&&psd[2]!=0)LedOn(GLED);
     8f0:	f8 01       	movw	r30, r16
     8f2:	80 81       	ld	r24, Z
     8f4:	91 81       	ldd	r25, Z+1	; 0x01
     8f6:	89 2b       	or	r24, r25
     8f8:	51 f0       	breq	.+20     	; 0x90e <main+0x140>
     8fa:	82 81       	ldd	r24, Z+2	; 0x02
     8fc:	93 81       	ldd	r25, Z+3	; 0x03
     8fe:	89 2b       	or	r24, r25
     900:	31 f0       	breq	.+12     	; 0x90e <main+0x140>
     902:	84 81       	ldd	r24, Z+4	; 0x04
     904:	95 81       	ldd	r25, Z+5	; 0x05
     906:	89 2b       	or	r24, r25
     908:	11 f0       	breq	.+4      	; 0x90e <main+0x140>
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	0c de       	rcall	.-1000   	; 0x526 <LedOn>
					if ( psd[0]<PSDThreshold || psd[1]<PSDThreshold || psd[2]<PSDThreshold || OutOfPath == 1 )
     90e:	f8 01       	movw	r30, r16
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
     914:	c2 97       	sbiw	r24, 0x32	; 50
     916:	60 f0       	brcs	.+24     	; 0x930 <main+0x162>
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	93 81       	ldd	r25, Z+3	; 0x03
     91c:	c2 97       	sbiw	r24, 0x32	; 50
     91e:	40 f0       	brcs	.+16     	; 0x930 <main+0x162>
     920:	84 81       	ldd	r24, Z+4	; 0x04
     922:	95 81       	ldd	r25, Z+5	; 0x05
     924:	c2 97       	sbiw	r24, 0x32	; 50
     926:	20 f0       	brcs	.+8      	; 0x930 <main+0x162>
     928:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <OutOfPath>
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	49 f4       	brne	.+18     	; 0x942 <main+0x174>
					{
						MotorStop(MOTOR_STOP_SMOOTH);
     930:	88 2d       	mov	r24, r8
     932:	9e d1       	rcall	.+828    	; 0xc70 <MotorStop>
						//LedOn(YLED);
						OA ( PointFromOA );
     934:	88 e6       	ldi	r24, 0x68	; 104
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	17 d6       	rcall	.+3118   	; 0x1568 <OA>
						modify_after_OA(OutOfPath);
     93a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <OutOfPath>
     93e:	0e 94 32 13 	call	0x2664	; 0x2664 <modify_after_OA>
					}
					
				}
				if (at_cell_center==1) {at_cell_center=0;} //clear flag
     942:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <at_cell_center>
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	11 f4       	brne	.+4      	; 0x94e <main+0x180>
     94a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <at_cell_center>
				if (tnr_start==0)
     94e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tnr_start>
     952:	81 11       	cpse	r24, r1
     954:	05 c0       	rjmp	.+10     	; 0x960 <main+0x192>
				{
					track_calc();
     956:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <track_calc>
					tnr_start=1;
     95a:	90 92 12 01 	sts	0x0112, r9	; 0x800112 <tnr_start>
     95e:	d7 c0       	rjmp	.+430    	; 0xb0e <main+0x340>
				}
				else 
				{
					track_result=track_slot();
     960:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <track_slot>
					if (track_result==end_of_path)
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	91 05       	cpc	r25, r1
     968:	91 f4       	brne	.+36     	; 0x98e <main+0x1c0>
					{
						OutOfPath=0;
     96a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <OutOfPath>
						tracking_init();
     96e:	0e 94 02 10 	call	0x2004	; 0x2004 <tracking_init>
						clear_path();
     972:	ea de       	rcall	.-556    	; 0x748 <clear_path>
						LedOn(GLED);
     974:	80 e4       	ldi	r24, 0x40	; 64
     976:	d7 dd       	rcall	.-1106   	; 0x526 <LedOn>
						path_flag=0;
     978:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <path_flag>
						while(Pose_index!=0);
     97c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Pose_index>
     980:	81 11       	cpse	r24, r1
     982:	fc cf       	rjmp	.-8      	; 0x97c <main+0x1ae>
						Leader=2 ;
     984:	80 92 02 01 	sts	0x0102, r8	; 0x800102 <Leader>
						Num_of_agent = 255 ;
     988:	70 92 03 01 	sts	0x0103, r7	; 0x800103 <Num_of_agent>
     98c:	c0 c0       	rjmp	.+384    	; 0xb0e <main+0x340>
						
					}
					else if (track_result==return_to_path_after_OA)
     98e:	02 97       	sbiw	r24, 0x02	; 2
     990:	09 f0       	breq	.+2      	; 0x994 <main+0x1c6>
     992:	bd c0       	rjmp	.+378    	; 0xb0e <main+0x340>
					{
						OutOfPath=0;
     994:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <OutOfPath>
						LedOn(GLED);
     998:	80 e4       	ldi	r24, 0x40	; 64
     99a:	c5 dd       	rcall	.-1142   	; 0x526 <LedOn>
						tnr_start=0;
     99c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tnr_start>
     9a0:	b6 c0       	rjmp	.+364    	; 0xb0e <main+0x340>
					}
				}
			}
			else if (Num_of_agent>1) //multiagent Shokry
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	08 f4       	brcc	.+2      	; 0x9a8 <main+0x1da>
     9a6:	b3 c0       	rjmp	.+358    	; 0xb0e <main+0x340>
			{
				if (Leader==1) //leader
     9a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Leader>
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	39 f5       	brne	.+78     	; 0x9fe <main+0x230>
				{
					if (tnr_start==0)
     9b0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tnr_start>
     9b4:	81 11       	cpse	r24, r1
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <main+0x1f6>
					{
						LedOn(YLED);
     9b8:	80 e2       	ldi	r24, 0x20	; 32
     9ba:	b5 dd       	rcall	.-1174   	; 0x526 <LedOn>
						tnr_start=1;
     9bc:	90 92 12 01 	sts	0x0112, r9	; 0x800112 <tnr_start>
						track_no_Rotation_calculations();
     9c0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <track_no_Rotation_calculations>
					}
					LedOn(RLED);
     9c4:	80 e1       	ldi	r24, 0x10	; 16
     9c6:	af dd       	rcall	.-1186   	; 0x526 <LedOn>
					if (track_no_Rotation()==1)
     9c8:	0e 94 aa 11 	call	0x2354	; 0x2354 <track_no_Rotation>
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <main+0x204>
     9d0:	9e c0       	rjmp	.+316    	; 0xb0e <main+0x340>
					{
						OutOfPath=0;
     9d2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <OutOfPath>
						MotorStop(MOTOR_STOP_FAST);
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	4b d1       	rcall	.+662    	; 0xc70 <MotorStop>
						ApplyVW(0,0);
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	a9 01       	movw	r20, r18
     9e0:	ca 01       	movw	r24, r20
     9e2:	b9 01       	movw	r22, r18
     9e4:	53 dd       	rcall	.-1370   	; 0x48c <ApplyVW>
						tracking_init();
     9e6:	0e 94 02 10 	call	0x2004	; 0x2004 <tracking_init>
						clear_path();
     9ea:	ae de       	rcall	.-676    	; 0x748 <clear_path>
						LedOn(GLED);
     9ec:	80 e4       	ldi	r24, 0x40	; 64
     9ee:	9b dd       	rcall	.-1226   	; 0x526 <LedOn>
						path_flag=0;
     9f0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <path_flag>
						Leader=2 ;
     9f4:	80 92 02 01 	sts	0x0102, r8	; 0x800102 <Leader>
						Num_of_agent = 255 ;
     9f8:	70 92 03 01 	sts	0x0103, r7	; 0x800103 <Num_of_agent>
     9fc:	88 c0       	rjmp	.+272    	; 0xb0e <main+0x340>
					
					
				}
				else //follower
				{
					main_flag=1;
     9fe:	90 92 10 01 	sts	0x0110, r9	; 0x800110 <main_flag>
					if (flip_flop==1)
     a02:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <flip_flop>
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	09 f0       	breq	.+2      	; 0xa0c <main+0x23e>
     a0a:	4f c0       	rjmp	.+158    	; 0xaaa <main+0x2dc>
					{
						flip_flop=0;
     a0c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <flip_flop>
						if (Follower_pose[0]==0&&Follower_pose[1]==0) //leader stopped
     a10:	f7 01       	movw	r30, r14
     a12:	80 81       	ld	r24, Z
     a14:	81 11       	cpse	r24, r1
     a16:	18 c0       	rjmp	.+48     	; 0xa48 <main+0x27a>
     a18:	81 81       	ldd	r24, Z+1	; 0x01
     a1a:	81 11       	cpse	r24, r1
     a1c:	15 c0       	rjmp	.+42     	; 0xa48 <main+0x27a>
						{
							OutOfPath=0;
     a1e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <OutOfPath>
							MotorStop(MOTOR_STOP_FAST);
     a22:	26 d1       	rcall	.+588    	; 0xc70 <MotorStop>
							ApplyVW(0,0);
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	a9 01       	movw	r20, r18
     a2a:	ca 01       	movw	r24, r20
     a2c:	b9 01       	movw	r22, r18
     a2e:	2e dd       	rcall	.-1444   	; 0x48c <ApplyVW>
							tracking_init();
     a30:	0e 94 02 10 	call	0x2004	; 0x2004 <tracking_init>
							clear_path();
     a34:	89 de       	rcall	.-750    	; 0x748 <clear_path>
							LedOn(GLED);
     a36:	80 e4       	ldi	r24, 0x40	; 64
     a38:	76 dd       	rcall	.-1300   	; 0x526 <LedOn>
							path_flag=0;
     a3a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <path_flag>
							Leader=2 ;
     a3e:	80 92 02 01 	sts	0x0102, r8	; 0x800102 <Leader>
							Num_of_agent = 255 ;
     a42:	70 92 03 01 	sts	0x0103, r7	; 0x800103 <Num_of_agent>
     a46:	33 c0       	rjmp	.+102    	; 0xaae <main+0x2e0>
						}
						else
						{
							LedOn(RLED);
     a48:	80 e1       	ldi	r24, 0x10	; 16
     a4a:	6d dd       	rcall	.-1318   	; 0x526 <LedOn>
							main_vx = (double)Follower_pose[0]/100;
     a4c:	f7 01       	movw	r30, r14
     a4e:	60 81       	ld	r22, Z
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	48 ec       	ldi	r20, 0xC8	; 200
     a60:	52 e4       	ldi	r21, 0x42	; 66
     a62:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
     a66:	6b 87       	std	Y+11, r22	; 0x0b
     a68:	7c 87       	std	Y+12, r23	; 0x0c
     a6a:	8d 87       	std	Y+13, r24	; 0x0d
     a6c:	9e 87       	std	Y+14, r25	; 0x0e
							main_vy = (double)Follower_pose[1]/100;
     a6e:	f7 01       	movw	r30, r14
     a70:	61 81       	ldd	r22, Z+1	; 0x01
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	48 ec       	ldi	r20, 0xC8	; 200
     a82:	52 e4       	ldi	r21, 0x42	; 66
     a84:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
     a88:	6f 87       	std	Y+15, r22	; 0x0f
     a8a:	78 8b       	std	Y+16, r23	; 0x10
     a8c:	89 8b       	std	Y+17, r24	; 0x11
     a8e:	9a 8b       	std	Y+18, r25	; 0x12
							ApplyVxVy_double(main_vx,main_vy);
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	6b 85       	ldd	r22, Y+11	; 0x0b
     a96:	7c 85       	ldd	r23, Y+12	; 0x0c
     a98:	8d 85       	ldd	r24, Y+13	; 0x0d
     a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a9c:	08 dd       	rcall	.-1520   	; 0x4ae <ApplyVxVy_double>
							LedOn(RLED);
     a9e:	80 e1       	ldi	r24, 0x10	; 16
     aa0:	42 dd       	rcall	.-1404   	; 0x526 <LedOn>
							Position[5] = 0;
     aa2:	f5 01       	movw	r30, r10
     aa4:	15 82       	std	Z+5, r1	; 0x05
							Position[6] = 0;
     aa6:	16 82       	std	Z+6, r1	; 0x06
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <main+0x2e0>
						}
					}
					else{flip_flop=1;}
     aaa:	90 92 13 01 	sts	0x0113, r9	; 0x800113 <flip_flop>
					current_position[0]+=main_vx*0.1;
     aae:	2d ec       	ldi	r18, 0xCD	; 205
     ab0:	3c ec       	ldi	r19, 0xCC	; 204
     ab2:	4c ec       	ldi	r20, 0xCC	; 204
     ab4:	5d e3       	ldi	r21, 0x3D	; 61
     ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
     aba:	8d 85       	ldd	r24, Y+13	; 0x0d
     abc:	9e 85       	ldd	r25, Y+14	; 0x0e
     abe:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	f6 01       	movw	r30, r12
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	93 81       	ldd	r25, Z+3	; 0x03
     ad0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
     ad4:	f6 01       	movw	r30, r12
     ad6:	60 83       	st	Z, r22
     ad8:	71 83       	std	Z+1, r23	; 0x01
     ada:	82 83       	std	Z+2, r24	; 0x02
     adc:	93 83       	std	Z+3, r25	; 0x03
					current_position[1]+=main_vy*0.1;
     ade:	2d ec       	ldi	r18, 0xCD	; 205
     ae0:	3c ec       	ldi	r19, 0xCC	; 204
     ae2:	4c ec       	ldi	r20, 0xCC	; 204
     ae4:	5d e3       	ldi	r21, 0x3D	; 61
     ae6:	6f 85       	ldd	r22, Y+15	; 0x0f
     ae8:	78 89       	ldd	r23, Y+16	; 0x10
     aea:	89 89       	ldd	r24, Y+17	; 0x11
     aec:	9a 89       	ldd	r25, Y+18	; 0x12
     aee:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	f6 01       	movw	r30, r12
     af8:	64 81       	ldd	r22, Z+4	; 0x04
     afa:	75 81       	ldd	r23, Z+5	; 0x05
     afc:	86 81       	ldd	r24, Z+6	; 0x06
     afe:	97 81       	ldd	r25, Z+7	; 0x07
     b00:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
     b04:	f6 01       	movw	r30, r12
     b06:	64 83       	std	Z+4, r22	; 0x04
     b08:	75 83       	std	Z+5, r23	; 0x05
     b0a:	86 83       	std	Z+6, r24	; 0x06
     b0c:	97 83       	std	Z+7, r25	; 0x07
				}
			}
			Update_position();
     b0e:	b8 dd       	rcall	.-1168   	; 0x680 <Update_position>
			Timer_Reset();
     b10:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <Timer_Reset>
     b14:	c6 ce       	rjmp	.-628    	; 0x8a2 <main+0xd4>

00000b16 <AvrInit>:
     b16:	80 e8       	ldi	r24, 0x80	; 128
     b18:	85 bf       	out	0x35, r24	; 53
     b1a:	94 e4       	ldi	r25, 0x44	; 68
     b1c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     b20:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     b24:	08 95       	ret

00000b26 <WriteData>:
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	39 f0       	breq	.+14     	; 0xb38 <WriteData+0x12>
     b2a:	18 f0       	brcs	.+6      	; 0xb32 <WriteData+0xc>
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	39 f0       	breq	.+14     	; 0xb3e <WriteData+0x18>
     b30:	08 95       	ret
     b32:	60 93 00 41 	sts	0x4100, r22	; 0x804100 <__bss_end+0x35b9>
     b36:	08 95       	ret
     b38:	60 93 00 43 	sts	0x4300, r22	; 0x804300 <__bss_end+0x37b9>
     b3c:	08 95       	ret
     b3e:	60 93 00 45 	sts	0x4500, r22	; 0x804500 <__bss_end+0x39b9>
     b42:	08 95       	ret

00000b44 <ReadStatus>:
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	39 f0       	breq	.+14     	; 0xb56 <ReadStatus+0x12>
     b48:	18 f0       	brcs	.+6      	; 0xb50 <ReadStatus+0xc>
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	39 f0       	breq	.+14     	; 0xb5c <ReadStatus+0x18>
     b4e:	09 c0       	rjmp	.+18     	; 0xb62 <ReadStatus+0x1e>
     b50:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__bss_end+0x34b9>
     b54:	08 95       	ret
     b56:	80 91 00 42 	lds	r24, 0x4200	; 0x804200 <__bss_end+0x36b9>
     b5a:	08 95       	ret
     b5c:	80 91 00 44 	lds	r24, 0x4400	; 0x804400 <__bss_end+0x38b9>
     b60:	08 95       	ret
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	08 95       	ret

00000b66 <BusybitCheck>:
     b66:	cf 93       	push	r28
     b68:	c8 2f       	mov	r28, r24
     b6a:	8c 2f       	mov	r24, r28
     b6c:	eb df       	rcall	.-42     	; 0xb44 <ReadStatus>
     b6e:	80 fd       	sbrc	r24, 0
     b70:	fc cf       	rjmp	.-8      	; 0xb6a <BusybitCheck+0x4>
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <WriteCmd>:
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	c8 2f       	mov	r28, r24
     b7c:	d6 2f       	mov	r29, r22
     b7e:	f3 df       	rcall	.-26     	; 0xb66 <BusybitCheck>
     b80:	c1 30       	cpi	r28, 0x01	; 1
     b82:	39 f0       	breq	.+14     	; 0xb92 <WriteCmd+0x1c>
     b84:	18 f0       	brcs	.+6      	; 0xb8c <WriteCmd+0x16>
     b86:	c2 30       	cpi	r28, 0x02	; 2
     b88:	39 f0       	breq	.+14     	; 0xb98 <WriteCmd+0x22>
     b8a:	08 c0       	rjmp	.+16     	; 0xb9c <WriteCmd+0x26>
     b8c:	d0 93 00 40 	sts	0x4000, r29	; 0x804000 <__bss_end+0x34b9>
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <WriteCmd+0x26>
     b92:	d0 93 00 42 	sts	0x4200, r29	; 0x804200 <__bss_end+0x36b9>
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <WriteCmd+0x26>
     b98:	d0 93 00 44 	sts	0x4400, r29	; 0x804400 <__bss_end+0x38b9>
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <WriteData2>:
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	c8 2f       	mov	r28, r24
     baa:	d6 2f       	mov	r29, r22
     bac:	17 2f       	mov	r17, r23
     bae:	db df       	rcall	.-74     	; 0xb66 <BusybitCheck>
     bb0:	61 2f       	mov	r22, r17
     bb2:	8c 2f       	mov	r24, r28
     bb4:	b8 df       	rcall	.-144    	; 0xb26 <WriteData>
     bb6:	6d 2f       	mov	r22, r29
     bb8:	8c 2f       	mov	r24, r28
     bba:	b5 df       	rcall	.-150    	; 0xb26 <WriteData>
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	08 95       	ret

00000bc4 <PIDSetting>:
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	c8 2f       	mov	r28, r24
     bd4:	6b 01       	movw	r12, r22
     bd6:	7a 01       	movw	r14, r20
     bd8:	89 01       	movw	r16, r18
     bda:	6e e1       	ldi	r22, 0x1E	; 30
     bdc:	cc df       	rcall	.-104    	; 0xb76 <WriteCmd>
     bde:	6e e0       	ldi	r22, 0x0E	; 14
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	8c 2f       	mov	r24, r28
     be4:	de df       	rcall	.-68     	; 0xba2 <WriteData2>
     be6:	b6 01       	movw	r22, r12
     be8:	8c 2f       	mov	r24, r28
     bea:	db df       	rcall	.-74     	; 0xba2 <WriteData2>
     bec:	b7 01       	movw	r22, r14
     bee:	8c 2f       	mov	r24, r28
     bf0:	d8 df       	rcall	.-80     	; 0xba2 <WriteData2>
     bf2:	b8 01       	movw	r22, r16
     bf4:	8c 2f       	mov	r24, r28
     bf6:	d5 df       	rcall	.-86     	; 0xba2 <WriteData2>
     bf8:	64 e0       	ldi	r22, 0x04	; 4
     bfa:	8c 2f       	mov	r24, r28
     bfc:	bc df       	rcall	.-136    	; 0xb76 <WriteCmd>
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	08 95       	ret

00000c0e <MotorReset>:
     c0e:	cf 93       	push	r28
     c10:	c8 2f       	mov	r28, r24
     c12:	98 df       	rcall	.-208    	; 0xb44 <ReadStatus>
     c14:	8f 7b       	andi	r24, 0xBF	; 191
     c16:	84 38       	cpi	r24, 0x84	; 132
     c18:	39 f4       	brne	.+14     	; 0xc28 <MotorReset+0x1a>
     c1a:	6d e1       	ldi	r22, 0x1D	; 29
     c1c:	8c 2f       	mov	r24, r28
     c1e:	ab df       	rcall	.-170    	; 0xb76 <WriteCmd>
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	8c 2f       	mov	r24, r28
     c26:	bd df       	rcall	.-134    	; 0xba2 <WriteData2>
     c28:	8c 2f       	mov	r24, r28
     c2a:	8c df       	rcall	.-232    	; 0xb44 <ReadStatus>
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <MotorDir>:
     c30:	cf 93       	push	r28
     c32:	c8 2f       	mov	r28, r24
     c34:	66 23       	and	r22, r22
     c36:	19 f0       	breq	.+6      	; 0xc3e <MotorDir+0xe>
     c38:	61 30       	cpi	r22, 0x01	; 1
     c3a:	41 f0       	breq	.+16     	; 0xc4c <MotorDir+0x1c>
     c3c:	0d c0       	rjmp	.+26     	; 0xc58 <MotorDir+0x28>
     c3e:	6f e1       	ldi	r22, 0x1F	; 31
     c40:	9a df       	rcall	.-204    	; 0xb76 <WriteCmd>
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	78 e1       	ldi	r23, 0x18	; 24
     c46:	8c 2f       	mov	r24, r28
     c48:	ac df       	rcall	.-168    	; 0xba2 <WriteData2>
     c4a:	06 c0       	rjmp	.+12     	; 0xc58 <MotorDir+0x28>
     c4c:	6f e1       	ldi	r22, 0x1F	; 31
     c4e:	93 df       	rcall	.-218    	; 0xb76 <WriteCmd>
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	78 e0       	ldi	r23, 0x08	; 8
     c54:	8c 2f       	mov	r24, r28
     c56:	a5 df       	rcall	.-182    	; 0xba2 <WriteData2>
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <STTMotor>:
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	8a df       	rcall	.-236    	; 0xb76 <WriteCmd>
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	87 df       	rcall	.-242    	; 0xb76 <WriteCmd>
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	84 cf       	rjmp	.-248    	; 0xb76 <WriteCmd>
     c6e:	08 95       	ret

00000c70 <MotorStop>:
     c70:	cf 93       	push	r28
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	81 f0       	breq	.+32     	; 0xc96 <MotorStop+0x26>
     c76:	18 f0       	brcs	.+6      	; 0xc7e <MotorStop+0xe>
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	c9 f0       	breq	.+50     	; 0xcae <MotorStop+0x3e>
     c7c:	23 c0       	rjmp	.+70     	; 0xcc4 <MotorStop+0x54>
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
     c80:	6f e1       	ldi	r22, 0x1F	; 31
     c82:	8c 2f       	mov	r24, r28
     c84:	78 df       	rcall	.-272    	; 0xb76 <WriteCmd>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	8c 2f       	mov	r24, r28
     c8c:	8a df       	rcall	.-236    	; 0xba2 <WriteData2>
     c8e:	cf 5f       	subi	r28, 0xFF	; 255
     c90:	c3 30       	cpi	r28, 0x03	; 3
     c92:	b1 f7       	brne	.-20     	; 0xc80 <MotorStop+0x10>
     c94:	17 c0       	rjmp	.+46     	; 0xcc4 <MotorStop+0x54>
     c96:	c0 e0       	ldi	r28, 0x00	; 0
     c98:	6f e1       	ldi	r22, 0x1F	; 31
     c9a:	8c 2f       	mov	r24, r28
     c9c:	6c df       	rcall	.-296    	; 0xb76 <WriteCmd>
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	71 e0       	ldi	r23, 0x01	; 1
     ca2:	8c 2f       	mov	r24, r28
     ca4:	7e df       	rcall	.-260    	; 0xba2 <WriteData2>
     ca6:	cf 5f       	subi	r28, 0xFF	; 255
     ca8:	c3 30       	cpi	r28, 0x03	; 3
     caa:	b1 f7       	brne	.-20     	; 0xc98 <MotorStop+0x28>
     cac:	0b c0       	rjmp	.+22     	; 0xcc4 <MotorStop+0x54>
     cae:	c0 e0       	ldi	r28, 0x00	; 0
     cb0:	6f e1       	ldi	r22, 0x1F	; 31
     cb2:	8c 2f       	mov	r24, r28
     cb4:	60 df       	rcall	.-320    	; 0xb76 <WriteCmd>
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	74 e0       	ldi	r23, 0x04	; 4
     cba:	8c 2f       	mov	r24, r28
     cbc:	72 df       	rcall	.-284    	; 0xba2 <WriteData2>
     cbe:	cf 5f       	subi	r28, 0xFF	; 255
     cc0:	c3 30       	cpi	r28, 0x03	; 3
     cc2:	b1 f7       	brne	.-20     	; 0xcb0 <MotorStop+0x40>
     cc4:	cb df       	rcall	.-106    	; 0xc5c <STTMotor>
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <AccSet>:
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	cf 93       	push	r28
     cd4:	c8 2f       	mov	r28, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	ba 01       	movw	r22, r20
     cda:	20 e6       	ldi	r18, 0x60	; 96
     cdc:	30 e3       	ldi	r19, 0x30	; 48
     cde:	4b e2       	ldi	r20, 0x2B	; 43
     ce0:	51 e4       	ldi	r21, 0x41	; 65
     ce2:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     ce6:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__fixunssfsi>
     cea:	6b 01       	movw	r12, r22
     cec:	7c 01       	movw	r14, r24
     cee:	6f e1       	ldi	r22, 0x1F	; 31
     cf0:	8c 2f       	mov	r24, r28
     cf2:	41 df       	rcall	.-382    	; 0xb76 <WriteCmd>
     cf4:	60 e2       	ldi	r22, 0x20	; 32
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	8c 2f       	mov	r24, r28
     cfa:	53 df       	rcall	.-346    	; 0xba2 <WriteData2>
     cfc:	b7 01       	movw	r22, r14
     cfe:	88 27       	eor	r24, r24
     d00:	99 27       	eor	r25, r25
     d02:	8c 2f       	mov	r24, r28
     d04:	4e df       	rcall	.-356    	; 0xba2 <WriteData2>
     d06:	b6 01       	movw	r22, r12
     d08:	8c 2f       	mov	r24, r28
     d0a:	4b df       	rcall	.-362    	; 0xba2 <WriteData2>
     d0c:	cf 91       	pop	r28
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	08 95       	ret

00000d18 <MotorInit>:
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	c0 e0       	ldi	r28, 0x00	; 0
     d1e:	da e4       	ldi	r29, 0x4A	; 74
     d20:	88 ef       	ldi	r24, 0xF8	; 248
     d22:	88 83       	st	Y, r24
     d24:	16 9a       	sbi	0x02, 6	; 2
     d26:	1e 9a       	sbi	0x03, 6	; 3
     d28:	2f ef       	ldi	r18, 0xFF	; 255
     d2a:	84 e3       	ldi	r24, 0x34	; 52
     d2c:	9c e0       	ldi	r25, 0x0C	; 12
     d2e:	21 50       	subi	r18, 0x01	; 1
     d30:	80 40       	sbci	r24, 0x00	; 0
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	e1 f7       	brne	.-8      	; 0xd2e <MotorInit+0x16>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <MotorInit+0x20>
     d38:	00 00       	nop
     d3a:	1e 98       	cbi	0x03, 6	; 3
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	67 df       	rcall	.-306    	; 0xc0e <MotorReset>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	65 df       	rcall	.-310    	; 0xc0e <MotorReset>
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	63 df       	rcall	.-314    	; 0xc0e <MotorReset>
     d48:	24 ef       	ldi	r18, 0xF4	; 244
     d4a:	31 e0       	ldi	r19, 0x01	; 1
     d4c:	42 e0       	ldi	r20, 0x02	; 2
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	60 ed       	ldi	r22, 0xD0	; 208
     d52:	77 e0       	ldi	r23, 0x07	; 7
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	36 df       	rcall	.-404    	; 0xbc4 <PIDSetting>
     d58:	24 ef       	ldi	r18, 0xF4	; 244
     d5a:	31 e0       	ldi	r19, 0x01	; 1
     d5c:	42 e0       	ldi	r20, 0x02	; 2
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	60 ed       	ldi	r22, 0xD0	; 208
     d62:	77 e0       	ldi	r23, 0x07	; 7
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	2e df       	rcall	.-420    	; 0xbc4 <PIDSetting>
     d68:	24 ef       	ldi	r18, 0xF4	; 244
     d6a:	31 e0       	ldi	r19, 0x01	; 1
     d6c:	42 e0       	ldi	r20, 0x02	; 2
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	60 ed       	ldi	r22, 0xD0	; 208
     d72:	77 e0       	ldi	r23, 0x07	; 7
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	26 df       	rcall	.-436    	; 0xbc4 <PIDSetting>
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	68 ec       	ldi	r22, 0xC8	; 200
     d7e:	72 e4       	ldi	r23, 0x42	; 66
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	a3 df       	rcall	.-186    	; 0xcca <AccSet>
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	68 ec       	ldi	r22, 0xC8	; 200
     d8a:	72 e4       	ldi	r23, 0x42	; 66
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	9d df       	rcall	.-198    	; 0xcca <AccSet>
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	68 ec       	ldi	r22, 0xC8	; 200
     d96:	72 e4       	ldi	r23, 0x42	; 66
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	97 df       	rcall	.-210    	; 0xcca <AccSet>
     d9c:	87 e0       	ldi	r24, 0x07	; 7
     d9e:	88 83       	st	Y, r24
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <VeloSet>:
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	cf 93       	push	r28
     db0:	c8 2f       	mov	r28, r24
     db2:	cb 01       	movw	r24, r22
     db4:	ba 01       	movw	r22, r20
     db6:	27 ef       	ldi	r18, 0xF7	; 247
     db8:	3e ef       	ldi	r19, 0xFE	; 254
     dba:	42 e0       	ldi	r20, 0x02	; 2
     dbc:	54 e4       	ldi	r21, 0x44	; 68
     dbe:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     dc2:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__fixunssfsi>
     dc6:	6b 01       	movw	r12, r22
     dc8:	7c 01       	movw	r14, r24
     dca:	6f e1       	ldi	r22, 0x1F	; 31
     dcc:	8c 2f       	mov	r24, r28
     dce:	d3 de       	rcall	.-602    	; 0xb76 <WriteCmd>
     dd0:	68 e0       	ldi	r22, 0x08	; 8
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	8c 2f       	mov	r24, r28
     dd6:	e5 de       	rcall	.-566    	; 0xba2 <WriteData2>
     dd8:	b7 01       	movw	r22, r14
     dda:	88 27       	eor	r24, r24
     ddc:	99 27       	eor	r25, r25
     dde:	8c 2f       	mov	r24, r28
     de0:	e0 de       	rcall	.-576    	; 0xba2 <WriteData2>
     de2:	b6 01       	movw	r22, r12
     de4:	8c 2f       	mov	r24, r28
     de6:	dd de       	rcall	.-582    	; 0xba2 <WriteData2>
     de8:	cf 91       	pop	r28
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	08 95       	ret

00000df4 <MotorStart>:
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	8c 01       	movw	r16, r24
     e0c:	c0 e0       	ldi	r28, 0x00	; 0
     e0e:	f8 01       	movw	r30, r16
     e10:	c1 90       	ld	r12, Z+
     e12:	d1 90       	ld	r13, Z+
     e14:	e1 90       	ld	r14, Z+
     e16:	f1 90       	ld	r15, Z+
     e18:	8f 01       	movw	r16, r30
     e1a:	2a e9       	ldi	r18, 0x9A	; 154
     e1c:	36 eb       	ldi	r19, 0xB6	; 182
     e1e:	4b e4       	ldi	r20, 0x4B	; 75
     e20:	50 e4       	ldi	r21, 0x40	; 64
     e22:	c7 01       	movw	r24, r14
     e24:	b6 01       	movw	r22, r12
     e26:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     e2a:	4b 01       	movw	r8, r22
     e2c:	5c 01       	movw	r10, r24
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	a9 01       	movw	r20, r18
     e34:	c7 01       	movw	r24, r14
     e36:	b6 01       	movw	r22, r12
     e38:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
     e3c:	88 23       	and	r24, r24
     e3e:	4c f4       	brge	.+18     	; 0xe52 <MotorStart+0x5e>
     e40:	b5 01       	movw	r22, r10
     e42:	a4 01       	movw	r20, r8
     e44:	70 58       	subi	r23, 0x80	; 128
     e46:	8c 2f       	mov	r24, r28
     e48:	ae df       	rcall	.-164    	; 0xda6 <VeloSet>
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	8c 2f       	mov	r24, r28
     e4e:	f0 de       	rcall	.-544    	; 0xc30 <MotorDir>
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <MotorStart+0x6c>
     e52:	b5 01       	movw	r22, r10
     e54:	a4 01       	movw	r20, r8
     e56:	8c 2f       	mov	r24, r28
     e58:	a6 df       	rcall	.-180    	; 0xda6 <VeloSet>
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	8c 2f       	mov	r24, r28
     e5e:	e8 de       	rcall	.-560    	; 0xc30 <MotorDir>
     e60:	cf 5f       	subi	r28, 0xFF	; 255
     e62:	c3 30       	cpi	r28, 0x03	; 3
     e64:	a1 f6       	brne	.-88     	; 0xe0e <MotorStart+0x1a>
     e66:	fa de       	rcall	.-524    	; 0xc5c <STTMotor>
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	9f 90       	pop	r9
     e7c:	8f 90       	pop	r8
     e7e:	08 95       	ret

00000e80 <WhichNext>:
    -1,-1   0,-1    1,-1
*/

// index of path +1 to find next
int WhichNext ( char j  , int NextPoint[3])
{
     e80:	2f 92       	push	r2
     e82:	3f 92       	push	r3
     e84:	4f 92       	push	r4
     e86:	5f 92       	push	r5
     e88:	6f 92       	push	r6
     e8a:	7f 92       	push	r7
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	2c 97       	sbiw	r28, 0x0c	; 12
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	18 2f       	mov	r17, r24
     eb4:	7e 83       	std	Y+6, r23	; 0x06
     eb6:	6d 83       	std	Y+5, r22	; 0x05
    int i,index=0;
    double Dist ,MiniDist=1000;
    if ( abs(Path[j+1][0]-current_cell[0])<2 && abs(Path[j+1][1]-current_cell[1])<2 && psd[0]!=80 && psd[1]!=80 && psd[2]!=80 )
     eb8:	e8 2e       	mov	r14, r24
     eba:	f1 2c       	mov	r15, r1
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	e8 1a       	sub	r14, r24
     ec0:	f8 0a       	sbc	r15, r24
     ec2:	80 90 51 02 	lds	r8, 0x0251	; 0x800251 <current_cell>
     ec6:	90 90 52 02 	lds	r9, 0x0252	; 0x800252 <current_cell+0x1>
     eca:	a0 90 53 02 	lds	r10, 0x0253	; 0x800253 <current_cell+0x2>
     ece:	b0 90 54 02 	lds	r11, 0x0254	; 0x800254 <current_cell+0x3>
     ed2:	f7 01       	movw	r30, r14
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	e2 59       	subi	r30, 0x92	; 146
     eda:	fe 4f       	sbci	r31, 0xFE	; 254
     edc:	60 81       	ld	r22, Z
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
     ee8:	a5 01       	movw	r20, r10
     eea:	94 01       	movw	r18, r8
     eec:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
     ef0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	63 30       	cpi	r22, 0x03	; 3
     efa:	71 05       	cpc	r23, r1
     efc:	90 f5       	brcc	.+100    	; 0xf62 <WhichNext+0xe2>
     efe:	f7 01       	movw	r30, r14
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	e2 59       	subi	r30, 0x92	; 146
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	61 81       	ldd	r22, Z+1	; 0x01
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
     f14:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <current_cell+0x4>
     f18:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <current_cell+0x5>
     f1c:	40 91 57 02 	lds	r20, 0x0257	; 0x800257 <current_cell+0x6>
     f20:	50 91 58 02 	lds	r21, 0x0258	; 0x800258 <current_cell+0x7>
     f24:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
     f28:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
     f2c:	6f 5f       	subi	r22, 0xFF	; 255
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	63 30       	cpi	r22, 0x03	; 3
     f32:	71 05       	cpc	r23, r1
     f34:	b0 f4       	brcc	.+44     	; 0xf62 <WhichNext+0xe2>
     f36:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <psd>
     f3a:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <psd+0x1>
     f3e:	80 35       	cpi	r24, 0x50	; 80
     f40:	91 05       	cpc	r25, r1
     f42:	79 f0       	breq	.+30     	; 0xf62 <WhichNext+0xe2>
     f44:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <psd+0x2>
     f48:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <psd+0x3>
     f4c:	80 35       	cpi	r24, 0x50	; 80
     f4e:	91 05       	cpc	r25, r1
     f50:	41 f0       	breq	.+16     	; 0xf62 <WhichNext+0xe2>
     f52:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <psd+0x4>
     f56:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <psd+0x5>
     f5a:	80 35       	cpi	r24, 0x50	; 80
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <WhichNext+0xe2>
            { j++; }
     f60:	1f 5f       	subi	r17, 0xFF	; 255
    for(i=(j+1);i<(m+j);i++)		// i=j+1 be cause path[j] is already passed
     f62:	a1 2f       	mov	r26, r17
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	bc 87       	std	Y+12, r27	; 0x0c
     f68:	ab 87       	std	Y+11, r26	; 0x0b
     f6a:	1d 01       	movw	r2, r26
     f6c:	bf ef       	ldi	r27, 0xFF	; 255
     f6e:	2b 1a       	sub	r2, r27
     f70:	3b 0a       	sbc	r3, r27
     f72:	8b 85       	ldd	r24, Y+11	; 0x0b
     f74:	9c 85       	ldd	r25, Y+12	; 0x0c
     f76:	03 96       	adiw	r24, 0x03	; 3
     f78:	28 16       	cp	r2, r24
     f7a:	39 06       	cpc	r3, r25
     f7c:	0c f0       	brlt	.+2      	; 0xf80 <WhichNext+0x100>
     f7e:	c8 c0       	rjmp	.+400    	; 0x1110 <__stack+0x11>
    {
        if (Path[i][0]==255||Path[i][1]==255) {break;} // obstacle is goal :D    && or ||
     f80:	f1 01       	movw	r30, r2
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	e2 59       	subi	r30, 0x92	; 146
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	60 81       	ld	r22, Z
     f8c:	6f 3f       	cpi	r22, 0xFF	; 255
     f8e:	09 f4       	brne	.+2      	; 0xf92 <WhichNext+0x112>
     f90:	c2 c0       	rjmp	.+388    	; 0x1116 <__stack+0x17>
     f92:	f1 01       	movw	r30, r2
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e2 59       	subi	r30, 0x92	; 146
     f9a:	fe 4f       	sbci	r31, 0xFE	; 254
     f9c:	11 81       	ldd	r17, Z+1	; 0x01
     f9e:	1f 3f       	cpi	r17, 0xFF	; 255
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <WhichNext+0x124>
     fa2:	bc c0       	rjmp	.+376    	; 0x111c <__stack+0x1d>
		Dist = sqrt( pow( (current_cell[0]-Path[i][0]),2) + pow( (current_cell[1]-Path[i][1]),2) );
     fa4:	40 90 55 02 	lds	r4, 0x0255	; 0x800255 <current_cell+0x4>
     fa8:	50 90 56 02 	lds	r5, 0x0256	; 0x800256 <current_cell+0x5>
     fac:	60 90 57 02 	lds	r6, 0x0257	; 0x800257 <current_cell+0x6>
     fb0:	70 90 58 02 	lds	r7, 0x0258	; 0x800258 <current_cell+0x7>
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	c5 01       	movw	r24, r10
     fc4:	b4 01       	movw	r22, r8
     fc6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
     fca:	69 83       	std	Y+1, r22	; 0x01
     fcc:	7a 83       	std	Y+2, r23	; 0x02
     fce:	8b 83       	std	Y+3, r24	; 0x03
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	61 2f       	mov	r22, r17
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
     fde:	9b 01       	movw	r18, r22
     fe0:	ac 01       	movw	r20, r24
     fe2:	c3 01       	movw	r24, r6
     fe4:	b2 01       	movw	r22, r4
     fe6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
     fea:	6b 01       	movw	r12, r22
     fec:	7c 01       	movw	r14, r24
     fee:	29 81       	ldd	r18, Y+1	; 0x01
     ff0:	3a 81       	ldd	r19, Y+2	; 0x02
     ff2:	4b 81       	ldd	r20, Y+3	; 0x03
     ff4:	5c 81       	ldd	r21, Y+4	; 0x04
     ff6:	ca 01       	movw	r24, r20
     ff8:	b9 01       	movw	r22, r18
     ffa:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
     ffe:	6f 83       	std	Y+7, r22	; 0x07
    1000:	78 87       	std	Y+8, r23	; 0x08
    1002:	89 87       	std	Y+9, r24	; 0x09
    1004:	9a 87       	std	Y+10, r25	; 0x0a
    1006:	29 81       	ldd	r18, Y+1	; 0x01
    1008:	3a 81       	ldd	r19, Y+2	; 0x02
    100a:	4b 81       	ldd	r20, Y+3	; 0x03
    100c:	5c 81       	ldd	r21, Y+4	; 0x04
    100e:	ca 01       	movw	r24, r20
    1010:	b9 01       	movw	r22, r18
    1012:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1016:	69 83       	std	Y+1, r22	; 0x01
    1018:	7a 83       	std	Y+2, r23	; 0x02
    101a:	8b 83       	std	Y+3, r24	; 0x03
    101c:	9c 83       	std	Y+4, r25	; 0x04
    101e:	a7 01       	movw	r20, r14
    1020:	96 01       	movw	r18, r12
    1022:	c7 01       	movw	r24, r14
    1024:	b6 01       	movw	r22, r12
    1026:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    102a:	9b 01       	movw	r18, r22
    102c:	ac 01       	movw	r20, r24
    102e:	69 81       	ldd	r22, Y+1	; 0x01
    1030:	7a 81       	ldd	r23, Y+2	; 0x02
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    103a:	0e 94 bf 1b 	call	0x377e	; 0x377e <sqrt>
    103e:	6b 01       	movw	r12, r22
    1040:	7c 01       	movw	r14, r24
        if (Dist<MiniDist)
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a e7       	ldi	r20, 0x7A	; 122
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    104e:	88 23       	and	r24, r24
    1050:	54 f0       	brlt	.+20     	; 0x1066 <WhichNext+0x1e6>
    1052:	0f 2e       	mov	r0, r31
    1054:	c1 2c       	mov	r12, r1
    1056:	d1 2c       	mov	r13, r1
    1058:	fa e7       	ldi	r31, 0x7A	; 122
    105a:	ef 2e       	mov	r14, r31
    105c:	f4 e4       	ldi	r31, 0x44	; 68
    105e:	ff 2e       	mov	r15, r31
    1060:	f0 2d       	mov	r31, r0
    1062:	21 2c       	mov	r2, r1
    1064:	31 2c       	mov	r3, r1
{
    int i,index=0;
    double Dist ,MiniDist=1000;
    if ( abs(Path[j+1][0]-current_cell[0])<2 && abs(Path[j+1][1]-current_cell[1])<2 && psd[0]!=80 && psd[1]!=80 && psd[2]!=80 )
            { j++; }
    for(i=(j+1);i<(m+j);i++)		// i=j+1 be cause path[j] is already passed
    1066:	eb 85       	ldd	r30, Y+11	; 0x0b
    1068:	fc 85       	ldd	r31, Y+12	; 0x0c
    106a:	32 96       	adiw	r30, 0x02	; 2
    106c:	f8 87       	std	Y+8, r31	; 0x08
    106e:	ef 83       	std	Y+7, r30	; 0x07
    {
        if (Path[i][0]==255||Path[i][1]==255) {break;} // obstacle is goal :D    && or ||
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	e2 59       	subi	r30, 0x92	; 146
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	60 81       	ld	r22, Z
    107a:	6f 3f       	cpi	r22, 0xFF	; 255
    107c:	09 f4       	brne	.+2      	; 0x1080 <WhichNext+0x200>
    107e:	50 c0       	rjmp	.+160    	; 0x1120 <__stack+0x21>
    1080:	ef 81       	ldd	r30, Y+7	; 0x07
    1082:	f8 85       	ldd	r31, Y+8	; 0x08
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	e2 59       	subi	r30, 0x92	; 146
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	11 81       	ldd	r17, Z+1	; 0x01
    108e:	1f 3f       	cpi	r17, 0xFF	; 255
    1090:	09 f4       	brne	.+2      	; 0x1094 <WhichNext+0x214>
    1092:	46 c0       	rjmp	.+140    	; 0x1120 <__stack+0x21>
		Dist = sqrt( pow( (current_cell[0]-Path[i][0]),2) + pow( (current_cell[1]-Path[i][1]),2) );
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    109e:	9b 01       	movw	r18, r22
    10a0:	ac 01       	movw	r20, r24
    10a2:	c5 01       	movw	r24, r10
    10a4:	b4 01       	movw	r22, r8
    10a6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    10aa:	4b 01       	movw	r8, r22
    10ac:	5c 01       	movw	r10, r24
    10ae:	61 2f       	mov	r22, r17
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    10ba:	9b 01       	movw	r18, r22
    10bc:	ac 01       	movw	r20, r24
    10be:	c3 01       	movw	r24, r6
    10c0:	b2 01       	movw	r22, r4
    10c2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    10c6:	69 83       	std	Y+1, r22	; 0x01
    10c8:	7a 83       	std	Y+2, r23	; 0x02
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	a5 01       	movw	r20, r10
    10d0:	94 01       	movw	r18, r8
    10d2:	c5 01       	movw	r24, r10
    10d4:	b4 01       	movw	r22, r8
    10d6:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    10da:	4b 01       	movw	r8, r22
    10dc:	5c 01       	movw	r10, r24
    10de:	29 81       	ldd	r18, Y+1	; 0x01
    10e0:	3a 81       	ldd	r19, Y+2	; 0x02
    10e2:	4b 81       	ldd	r20, Y+3	; 0x03
    10e4:	5c 81       	ldd	r21, Y+4	; 0x04
    10e6:	ca 01       	movw	r24, r20
    10e8:	b9 01       	movw	r22, r18
    10ea:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	c5 01       	movw	r24, r10
    10f4:	b4 01       	movw	r22, r8
    10f6:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    10fa:	0e 94 bf 1b 	call	0x377e	; 0x377e <sqrt>
        if (Dist<MiniDist)
    10fe:	a7 01       	movw	r20, r14
    1100:	96 01       	movw	r18, r12
    1102:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1106:	88 23       	and	r24, r24
    1108:	5c f4       	brge	.+22     	; 0x1120 <__stack+0x21>
{
    int i,index=0;
    double Dist ,MiniDist=1000;
    if ( abs(Path[j+1][0]-current_cell[0])<2 && abs(Path[j+1][1]-current_cell[1])<2 && psd[0]!=80 && psd[1]!=80 && psd[2]!=80 )
            { j++; }
    for(i=(j+1);i<(m+j);i++)		// i=j+1 be cause path[j] is already passed
    110a:	2f 80       	ldd	r2, Y+7	; 0x07
    110c:	38 84       	ldd	r3, Y+8	; 0x08
    110e:	08 c0       	rjmp	.+16     	; 0x1120 <__stack+0x21>
*/

// index of path +1 to find next
int WhichNext ( char j  , int NextPoint[3])
{
    int i,index=0;
    1110:	21 2c       	mov	r2, r1
    1112:	31 2c       	mov	r3, r1
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <__stack+0x21>
    1116:	21 2c       	mov	r2, r1
    1118:	31 2c       	mov	r3, r1
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <__stack+0x21>
    111c:	21 2c       	mov	r2, r1
    111e:	31 2c       	mov	r3, r1
        {
            MiniDist = Dist ;
            index=i;
        }
    }
    NextPoint[0] = Path[index][0];
    1120:	f1 01       	movw	r30, r2
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	e2 59       	subi	r30, 0x92	; 146
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	80 81       	ld	r24, Z
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	ad 81       	ldd	r26, Y+5	; 0x05
    1130:	be 81       	ldd	r27, Y+6	; 0x06
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	9c 93       	st	X, r25
    1136:	8e 93       	st	-X, r24
    NextPoint[1] = Path[index][1];
    1138:	81 81       	ldd	r24, Z+1	; 0x01
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	13 96       	adiw	r26, 0x03	; 3
    113e:	9c 93       	st	X, r25
    1140:	8e 93       	st	-X, r24
    1142:	12 97       	sbiw	r26, 0x02	; 2
	return (index-1);
}
    1144:	c1 01       	movw	r24, r2
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	2c 96       	adiw	r28, 0x0c	; 12
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	9f 90       	pop	r9
    1168:	8f 90       	pop	r8
    116a:	7f 90       	pop	r7
    116c:	6f 90       	pop	r6
    116e:	5f 90       	pop	r5
    1170:	4f 90       	pop	r4
    1172:	3f 90       	pop	r3
    1174:	2f 90       	pop	r2
    1176:	08 95       	ret

00001178 <GetDir>:

// determine direction of next point
void GetDir (int NextPoint[3],signed short dir[2])
{
    1178:	2f 92       	push	r2
    117a:	3f 92       	push	r3
    117c:	4f 92       	push	r4
    117e:	5f 92       	push	r5
    1180:	6f 92       	push	r6
    1182:	7f 92       	push	r7
    1184:	8f 92       	push	r8
    1186:	9f 92       	push	r9
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	00 d0       	rcall	.+0      	; 0x119e <GetDir+0x26>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <GetDir+0x28>
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	5c 01       	movw	r10, r24
    11a6:	8b 01       	movw	r16, r22
    double NPr[2];  // next point in respect to robot
    signed int Dist[3];    // distance between current pose and next point on path
    Dist[0] = NextPoint[0] - current_cell[0];
    Dist[1] = NextPoint[1] - current_cell[1];
    11a8:	fc 01       	movw	r30, r24
    11aa:	62 81       	ldd	r22, Z+2	; 0x02
    11ac:	73 81       	ldd	r23, Z+3	; 0x03
    11ae:	07 2e       	mov	r0, r23
    11b0:	00 0c       	add	r0, r0
    11b2:	88 0b       	sbc	r24, r24
    11b4:	99 0b       	sbc	r25, r25
    11b6:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    11ba:	0f 2e       	mov	r0, r31
    11bc:	f1 e5       	ldi	r31, 0x51	; 81
    11be:	8f 2e       	mov	r8, r31
    11c0:	f2 e0       	ldi	r31, 0x02	; 2
    11c2:	9f 2e       	mov	r9, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	f4 01       	movw	r30, r8
    11c8:	24 81       	ldd	r18, Z+4	; 0x04
    11ca:	35 81       	ldd	r19, Z+5	; 0x05
    11cc:	46 81       	ldd	r20, Z+6	; 0x06
    11ce:	57 81       	ldd	r21, Z+7	; 0x07
    11d0:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    11d4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
    11d8:	6b 01       	movw	r12, r22
    11da:	7c 01       	movw	r14, r24
// determine direction of next point
void GetDir (int NextPoint[3],signed short dir[2])
{
    double NPr[2];  // next point in respect to robot
    signed int Dist[3];    // distance between current pose and next point on path
    Dist[0] = NextPoint[0] - current_cell[0];
    11dc:	f5 01       	movw	r30, r10
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	07 2e       	mov	r0, r23
    11e4:	00 0c       	add	r0, r0
    11e6:	88 0b       	sbc	r24, r24
    11e8:	99 0b       	sbc	r25, r25
    11ea:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    11ee:	f4 01       	movw	r30, r8
    11f0:	20 81       	ld	r18, Z
    11f2:	31 81       	ldd	r19, Z+1	; 0x01
    11f4:	42 81       	ldd	r20, Z+2	; 0x02
    11f6:	53 81       	ldd	r21, Z+3	; 0x03
    11f8:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    11fc:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
    Dist[1] = NextPoint[1] - current_cell[1];
    {//added by ahmed
        if (Dist[0]>0.05) Dist[0]=1;
    1200:	07 2e       	mov	r0, r23
    1202:	00 0c       	add	r0, r0
    1204:	88 0b       	sbc	r24, r24
    1206:	99 0b       	sbc	r25, r25
    1208:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    120c:	4b 01       	movw	r8, r22
    120e:	5c 01       	movw	r10, r24
    1210:	2d ec       	ldi	r18, 0xCD	; 205
    1212:	3c ec       	ldi	r19, 0xCC	; 204
    1214:	4c e4       	ldi	r20, 0x4C	; 76
    1216:	5d e3       	ldi	r21, 0x3D	; 61
    1218:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    121c:	18 16       	cp	r1, r24
    121e:	9c f0       	brlt	.+38     	; 0x1246 <GetDir+0xce>
        else if (Dist[0]<-0.05) Dist[0]=-1;
    1220:	22 24       	eor	r2, r2
    1222:	23 94       	inc	r2
    1224:	31 2c       	mov	r3, r1
    1226:	2d ec       	ldi	r18, 0xCD	; 205
    1228:	3c ec       	ldi	r19, 0xCC	; 204
    122a:	4c e4       	ldi	r20, 0x4C	; 76
    122c:	5d eb       	ldi	r21, 0xBD	; 189
    122e:	c5 01       	movw	r24, r10
    1230:	b4 01       	movw	r22, r8
    1232:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1236:	88 23       	and	r24, r24
    1238:	14 f0       	brlt	.+4      	; 0x123e <GetDir+0xc6>
    123a:	21 2c       	mov	r2, r1
    123c:	31 2c       	mov	r3, r1
    123e:	31 94       	neg	r3
    1240:	21 94       	neg	r2
    1242:	31 08       	sbc	r3, r1
    1244:	03 c0       	rjmp	.+6      	; 0x124c <GetDir+0xd4>
    double NPr[2];  // next point in respect to robot
    signed int Dist[3];    // distance between current pose and next point on path
    Dist[0] = NextPoint[0] - current_cell[0];
    Dist[1] = NextPoint[1] - current_cell[1];
    {//added by ahmed
        if (Dist[0]>0.05) Dist[0]=1;
    1246:	22 24       	eor	r2, r2
    1248:	23 94       	inc	r2
    124a:	31 2c       	mov	r3, r1
        else if (Dist[0]<-0.05) Dist[0]=-1;
        else Dist[0]=0;
        if (Dist[1]>0.05) Dist[1]=1;
    124c:	b6 01       	movw	r22, r12
    124e:	dd 0c       	add	r13, r13
    1250:	88 0b       	sbc	r24, r24
    1252:	99 0b       	sbc	r25, r25
    1254:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    1258:	6b 01       	movw	r12, r22
    125a:	7c 01       	movw	r14, r24
    125c:	2d ec       	ldi	r18, 0xCD	; 205
    125e:	3c ec       	ldi	r19, 0xCC	; 204
    1260:	4c e4       	ldi	r20, 0x4C	; 76
    1262:	5d e3       	ldi	r21, 0x3D	; 61
    1264:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1268:	18 16       	cp	r1, r24
    126a:	9c f0       	brlt	.+38     	; 0x1292 <GetDir+0x11a>
        else if (Dist[1]<-0.05) Dist[1]=-1;
    126c:	66 24       	eor	r6, r6
    126e:	63 94       	inc	r6
    1270:	71 2c       	mov	r7, r1
    1272:	2d ec       	ldi	r18, 0xCD	; 205
    1274:	3c ec       	ldi	r19, 0xCC	; 204
    1276:	4c e4       	ldi	r20, 0x4C	; 76
    1278:	5d eb       	ldi	r21, 0xBD	; 189
    127a:	c7 01       	movw	r24, r14
    127c:	b6 01       	movw	r22, r12
    127e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1282:	88 23       	and	r24, r24
    1284:	14 f0       	brlt	.+4      	; 0x128a <GetDir+0x112>
    1286:	61 2c       	mov	r6, r1
    1288:	71 2c       	mov	r7, r1
    128a:	71 94       	neg	r7
    128c:	61 94       	neg	r6
    128e:	71 08       	sbc	r7, r1
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <GetDir+0x120>
    Dist[1] = NextPoint[1] - current_cell[1];
    {//added by ahmed
        if (Dist[0]>0.05) Dist[0]=1;
        else if (Dist[0]<-0.05) Dist[0]=-1;
        else Dist[0]=0;
        if (Dist[1]>0.05) Dist[1]=1;
    1292:	66 24       	eor	r6, r6
    1294:	63 94       	inc	r6
    1296:	71 2c       	mov	r7, r1
        else if (Dist[1]<-0.05) Dist[1]=-1;
        else Dist[1]=0;
    }
    NPr[0] =  Dist[0]*cos(current_cell[2]) + Dist[1]*sin(current_cell[2]);
    1298:	80 90 59 02 	lds	r8, 0x0259	; 0x800259 <current_cell+0x8>
    129c:	90 90 5a 02 	lds	r9, 0x025A	; 0x80025a <current_cell+0x9>
    12a0:	a0 90 5b 02 	lds	r10, 0x025B	; 0x80025b <current_cell+0xa>
    12a4:	b0 90 5c 02 	lds	r11, 0x025C	; 0x80025c <current_cell+0xb>
    12a8:	c5 01       	movw	r24, r10
    12aa:	b4 01       	movw	r22, r8
    12ac:	0e 94 67 19 	call	0x32ce	; 0x32ce <cos>
    12b0:	6b 01       	movw	r12, r22
    12b2:	7c 01       	movw	r14, r24
    12b4:	b3 01       	movw	r22, r6
    12b6:	77 0c       	add	r7, r7
    12b8:	88 0b       	sbc	r24, r24
    12ba:	99 0b       	sbc	r25, r25
    12bc:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    12c0:	69 83       	std	Y+1, r22	; 0x01
    12c2:	7a 83       	std	Y+2, r23	; 0x02
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	c5 01       	movw	r24, r10
    12ca:	b4 01       	movw	r22, r8
    12cc:	0e 94 b5 1b 	call	0x376a	; 0x376a <sin>
    12d0:	4b 01       	movw	r8, r22
    12d2:	5c 01       	movw	r10, r24
    12d4:	b1 01       	movw	r22, r2
    12d6:	03 2c       	mov	r0, r3
    12d8:	00 0c       	add	r0, r0
    12da:	88 0b       	sbc	r24, r24
    12dc:	99 0b       	sbc	r25, r25
    12de:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    12e2:	a7 01       	movw	r20, r14
    12e4:	96 01       	movw	r18, r12
    12e6:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    12ea:	2b 01       	movw	r4, r22
    12ec:	3c 01       	movw	r6, r24
    12ee:	a5 01       	movw	r20, r10
    12f0:	94 01       	movw	r18, r8
    12f2:	69 81       	ldd	r22, Y+1	; 0x01
    12f4:	7a 81       	ldd	r23, Y+2	; 0x02
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
    1302:	c3 01       	movw	r24, r6
    1304:	b2 01       	movw	r22, r4
    1306:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    130a:	2b 01       	movw	r4, r22
    130c:	3c 01       	movw	r6, r24
    NPr[1] = -1*Dist[0]*sin(current_cell[2]) + Dist[1]*cos(current_cell[2]);
    130e:	66 27       	eor	r22, r22
    1310:	77 27       	eor	r23, r23
    1312:	62 19       	sub	r22, r2
    1314:	73 09       	sbc	r23, r3
    1316:	07 2e       	mov	r0, r23
    1318:	00 0c       	add	r0, r0
    131a:	88 0b       	sbc	r24, r24
    131c:	99 0b       	sbc	r25, r25
    131e:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    1322:	9b 01       	movw	r18, r22
    1324:	ac 01       	movw	r20, r24
    1326:	c5 01       	movw	r24, r10
    1328:	b4 01       	movw	r22, r8
    132a:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    132e:	4b 01       	movw	r8, r22
    1330:	5c 01       	movw	r10, r24
    1332:	29 81       	ldd	r18, Y+1	; 0x01
    1334:	3a 81       	ldd	r19, Y+2	; 0x02
    1336:	4b 81       	ldd	r20, Y+3	; 0x03
    1338:	5c 81       	ldd	r21, Y+4	; 0x04
    133a:	c7 01       	movw	r24, r14
    133c:	b6 01       	movw	r22, r12
    133e:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1342:	9b 01       	movw	r18, r22
    1344:	ac 01       	movw	r20, r24
    1346:	c5 01       	movw	r24, r10
    1348:	b4 01       	movw	r22, r8
    134a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    134e:	6b 01       	movw	r12, r22
    1350:	7c 01       	movw	r14, r24
    if (NPr[0]>0.05) //edited from 0 to 0.4
    1352:	2d ec       	ldi	r18, 0xCD	; 205
    1354:	3c ec       	ldi	r19, 0xCC	; 204
    1356:	4c e4       	ldi	r20, 0x4C	; 76
    1358:	5d e3       	ldi	r21, 0x3D	; 61
    135a:	c3 01       	movw	r24, r6
    135c:	b2 01       	movw	r22, r4
    135e:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1362:	18 16       	cp	r1, r24
    1364:	34 f4       	brge	.+12     	; 0x1372 <GetDir+0x1fa>
        dir[0] = 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	f8 01       	movw	r30, r16
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
    1370:	13 c0       	rjmp	.+38     	; 0x1398 <GetDir+0x220>
    else if (NPr[0]<-0.05)
    1372:	2d ec       	ldi	r18, 0xCD	; 205
    1374:	3c ec       	ldi	r19, 0xCC	; 204
    1376:	4c e4       	ldi	r20, 0x4C	; 76
    1378:	5d eb       	ldi	r21, 0xBD	; 189
    137a:	c3 01       	movw	r24, r6
    137c:	b2 01       	movw	r22, r4
    137e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1382:	88 23       	and	r24, r24
    1384:	34 f4       	brge	.+12     	; 0x1392 <GetDir+0x21a>
        dir[0] = -1;
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    138a:	f8 01       	movw	r30, r16
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <GetDir+0x220>
    else
        dir[0] = 0;
    1392:	f8 01       	movw	r30, r16
    1394:	11 82       	std	Z+1, r1	; 0x01
    1396:	10 82       	st	Z, r1
    if (NPr[1]>0.05)
    1398:	2d ec       	ldi	r18, 0xCD	; 205
    139a:	3c ec       	ldi	r19, 0xCC	; 204
    139c:	4c e4       	ldi	r20, 0x4C	; 76
    139e:	5d e3       	ldi	r21, 0x3D	; 61
    13a0:	c7 01       	movw	r24, r14
    13a2:	b6 01       	movw	r22, r12
    13a4:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	34 f4       	brge	.+12     	; 0x13b8 <GetDir+0x240>
        dir[1] = 1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	f8 01       	movw	r30, r16
    13b2:	93 83       	std	Z+3, r25	; 0x03
    13b4:	82 83       	std	Z+2, r24	; 0x02
    13b6:	13 c0       	rjmp	.+38     	; 0x13de <GetDir+0x266>
    else if (NPr[1]<-0.05)
    13b8:	2d ec       	ldi	r18, 0xCD	; 205
    13ba:	3c ec       	ldi	r19, 0xCC	; 204
    13bc:	4c e4       	ldi	r20, 0x4C	; 76
    13be:	5d eb       	ldi	r21, 0xBD	; 189
    13c0:	c7 01       	movw	r24, r14
    13c2:	b6 01       	movw	r22, r12
    13c4:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	34 f4       	brge	.+12     	; 0x13d8 <GetDir+0x260>
        dir[1] = -1;
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	f8 01       	movw	r30, r16
    13d2:	93 83       	std	Z+3, r25	; 0x03
    13d4:	82 83       	std	Z+2, r24	; 0x02
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <GetDir+0x266>
    else
        dir[1] = 0;
    13d8:	f8 01       	movw	r30, r16
    13da:	13 82       	std	Z+3, r1	; 0x03
    13dc:	12 82       	std	Z+2, r1	; 0x02
}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	cf 90       	pop	r12
    13f6:	bf 90       	pop	r11
    13f8:	af 90       	pop	r10
    13fa:	9f 90       	pop	r9
    13fc:	8f 90       	pop	r8
    13fe:	7f 90       	pop	r7
    1400:	6f 90       	pop	r6
    1402:	5f 90       	pop	r5
    1404:	4f 90       	pop	r4
    1406:	3f 90       	pop	r3
    1408:	2f 90       	pop	r2
    140a:	08 95       	ret

0000140c <GetTheta>:

//  determine direction should be in new point
int GetTheta (short dir[2])
{
    140c:	fc 01       	movw	r30, r24
	int Theta=0 ;
	if (dir[0] == 1 && dir[1] == 0)
    140e:	20 81       	ld	r18, Z
    1410:	31 81       	ldd	r19, Z+1	; 0x01
    1412:	21 30       	cpi	r18, 0x01	; 1
    1414:	31 05       	cpc	r19, r1
    1416:	39 f4       	brne	.+14     	; 0x1426 <GetTheta+0x1a>
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	41 f1       	breq	.+80     	; 0x1470 <GetTheta+0x64>
	{
		Theta = 0 ;
	}
	else if (dir[0] == 1 && dir[1] == 1)
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f9 f4       	brne	.+62     	; 0x1462 <GetTheta+0x56>
    1424:	28 c0       	rjmp	.+80     	; 0x1476 <GetTheta+0x6a>
	{
		Theta = 1 ;	// pi/4 ;
	}
	else if (dir[0] == 0 && dir[1] == 1)
    1426:	21 15       	cp	r18, r1
    1428:	31 05       	cpc	r19, r1
    142a:	29 f4       	brne	.+10     	; 0x1436 <GetTheta+0x2a>
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	81 f4       	brne	.+32     	; 0x1454 <GetTheta+0x48>
    1434:	23 c0       	rjmp	.+70     	; 0x147c <GetTheta+0x70>
	{
		Theta = 2 ;	// pi/2 ;
	}
	else if (dir[0] == -1 && dir[1] == 1)
    1436:	2f 3f       	cpi	r18, 0xFF	; 255
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	19 f5       	brne	.+70     	; 0x1482 <GetTheta+0x76>
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	09 f1       	breq	.+66     	; 0x1488 <GetTheta+0x7c>
	{
		Theta = 3 ;	// 3*pi/4 ;
	}
	else if (dir[0] == -1 && dir[1] == 0)
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	11 f1       	breq	.+68     	; 0x148e <GetTheta+0x82>
	{
		Theta = 4 ;	// pi ;
	}
	else if (dir[0] == -1 && dir[1] == -1)
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	19 f1       	breq	.+70     	; 0x1494 <GetTheta+0x88>
}

//  determine direction should be in new point
int GetTheta (short dir[2])
{
	int Theta=0 ;
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	08 95       	ret
	}
	else if (dir[0] == -1 && dir[1] == -1)
	{
		Theta = 5 ;	// 5*pi/4 ;
	}
	else if (dir[0] == 0 && dir[1] == -1)
    1454:	82 81       	ldd	r24, Z+2	; 0x02
    1456:	93 81       	ldd	r25, Z+3	; 0x03
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	f9 f0       	breq	.+62     	; 0x149a <GetTheta+0x8e>
}

//  determine direction should be in new point
int GetTheta (short dir[2])
{
	int Theta=0 ;
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	08 95       	ret
	}
	else if (dir[0] == 0 && dir[1] == -1)
	{
		Theta = 6 ;	// 3*pi/2 ;
	}
	else if (dir[0] == 1 && dir[1] == -1)
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	d9 f4       	brne	.+54     	; 0x14a0 <GetTheta+0x94>
	{
		Theta = 7 ; //	7*pi/4 ;
    146a:	87 e0       	ldi	r24, 0x07	; 7
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	08 95       	ret
int GetTheta (short dir[2])
{
	int Theta=0 ;
	if (dir[0] == 1 && dir[1] == 0)
	{
		Theta = 0 ;
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	08 95       	ret
	}
	else if (dir[0] == 1 && dir[1] == 1)
	{
		Theta = 1 ;	// pi/4 ;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	08 95       	ret
	}
	else if (dir[0] == 0 && dir[1] == 1)
	{
		Theta = 2 ;	// pi/2 ;
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	08 95       	ret
}

//  determine direction should be in new point
int GetTheta (short dir[2])
{
	int Theta=0 ;
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	08 95       	ret
	{
		Theta = 2 ;	// pi/2 ;
	}
	else if (dir[0] == -1 && dir[1] == 1)
	{
		Theta = 3 ;	// 3*pi/4 ;
    1488:	83 e0       	ldi	r24, 0x03	; 3
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	08 95       	ret
	}
	else if (dir[0] == -1 && dir[1] == 0)
	{
		Theta = 4 ;	// pi ;
    148e:	84 e0       	ldi	r24, 0x04	; 4
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	08 95       	ret
	}
	else if (dir[0] == -1 && dir[1] == -1)
	{
		Theta = 5 ;	// 5*pi/4 ;
    1494:	85 e0       	ldi	r24, 0x05	; 5
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	08 95       	ret
	}
	else if (dir[0] == 0 && dir[1] == -1)
	{
		Theta = 6 ;	// 3*pi/2 ;
    149a:	86 e0       	ldi	r24, 0x06	; 6
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	08 95       	ret
}

//  determine direction should be in new point
int GetTheta (short dir[2])
{
	int Theta=0 ;
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
	else if (dir[0] == 1 && dir[1] == -1)
	{
		Theta = 7 ; //	7*pi/4 ;
	}
	return Theta ;
}
    14a4:	08 95       	ret

000014a6 <ConvToUnit>:

// fn converts from robot frame to world frame  (converts directions)
void ConvToUnit ( double NotOnes[2], signed short Oness[2])
{
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	ec 01       	movw	r28, r24
    14b8:	8b 01       	movw	r16, r22
	if (NotOnes[0]>0.05)
    14ba:	c8 80       	ld	r12, Y
    14bc:	d9 80       	ldd	r13, Y+1	; 0x01
    14be:	ea 80       	ldd	r14, Y+2	; 0x02
    14c0:	fb 80       	ldd	r15, Y+3	; 0x03
    14c2:	2d ec       	ldi	r18, 0xCD	; 205
    14c4:	3c ec       	ldi	r19, 0xCC	; 204
    14c6:	4c e4       	ldi	r20, 0x4C	; 76
    14c8:	5d e3       	ldi	r21, 0x3D	; 61
    14ca:	c7 01       	movw	r24, r14
    14cc:	b6 01       	movw	r22, r12
    14ce:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	34 f4       	brge	.+12     	; 0x14e2 <ConvToUnit+0x3c>
        Oness[0] = 1;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	f8 01       	movw	r30, r16
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
    14e0:	13 c0       	rjmp	.+38     	; 0x1508 <ConvToUnit+0x62>
    else if (NotOnes[0]<-0.05)
    14e2:	2d ec       	ldi	r18, 0xCD	; 205
    14e4:	3c ec       	ldi	r19, 0xCC	; 204
    14e6:	4c e4       	ldi	r20, 0x4C	; 76
    14e8:	5d eb       	ldi	r21, 0xBD	; 189
    14ea:	c7 01       	movw	r24, r14
    14ec:	b6 01       	movw	r22, r12
    14ee:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    14f2:	88 23       	and	r24, r24
    14f4:	34 f4       	brge	.+12     	; 0x1502 <ConvToUnit+0x5c>
        Oness[0] = -1;
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	9f ef       	ldi	r25, 0xFF	; 255
    14fa:	f8 01       	movw	r30, r16
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <ConvToUnit+0x62>
    else
        Oness[0] = 0;
    1502:	f8 01       	movw	r30, r16
    1504:	11 82       	std	Z+1, r1	; 0x01
    1506:	10 82       	st	Z, r1
    if (NotOnes[1]>0.05)
    1508:	cc 80       	ldd	r12, Y+4	; 0x04
    150a:	dd 80       	ldd	r13, Y+5	; 0x05
    150c:	ee 80       	ldd	r14, Y+6	; 0x06
    150e:	ff 80       	ldd	r15, Y+7	; 0x07
    1510:	2d ec       	ldi	r18, 0xCD	; 205
    1512:	3c ec       	ldi	r19, 0xCC	; 204
    1514:	4c e4       	ldi	r20, 0x4C	; 76
    1516:	5d e3       	ldi	r21, 0x3D	; 61
    1518:	c7 01       	movw	r24, r14
    151a:	b6 01       	movw	r22, r12
    151c:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1520:	18 16       	cp	r1, r24
    1522:	34 f4       	brge	.+12     	; 0x1530 <ConvToUnit+0x8a>
        Oness[1] = 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	f8 01       	movw	r30, r16
    152a:	93 83       	std	Z+3, r25	; 0x03
    152c:	82 83       	std	Z+2, r24	; 0x02
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <ConvToUnit+0xb0>
    else if (NotOnes[1]<-0.05)
    1530:	2d ec       	ldi	r18, 0xCD	; 205
    1532:	3c ec       	ldi	r19, 0xCC	; 204
    1534:	4c e4       	ldi	r20, 0x4C	; 76
    1536:	5d eb       	ldi	r21, 0xBD	; 189
    1538:	c7 01       	movw	r24, r14
    153a:	b6 01       	movw	r22, r12
    153c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1540:	88 23       	and	r24, r24
    1542:	34 f4       	brge	.+12     	; 0x1550 <ConvToUnit+0xaa>
        Oness[1] = -1;
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	9f ef       	ldi	r25, 0xFF	; 255
    1548:	f8 01       	movw	r30, r16
    154a:	93 83       	std	Z+3, r25	; 0x03
    154c:	82 83       	std	Z+2, r24	; 0x02
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <ConvToUnit+0xb0>
    else
        Oness[1] = 0;
    1550:	f8 01       	movw	r30, r16
    1552:	13 82       	std	Z+3, r1	; 0x03
    1554:	12 82       	std	Z+2, r1	; 0x02
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	08 95       	ret

00001568 <OA>:

void OA ( int NewPoint[3])
{
    1568:	2f 92       	push	r2
    156a:	3f 92       	push	r3
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	ac 97       	sbiw	r28, 0x2c	; 44
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	9c a7       	std	Y+44, r25	; 0x2c
    159e:	8b a7       	std	Y+43, r24	; 0x2b
	signed int denum[2] ;
	// DirToR : direction in respect to robot & DirToW : to world
    // num : numerator of DirToR (sum of all directions )
    int NextPoint[3];

    j = WhichNext( j , NextPoint);
    15a0:	be 01       	movw	r22, r28
    15a2:	63 5e       	subi	r22, 0xE3	; 227
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <j>
    15aa:	6a dc       	rcall	.-1836   	; 0xe80 <WhichNext>
    15ac:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <j>
    //printf("NextPoint %d %d \t\n",NextPoint[0],NextPoint[1]);

    GetDir( NextPoint, NP_dir);//this function return NP_dir with respect to (((robot)))
    15b0:	be 01       	movw	r22, r28
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	ce 01       	movw	r24, r28
    15b8:	4d 96       	adiw	r24, 0x1d	; 29
    15ba:	de dd       	rcall	.-1092   	; 0x1178 <GetDir>
        sensor 0 in middle directs to ( 0,-1)
        sensor 2 on right  directs to (-1, 0)     */

    do
    {
        num[0] = (0.5*NP_dir[0] + (1-(psd[1]/80.0))-(1-(psd[2]/80.0)));
    15bc:	0f 2e       	mov	r0, r31
    15be:	ff e3       	ldi	r31, 0x3F	; 63
    15c0:	ef 2e       	mov	r14, r31
    15c2:	f2 e0       	ldi	r31, 0x02	; 2
    15c4:	ff 2e       	mov	r15, r31
    15c6:	f0 2d       	mov	r31, r0
    15c8:	d7 01       	movw	r26, r14
    15ca:	12 96       	adiw	r26, 0x02	; 2
    15cc:	0d 91       	ld	r16, X+
    15ce:	1c 91       	ld	r17, X
    15d0:	13 97       	sbiw	r26, 0x03	; 3
    15d2:	14 96       	adiw	r26, 0x04	; 4
    15d4:	cd 90       	ld	r12, X+
    15d6:	dc 90       	ld	r13, X
    15d8:	15 97       	sbiw	r26, 0x05	; 5
        num[1] = (0.5*NP_dir[1] - (1-(psd[0]/80.0) ) );
    15da:	2d 90       	ld	r2, X+
    15dc:	3c 90       	ld	r3, X
    15de:	11 97       	sbiw	r26, 0x01	; 1
        denum[0] = ( 1+ ceil(1-(psd[1]/80.0))+ceil(1-(psd[2]/80.0)) );
    15e0:	12 96       	adiw	r26, 0x02	; 2
    15e2:	6d 91       	ld	r22, X+
    15e4:	7c 91       	ld	r23, X
    15e6:	13 97       	sbiw	r26, 0x03	; 3
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 ea       	ldi	r20, 0xA0	; 160
    15f6:	52 e4       	ldi	r21, 0x42	; 66
    15f8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	80 e8       	ldi	r24, 0x80	; 128
    1606:	9f e3       	ldi	r25, 0x3F	; 63
    1608:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    160c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ceil>
    1610:	6b a3       	std	Y+35, r22	; 0x23
    1612:	7c a3       	std	Y+36, r23	; 0x24
    1614:	8d a3       	std	Y+37, r24	; 0x25
    1616:	9e a3       	std	Y+38, r25	; 0x26
    1618:	f7 01       	movw	r30, r14
    161a:	64 81       	ldd	r22, Z+4	; 0x04
    161c:	75 81       	ldd	r23, Z+5	; 0x05
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 ea       	ldi	r20, 0xA0	; 160
    162c:	52 e4       	ldi	r21, 0x42	; 66
    162e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
    1632:	9b 01       	movw	r18, r22
    1634:	ac 01       	movw	r20, r24
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	80 e8       	ldi	r24, 0x80	; 128
    163c:	9f e3       	ldi	r25, 0x3F	; 63
    163e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    1642:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ceil>
    1646:	6f a3       	std	Y+39, r22	; 0x27
    1648:	78 a7       	std	Y+40, r23	; 0x28
    164a:	89 a7       	std	Y+41, r24	; 0x29
    164c:	9a a7       	std	Y+42, r25	; 0x2a
        denum[1] = ( 1+ceil(1-(psd[0]/80.0)) );
    164e:	d7 01       	movw	r26, r14
    1650:	6d 91       	ld	r22, X+
    1652:	7c 91       	ld	r23, X
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 ea       	ldi	r20, 0xA0	; 160
    1662:	52 e4       	ldi	r21, 0x42	; 66
    1664:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	80 e8       	ldi	r24, 0x80	; 128
    1672:	9f e3       	ldi	r25, 0x3F	; 63
    1674:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    1678:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ceil>
    167c:	4b 01       	movw	r8, r22
    167e:	5c 01       	movw	r10, r24
        sensor 0 in middle directs to ( 0,-1)
        sensor 2 on right  directs to (-1, 0)     */

    do
    {
        num[0] = (0.5*NP_dir[0] + (1-(psd[1]/80.0))-(1-(psd[2]/80.0)));
    1680:	69 81       	ldd	r22, Y+1	; 0x01
    1682:	7a 81       	ldd	r23, Y+2	; 0x02
    1684:	07 2e       	mov	r0, r23
    1686:	00 0c       	add	r0, r0
    1688:	88 0b       	sbc	r24, r24
    168a:	99 0b       	sbc	r25, r25
    168c:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    169c:	2b 01       	movw	r4, r22
    169e:	3c 01       	movw	r6, r24
    16a0:	b8 01       	movw	r22, r16
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 ea       	ldi	r20, 0xA0	; 160
    16b0:	52 e4       	ldi	r21, 0x42	; 66
    16b2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
    16b6:	9b 01       	movw	r18, r22
    16b8:	ac 01       	movw	r20, r24
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	80 e8       	ldi	r24, 0x80	; 128
    16c0:	9f e3       	ldi	r25, 0x3F	; 63
    16c2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	c3 01       	movw	r24, r6
    16cc:	b2 01       	movw	r22, r4
    16ce:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    16d2:	2b 01       	movw	r4, r22
    16d4:	3c 01       	movw	r6, r24
    16d6:	b6 01       	movw	r22, r12
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 ea       	ldi	r20, 0xA0	; 160
    16e6:	52 e4       	ldi	r21, 0x42	; 66
    16e8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
    16ec:	9b 01       	movw	r18, r22
    16ee:	ac 01       	movw	r20, r24
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	80 e8       	ldi	r24, 0x80	; 128
    16f6:	9f e3       	ldi	r25, 0x3F	; 63
    16f8:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    16fc:	9b 01       	movw	r18, r22
    16fe:	ac 01       	movw	r20, r24
    1700:	c3 01       	movw	r24, r6
    1702:	b2 01       	movw	r22, r4
    1704:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    1708:	2b 01       	movw	r4, r22
    170a:	3c 01       	movw	r6, r24
        num[1] = (0.5*NP_dir[1] - (1-(psd[0]/80.0) ) );
        denum[0] = ( 1+ ceil(1-(psd[1]/80.0))+ceil(1-(psd[2]/80.0)) );
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	6b a1       	ldd	r22, Y+35	; 0x23
    1716:	7c a1       	ldd	r23, Y+36	; 0x24
    1718:	8d a1       	ldd	r24, Y+37	; 0x25
    171a:	9e a1       	ldd	r25, Y+38	; 0x26
    171c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    1720:	2f a1       	ldd	r18, Y+39	; 0x27
    1722:	38 a5       	ldd	r19, Y+40	; 0x28
    1724:	49 a5       	ldd	r20, Y+41	; 0x29
    1726:	5a a5       	ldd	r21, Y+42	; 0x2a
    1728:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    172c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
        denum[1] = ( 1+ceil(1-(psd[0]/80.0)) );

        //printf("DirToRx %f / %d \n",num[0],denum[0]);
        //printf("DirToRy %f / %d \n",num[1],denum[1]);

        DirToR[0] = num[0] / denum[0] ;
    1730:	07 2e       	mov	r0, r23
    1732:	00 0c       	add	r0, r0
    1734:	88 0b       	sbc	r24, r24
    1736:	99 0b       	sbc	r25, r25
    1738:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	c3 01       	movw	r24, r6
    1742:	b2 01       	movw	r22, r4
    1744:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
    1748:	2b 01       	movw	r4, r22
    174a:	3c 01       	movw	r6, r24
        sensor 2 on right  directs to (-1, 0)     */

    do
    {
        num[0] = (0.5*NP_dir[0] + (1-(psd[1]/80.0))-(1-(psd[2]/80.0)));
        num[1] = (0.5*NP_dir[1] - (1-(psd[0]/80.0) ) );
    174c:	6b 81       	ldd	r22, Y+3	; 0x03
    174e:	7c 81       	ldd	r23, Y+4	; 0x04
    1750:	07 2e       	mov	r0, r23
    1752:	00 0c       	add	r0, r0
    1754:	88 0b       	sbc	r24, r24
    1756:	99 0b       	sbc	r25, r25
    1758:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1768:	6b a3       	std	Y+35, r22	; 0x23
    176a:	7c a3       	std	Y+36, r23	; 0x24
    176c:	8d a3       	std	Y+37, r24	; 0x25
    176e:	9e a3       	std	Y+38, r25	; 0x26
    1770:	b1 01       	movw	r22, r2
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 ea       	ldi	r20, 0xA0	; 160
    1780:	52 e4       	ldi	r21, 0x42	; 66
    1782:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e8       	ldi	r24, 0x80	; 128
    1790:	9f e3       	ldi	r25, 0x3F	; 63
    1792:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    1796:	9b 01       	movw	r18, r22
    1798:	ac 01       	movw	r20, r24
    179a:	6b a1       	ldd	r22, Y+35	; 0x23
    179c:	7c a1       	ldd	r23, Y+36	; 0x24
    179e:	8d a1       	ldd	r24, Y+37	; 0x25
    17a0:	9e a1       	ldd	r25, Y+38	; 0x26
    17a2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    17a6:	6b a3       	std	Y+35, r22	; 0x23
    17a8:	7c a3       	std	Y+36, r23	; 0x24
    17aa:	8d a3       	std	Y+37, r24	; 0x25
    17ac:	9e a3       	std	Y+38, r25	; 0x26
        denum[0] = ( 1+ ceil(1-(psd[1]/80.0))+ceil(1-(psd[2]/80.0)) );
        denum[1] = ( 1+ceil(1-(psd[0]/80.0)) );
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	c5 01       	movw	r24, r10
    17b8:	b4 01       	movw	r22, r8
    17ba:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    17be:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>

        //printf("DirToRx %f / %d \n",num[0],denum[0]);
        //printf("DirToRy %f / %d \n",num[1],denum[1]);

        DirToR[0] = num[0] / denum[0] ;
        DirToR[1] = num[1] / denum[1] ;
    17c2:	07 2e       	mov	r0, r23
    17c4:	00 0c       	add	r0, r0
    17c6:	88 0b       	sbc	r24, r24
    17c8:	99 0b       	sbc	r25, r25
    17ca:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    17ce:	9b 01       	movw	r18, r22
    17d0:	ac 01       	movw	r20, r24
    17d2:	6b a1       	ldd	r22, Y+35	; 0x23
    17d4:	7c a1       	ldd	r23, Y+36	; 0x24
    17d6:	8d a1       	ldd	r24, Y+37	; 0x25
    17d8:	9e a1       	ldd	r25, Y+38	; 0x26
    17da:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__divsf3>
    17de:	4b 01       	movw	r8, r22
    17e0:	5c 01       	movw	r10, r24
        //printf("DirToR %f  %f \n",DirToR[0],DirToR[1]);
        {
            if (DirToR[0]>0.05) DirToR[0]=1;
    17e2:	2d ec       	ldi	r18, 0xCD	; 205
    17e4:	3c ec       	ldi	r19, 0xCC	; 204
    17e6:	4c e4       	ldi	r20, 0x4C	; 76
    17e8:	5d e3       	ldi	r21, 0x3D	; 61
    17ea:	c3 01       	movw	r24, r6
    17ec:	b2 01       	movw	r22, r4
    17ee:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    17f2:	18 16       	cp	r1, r24
    17f4:	64 f0       	brlt	.+24     	; 0x180e <OA+0x2a6>
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
    17f6:	2d ec       	ldi	r18, 0xCD	; 205
    17f8:	3c ec       	ldi	r19, 0xCC	; 204
    17fa:	4c e4       	ldi	r20, 0x4C	; 76
    17fc:	5d eb       	ldi	r21, 0xBD	; 189
    17fe:	c3 01       	movw	r24, r6
    1800:	b2 01       	movw	r22, r4
    1802:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1806:	88 23       	and	r24, r24
    1808:	0c f4       	brge	.+2      	; 0x180c <OA+0x2a4>
    180a:	63 c1       	rjmp	.+710    	; 0x1ad2 <OA+0x56a>
    180c:	72 c1       	rjmp	.+740    	; 0x1af2 <OA+0x58a>
            else DirToR[0]=0;
            if (DirToR[1]>0.05) DirToR[1]=1;
    180e:	2d ec       	ldi	r18, 0xCD	; 205
    1810:	3c ec       	ldi	r19, 0xCC	; 204
    1812:	4c e4       	ldi	r20, 0x4C	; 76
    1814:	5d e3       	ldi	r21, 0x3D	; 61
    1816:	c5 01       	movw	r24, r10
    1818:	b4 01       	movw	r22, r8
    181a:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    181e:	18 16       	cp	r1, r24
    1820:	c4 f1       	brlt	.+112    	; 0x1892 <OA+0x32a>

        DirToR[0] = num[0] / denum[0] ;
        DirToR[1] = num[1] / denum[1] ;
        //printf("DirToR %f  %f \n",DirToR[0],DirToR[1]);
        {
            if (DirToR[0]>0.05) DirToR[0]=1;
    1822:	21 2c       	mov	r2, r1
    1824:	31 2c       	mov	r3, r1
    1826:	00 e8       	ldi	r16, 0x80	; 128
    1828:	1f e3       	ldi	r17, 0x3F	; 63
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
            else DirToR[0]=0;
            if (DirToR[1]>0.05) DirToR[1]=1;
            else if (DirToR[1]<-0.05) DirToR[1]=-1;
    182a:	2d ec       	ldi	r18, 0xCD	; 205
    182c:	3c ec       	ldi	r19, 0xCC	; 204
    182e:	4c e4       	ldi	r20, 0x4C	; 76
    1830:	5d eb       	ldi	r21, 0xBD	; 189
    1832:	c5 01       	movw	r24, r10
    1834:	b4 01       	movw	r22, r8
    1836:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    183a:	88 23       	and	r24, r24
    183c:	0c f4       	brge	.+2      	; 0x1840 <OA+0x2d8>
    183e:	70 c1       	rjmp	.+736    	; 0x1b20 <OA+0x5b8>
    1840:	63 c1       	rjmp	.+710    	; 0x1b08 <OA+0x5a0>
            else DirToR[1]=0;
        }
        if( DirToR[0]==0 && DirToR[1]<0 ) 		// to prevent back directions
        {
            j++;
    1842:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <j>
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <j>
            j = WhichNext( j , NextPoint);
    184c:	be 01       	movw	r22, r28
    184e:	63 5e       	subi	r22, 0xE3	; 227
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	16 db       	rcall	.-2516   	; 0xe80 <WhichNext>
    1854:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <j>
            //printf("NextPoint %d %d \t\n",NextPoint[0],NextPoint[1]);

            GetDir( NextPoint, NP_dir);//this function return NP_dir with respect to (((robot)))
    1858:	be 01       	movw	r22, r28
    185a:	6f 5f       	subi	r22, 0xFF	; 255
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	ce 01       	movw	r24, r28
    1860:	4d 96       	adiw	r24, 0x1d	; 29
    1862:	8a dc       	rcall	.-1772   	; 0x1178 <GetDir>
            //printf("NP_dir %d  %d \n",NP_dir[0],NP_dir[1]);
            j--;
    1864:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <j>
    1868:	81 50       	subi	r24, 0x01	; 1
    186a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <j>
    186e:	ac ce       	rjmp	.-680    	; 0x15c8 <OA+0x60>
            if (DirToR[0]>0.05) DirToR[0]=1;
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
            else DirToR[0]=0;
            if (DirToR[1]>0.05) DirToR[1]=1;
            else if (DirToR[1]<-0.05) DirToR[1]=-1;
            else DirToR[1]=0;
    1870:	41 2c       	mov	r4, r1
    1872:	51 2c       	mov	r5, r1
    1874:	32 01       	movw	r6, r4
    1876:	19 c0       	rjmp	.+50     	; 0x18aa <OA+0x342>
        DirToR[0] = num[0] / denum[0] ;
        DirToR[1] = num[1] / denum[1] ;
        //printf("DirToR %f  %f \n",DirToR[0],DirToR[1]);
        {
            if (DirToR[0]>0.05) DirToR[0]=1;
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
    1878:	21 2c       	mov	r2, r1
    187a:	31 2c       	mov	r3, r1
    187c:	00 e8       	ldi	r16, 0x80	; 128
    187e:	1f eb       	ldi	r17, 0xBF	; 191
            else DirToR[0]=0;
            if (DirToR[1]>0.05) DirToR[1]=1;
    1880:	0f 2e       	mov	r0, r31
    1882:	41 2c       	mov	r4, r1
    1884:	51 2c       	mov	r5, r1
    1886:	f0 e8       	ldi	r31, 0x80	; 128
    1888:	6f 2e       	mov	r6, r31
    188a:	ff e3       	ldi	r31, 0x3F	; 63
    188c:	7f 2e       	mov	r7, r31
    188e:	f0 2d       	mov	r31, r0
    1890:	0c c0       	rjmp	.+24     	; 0x18aa <OA+0x342>

        DirToR[0] = num[0] / denum[0] ;
        DirToR[1] = num[1] / denum[1] ;
        //printf("DirToR %f  %f \n",DirToR[0],DirToR[1]);
        {
            if (DirToR[0]>0.05) DirToR[0]=1;
    1892:	21 2c       	mov	r2, r1
    1894:	31 2c       	mov	r3, r1
    1896:	00 e8       	ldi	r16, 0x80	; 128
    1898:	1f e3       	ldi	r17, 0x3F	; 63
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
            else DirToR[0]=0;
            if (DirToR[1]>0.05) DirToR[1]=1;
    189a:	0f 2e       	mov	r0, r31
    189c:	41 2c       	mov	r4, r1
    189e:	51 2c       	mov	r5, r1
    18a0:	f0 e8       	ldi	r31, 0x80	; 128
    18a2:	6f 2e       	mov	r6, r31
    18a4:	ff e3       	ldi	r31, 0x3F	; 63
    18a6:	7f 2e       	mov	r7, r31
    18a8:	f0 2d       	mov	r31, r0
        else if(DirToR[1]<0)
        { DirToR[1]=0; }
    }
    while( DirToR[0]==0 && DirToR[1]<0 );

    DirToW[0] = DirToR[0]*cos(current_cell[2])-DirToR[1]*sin(current_cell[2]);
    18aa:	0f 2e       	mov	r0, r31
    18ac:	f1 e5       	ldi	r31, 0x51	; 81
    18ae:	ef 2e       	mov	r14, r31
    18b0:	f2 e0       	ldi	r31, 0x02	; 2
    18b2:	ff 2e       	mov	r15, r31
    18b4:	f0 2d       	mov	r31, r0
    18b6:	f7 01       	movw	r30, r14
    18b8:	80 84       	ldd	r8, Z+8	; 0x08
    18ba:	91 84       	ldd	r9, Z+9	; 0x09
    18bc:	a2 84       	ldd	r10, Z+10	; 0x0a
    18be:	b3 84       	ldd	r11, Z+11	; 0x0b
    18c0:	c5 01       	movw	r24, r10
    18c2:	b4 01       	movw	r22, r8
    18c4:	0e 94 67 19 	call	0x32ce	; 0x32ce <cos>
    18c8:	6b a3       	std	Y+35, r22	; 0x23
    18ca:	7c a3       	std	Y+36, r23	; 0x24
    18cc:	8d a3       	std	Y+37, r24	; 0x25
    18ce:	9e a3       	std	Y+38, r25	; 0x26
    18d0:	c5 01       	movw	r24, r10
    18d2:	b4 01       	movw	r22, r8
    18d4:	0e 94 b5 1b 	call	0x376a	; 0x376a <sin>
    18d8:	4b 01       	movw	r8, r22
    18da:	5c 01       	movw	r10, r24
    18dc:	22 2d       	mov	r18, r2
    18de:	33 2d       	mov	r19, r3
    18e0:	40 2f       	mov	r20, r16
    18e2:	51 2f       	mov	r21, r17
    18e4:	6b a1       	ldd	r22, Y+35	; 0x23
    18e6:	7c a1       	ldd	r23, Y+36	; 0x24
    18e8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ea:	9e a1       	ldd	r25, Y+38	; 0x26
    18ec:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    18f0:	6f a3       	std	Y+39, r22	; 0x27
    18f2:	78 a7       	std	Y+40, r23	; 0x28
    18f4:	89 a7       	std	Y+41, r24	; 0x29
    18f6:	9a a7       	std	Y+42, r25	; 0x2a
    18f8:	a3 01       	movw	r20, r6
    18fa:	92 01       	movw	r18, r4
    18fc:	c5 01       	movw	r24, r10
    18fe:	b4 01       	movw	r22, r8
    1900:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1904:	9b 01       	movw	r18, r22
    1906:	ac 01       	movw	r20, r24
    1908:	6f a1       	ldd	r22, Y+39	; 0x27
    190a:	78 a5       	ldd	r23, Y+40	; 0x28
    190c:	89 a5       	ldd	r24, Y+41	; 0x29
    190e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1910:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    1914:	6d 87       	std	Y+13, r22	; 0x0d
    1916:	7e 87       	std	Y+14, r23	; 0x0e
    1918:	8f 87       	std	Y+15, r24	; 0x0f
    191a:	98 8b       	std	Y+16, r25	; 0x10
    DirToW[1] = DirToR[0]*sin(current_cell[2])+DirToR[1]*cos(current_cell[2]);
    191c:	22 2d       	mov	r18, r2
    191e:	33 2d       	mov	r19, r3
    1920:	40 2f       	mov	r20, r16
    1922:	51 2f       	mov	r21, r17
    1924:	c5 01       	movw	r24, r10
    1926:	b4 01       	movw	r22, r8
    1928:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    192c:	4b 01       	movw	r8, r22
    192e:	5c 01       	movw	r10, r24
    1930:	a3 01       	movw	r20, r6
    1932:	92 01       	movw	r18, r4
    1934:	6b a1       	ldd	r22, Y+35	; 0x23
    1936:	7c a1       	ldd	r23, Y+36	; 0x24
    1938:	8d a1       	ldd	r24, Y+37	; 0x25
    193a:	9e a1       	ldd	r25, Y+38	; 0x26
    193c:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	c5 01       	movw	r24, r10
    1946:	b4 01       	movw	r22, r8
    1948:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    194c:	69 8b       	std	Y+17, r22	; 0x11
    194e:	7a 8b       	std	Y+18, r23	; 0x12
    1950:	8b 8b       	std	Y+19, r24	; 0x13
    1952:	9c 8b       	std	Y+20, r25	; 0x14
     //printf("DirToW %f  %f \n",DirToW[0],DirToW[1]);

    ConvToUnit ( DirToW, DirToWU );
    1954:	be 01       	movw	r22, r28
    1956:	6b 5f       	subi	r22, 0xFB	; 251
    1958:	7f 4f       	sbci	r23, 0xFF	; 255
    195a:	ce 01       	movw	r24, r28
    195c:	0d 96       	adiw	r24, 0x0d	; 13
    195e:	a3 dd       	rcall	.-1210   	; 0x14a6 <ConvToUnit>
     //printf("DirToWU %d  %d \n",DirToWU[0],DirToWU[1]);
	NewPoint[0] = current_cell[0] + DirToWU[0] ;
    1960:	6d 81       	ldd	r22, Y+5	; 0x05
    1962:	7e 81       	ldd	r23, Y+6	; 0x06
    1964:	07 2e       	mov	r0, r23
    1966:	00 0c       	add	r0, r0
    1968:	88 0b       	sbc	r24, r24
    196a:	99 0b       	sbc	r25, r25
    196c:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    1970:	d7 01       	movw	r26, r14
    1972:	2d 91       	ld	r18, X+
    1974:	3d 91       	ld	r19, X+
    1976:	4d 91       	ld	r20, X+
    1978:	5c 91       	ld	r21, X
    197a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    197e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
    1982:	4b 01       	movw	r8, r22
    1984:	5c 01       	movw	r10, r24
    1986:	eb a5       	ldd	r30, Y+43	; 0x2b
    1988:	fc a5       	ldd	r31, Y+44	; 0x2c
    198a:	71 83       	std	Z+1, r23	; 0x01
    198c:	60 83       	st	Z, r22
    NewPoint[1] = current_cell[1] + DirToWU[1] ;
    198e:	6f 81       	ldd	r22, Y+7	; 0x07
    1990:	78 85       	ldd	r23, Y+8	; 0x08
    1992:	07 2e       	mov	r0, r23
    1994:	00 0c       	add	r0, r0
    1996:	88 0b       	sbc	r24, r24
    1998:	99 0b       	sbc	r25, r25
    199a:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    199e:	d7 01       	movw	r26, r14
    19a0:	14 96       	adiw	r26, 0x04	; 4
    19a2:	2d 91       	ld	r18, X+
    19a4:	3d 91       	ld	r19, X+
    19a6:	4d 91       	ld	r20, X+
    19a8:	5c 91       	ld	r21, X
    19aa:	17 97       	sbiw	r26, 0x07	; 7
    19ac:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    19b0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fixsfsi>
    19b4:	6b 01       	movw	r12, r22
    19b6:	7c 01       	movw	r14, r24
    19b8:	eb a5       	ldd	r30, Y+43	; 0x2b
    19ba:	fc a5       	ldd	r31, Y+44	; 0x2c
    19bc:	73 83       	std	Z+3, r23	; 0x03
    19be:	62 83       	std	Z+2, r22	; 0x02

    NextP2NewP_dir[0] = Path[j+1][0]- NewPoint[0] ;
    19c0:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <j>
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	00 0f       	add	r16, r16
    19c8:	11 1f       	adc	r17, r17
    19ca:	00 59       	subi	r16, 0x90	; 144
    19cc:	1e 4f       	sbci	r17, 0xFE	; 254
    19ce:	d8 01       	movw	r26, r16
    19d0:	6c 91       	ld	r22, X
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	68 19       	sub	r22, r8
    19d6:	79 09       	sbc	r23, r9
    19d8:	07 2e       	mov	r0, r23
    19da:	00 0c       	add	r0, r0
    19dc:	88 0b       	sbc	r24, r24
    19de:	99 0b       	sbc	r25, r25
    19e0:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    19e4:	6d 8b       	std	Y+21, r22	; 0x15
    19e6:	7e 8b       	std	Y+22, r23	; 0x16
    19e8:	8f 8b       	std	Y+23, r24	; 0x17
    19ea:	98 8f       	std	Y+24, r25	; 0x18
    NextP2NewP_dir[1] = Path[j+1][1]- NewPoint[1] ;
    19ec:	f8 01       	movw	r30, r16
    19ee:	81 81       	ldd	r24, Z+1	; 0x01
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	bc 01       	movw	r22, r24
    19f4:	6c 19       	sub	r22, r12
    19f6:	7d 09       	sbc	r23, r13
    19f8:	07 2e       	mov	r0, r23
    19fa:	00 0c       	add	r0, r0
    19fc:	88 0b       	sbc	r24, r24
    19fe:	99 0b       	sbc	r25, r25
    1a00:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    1a04:	69 8f       	std	Y+25, r22	; 0x19
    1a06:	7a 8f       	std	Y+26, r23	; 0x1a
    1a08:	8b 8f       	std	Y+27, r24	; 0x1b
    1a0a:	9c 8f       	std	Y+28, r25	; 0x1c
    ConvToUnit ( NextP2NewP_dir, NextP2NewP_dirU );
    1a0c:	be 01       	movw	r22, r28
    1a0e:	67 5f       	subi	r22, 0xF7	; 247
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	ce 01       	movw	r24, r28
    1a14:	45 96       	adiw	r24, 0x15	; 21
    1a16:	47 dd       	rcall	.-1394   	; 0x14a6 <ConvToUnit>

	NewPoint[2] = GetTheta(NextP2NewP_dirU);
    1a18:	ce 01       	movw	r24, r28
    1a1a:	09 96       	adiw	r24, 0x09	; 9
    1a1c:	f7 dc       	rcall	.-1554   	; 0x140c <GetTheta>
    1a1e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1a20:	bc a5       	ldd	r27, Y+44	; 0x2c
    1a22:	15 96       	adiw	r26, 0x05	; 5
    1a24:	9c 93       	st	X, r25
    1a26:	8e 93       	st	-X, r24
    1a28:	14 97       	sbiw	r26, 0x04	; 4

	// to continue in OA till returning to path
	if((Path[j+1][0]-Path[j][0])==0) // x1 = x2 , mile inf
    1a2a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <j>
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9c 01       	movw	r18, r24
    1a32:	2f 5f       	subi	r18, 0xFF	; 255
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	f9 01       	movw	r30, r18
    1a38:	ee 0f       	add	r30, r30
    1a3a:	ff 1f       	adc	r31, r31
    1a3c:	e2 59       	subi	r30, 0x92	; 146
    1a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a40:	60 81       	ld	r22, Z
    1a42:	fc 01       	movw	r30, r24
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	e2 59       	subi	r30, 0x92	; 146
    1a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4c:	40 81       	ld	r20, Z
    1a4e:	64 13       	cpse	r22, r20
    1a50:	0d c0       	rjmp	.+26     	; 0x1a6c <OA+0x504>
	{
		// x == (x1 || x2)
		if( NewPoint[0] == Path[j][0] )
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	8d 91       	ld	r24, X+
    1a56:	9c 91       	ld	r25, X
    1a58:	86 17       	cp	r24, r22
    1a5a:	97 07       	cpc	r25, r23
    1a5c:	19 f4       	brne	.+6      	; 0x1a64 <OA+0x4fc>
		OutOfPath=0;
    1a5e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <OutOfPath>
    1a62:	8f c0       	rjmp	.+286    	; 0x1b82 <OA+0x61a>
		else
		OutOfPath=1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <OutOfPath>
    1a6a:	8b c0       	rjmp	.+278    	; 0x1b82 <OA+0x61a>
	}
	else
	{
		// y == (y2-y1)*(x-x1)/(x2-x1) + y1
		if( NewPoint[1] == (Path[j+1][1]-Path[j][1])*(NewPoint[0]-Path[j][0])/(Path[j+1][0]-Path[j][0]) + Path[j][1] )
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	fc 01       	movw	r30, r24
    1a72:	e2 59       	subi	r30, 0x92	; 146
    1a74:	fe 4f       	sbci	r31, 0xFE	; 254
    1a76:	01 81       	ldd	r16, Z+1	; 0x01
    1a78:	10 e0       	ldi	r17, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	f9 01       	movw	r30, r18
    1a82:	e2 59       	subi	r30, 0x92	; 146
    1a84:	fe 4f       	sbci	r31, 0xFE	; 254
    1a86:	21 81       	ldd	r18, Z+1	; 0x01
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	20 1b       	sub	r18, r16
    1a8c:	31 0b       	sbc	r19, r17
    1a8e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1a90:	bc a5       	ldd	r27, Y+44	; 0x2c
    1a92:	ed 91       	ld	r30, X+
    1a94:	fc 91       	ld	r31, X
    1a96:	e4 1b       	sub	r30, r20
    1a98:	f5 0b       	sbc	r31, r21
    1a9a:	2e 9f       	mul	r18, r30
    1a9c:	c0 01       	movw	r24, r0
    1a9e:	2f 9f       	mul	r18, r31
    1aa0:	90 0d       	add	r25, r0
    1aa2:	3e 9f       	mul	r19, r30
    1aa4:	90 0d       	add	r25, r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	64 1b       	sub	r22, r20
    1aac:	75 0b       	sbc	r23, r21
    1aae:	0e 94 3a 1c 	call	0x3874	; 0x3874 <__divmodhi4>
    1ab2:	06 0f       	add	r16, r22
    1ab4:	17 1f       	adc	r17, r23
    1ab6:	eb a5       	ldd	r30, Y+43	; 0x2b
    1ab8:	fc a5       	ldd	r31, Y+44	; 0x2c
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	93 81       	ldd	r25, Z+3	; 0x03
    1abe:	80 17       	cp	r24, r16
    1ac0:	91 07       	cpc	r25, r17
    1ac2:	19 f4       	brne	.+6      	; 0x1aca <OA+0x562>
		OutOfPath=0;
    1ac4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <OutOfPath>
    1ac8:	5c c0       	rjmp	.+184    	; 0x1b82 <OA+0x61a>
		else
		OutOfPath=1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <OutOfPath>
    1ad0:	58 c0       	rjmp	.+176    	; 0x1b82 <OA+0x61a>
        //printf("DirToR %f  %f \n",DirToR[0],DirToR[1]);
        {
            if (DirToR[0]>0.05) DirToR[0]=1;
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
            else DirToR[0]=0;
            if (DirToR[1]>0.05) DirToR[1]=1;
    1ad2:	2d ec       	ldi	r18, 0xCD	; 205
    1ad4:	3c ec       	ldi	r19, 0xCC	; 204
    1ad6:	4c e4       	ldi	r20, 0x4C	; 76
    1ad8:	5d e3       	ldi	r21, 0x3D	; 61
    1ada:	c5 01       	movw	r24, r10
    1adc:	b4 01       	movw	r22, r8
    1ade:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	0c f4       	brge	.+2      	; 0x1ae8 <OA+0x580>
    1ae6:	c8 ce       	rjmp	.-624    	; 0x1878 <OA+0x310>
        DirToR[0] = num[0] / denum[0] ;
        DirToR[1] = num[1] / denum[1] ;
        //printf("DirToR %f  %f \n",DirToR[0],DirToR[1]);
        {
            if (DirToR[0]>0.05) DirToR[0]=1;
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
    1ae8:	21 2c       	mov	r2, r1
    1aea:	31 2c       	mov	r3, r1
    1aec:	00 e8       	ldi	r16, 0x80	; 128
    1aee:	1f eb       	ldi	r17, 0xBF	; 191
    1af0:	9c ce       	rjmp	.-712    	; 0x182a <OA+0x2c2>
            else DirToR[0]=0;
            if (DirToR[1]>0.05) DirToR[1]=1;
    1af2:	2d ec       	ldi	r18, 0xCD	; 205
    1af4:	3c ec       	ldi	r19, 0xCC	; 204
    1af6:	4c e4       	ldi	r20, 0x4C	; 76
    1af8:	5d e3       	ldi	r21, 0x3D	; 61
    1afa:	c5 01       	movw	r24, r10
    1afc:	b4 01       	movw	r22, r8
    1afe:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	6c f1       	brlt	.+90     	; 0x1b60 <OA+0x5f8>
    1b06:	1c c0       	rjmp	.+56     	; 0x1b40 <OA+0x5d8>
            else if (DirToR[1]<-0.05) DirToR[1]=-1;
            else DirToR[1]=0;
        }
        if( DirToR[0]==0 && DirToR[1]<0 ) 		// to prevent back directions
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	a9 01       	movw	r20, r18
    1b0e:	62 2d       	mov	r22, r2
    1b10:	73 2d       	mov	r23, r3
    1b12:	80 2f       	mov	r24, r16
    1b14:	91 2f       	mov	r25, r17
    1b16:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	71 f1       	breq	.+92     	; 0x1b7a <OA+0x612>
    1b1e:	a8 ce       	rjmp	.-688    	; 0x1870 <OA+0x308>
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	a9 01       	movw	r20, r18
    1b26:	62 2d       	mov	r22, r2
    1b28:	73 2d       	mov	r23, r3
    1b2a:	80 2f       	mov	r24, r16
    1b2c:	91 2f       	mov	r25, r17
    1b2e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <OA+0x5d0>
    1b36:	85 ce       	rjmp	.-758    	; 0x1842 <OA+0x2da>
    1b38:	41 2c       	mov	r4, r1
    1b3a:	51 2c       	mov	r5, r1
    1b3c:	32 01       	movw	r6, r4
    1b3e:	b5 ce       	rjmp	.-662    	; 0x18aa <OA+0x342>
        {
            if (DirToR[0]>0.05) DirToR[0]=1;
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
            else DirToR[0]=0;
            if (DirToR[1]>0.05) DirToR[1]=1;
            else if (DirToR[1]<-0.05) DirToR[1]=-1;
    1b40:	2d ec       	ldi	r18, 0xCD	; 205
    1b42:	3c ec       	ldi	r19, 0xCC	; 204
    1b44:	4c e4       	ldi	r20, 0x4C	; 76
    1b46:	5d eb       	ldi	r21, 0xBD	; 189
    1b48:	c5 01       	movw	r24, r10
    1b4a:	b4 01       	movw	r22, r8
    1b4c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	0c f4       	brge	.+2      	; 0x1b56 <OA+0x5ee>
    1b54:	76 ce       	rjmp	.-788    	; 0x1842 <OA+0x2da>
        DirToR[1] = num[1] / denum[1] ;
        //printf("DirToR %f  %f \n",DirToR[0],DirToR[1]);
        {
            if (DirToR[0]>0.05) DirToR[0]=1;
            else if (DirToR[0]<-0.05) DirToR[0]=-1;
            else DirToR[0]=0;
    1b56:	21 2c       	mov	r2, r1
    1b58:	31 2c       	mov	r3, r1
    1b5a:	00 e0       	ldi	r16, 0x00	; 0
    1b5c:	10 e0       	ldi	r17, 0x00	; 0
    1b5e:	d4 cf       	rjmp	.-88     	; 0x1b08 <OA+0x5a0>
    1b60:	21 2c       	mov	r2, r1
    1b62:	31 2c       	mov	r3, r1
    1b64:	00 e0       	ldi	r16, 0x00	; 0
    1b66:	10 e0       	ldi	r17, 0x00	; 0
            if (DirToR[1]>0.05) DirToR[1]=1;
    1b68:	0f 2e       	mov	r0, r31
    1b6a:	41 2c       	mov	r4, r1
    1b6c:	51 2c       	mov	r5, r1
    1b6e:	f0 e8       	ldi	r31, 0x80	; 128
    1b70:	6f 2e       	mov	r6, r31
    1b72:	ff e3       	ldi	r31, 0x3F	; 63
    1b74:	7f 2e       	mov	r7, r31
    1b76:	f0 2d       	mov	r31, r0
    1b78:	98 ce       	rjmp	.-720    	; 0x18aa <OA+0x342>
            else if (DirToR[1]<-0.05) DirToR[1]=-1;
            else DirToR[1]=0;
    1b7a:	41 2c       	mov	r4, r1
    1b7c:	51 2c       	mov	r5, r1
    1b7e:	32 01       	movw	r6, r4
    1b80:	94 ce       	rjmp	.-728    	; 0x18aa <OA+0x342>
		if( NewPoint[1] == (Path[j+1][1]-Path[j][1])*(NewPoint[0]-Path[j][0])/(Path[j+1][0]-Path[j][0]) + Path[j][1] )
		OutOfPath=0;
		else
		OutOfPath=1;
	}
}
    1b82:	ac 96       	adiw	r28, 0x2c	; 44
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	bf 90       	pop	r11
    1ba0:	af 90       	pop	r10
    1ba2:	9f 90       	pop	r9
    1ba4:	8f 90       	pop	r8
    1ba6:	7f 90       	pop	r7
    1ba8:	6f 90       	pop	r6
    1baa:	5f 90       	pop	r5
    1bac:	4f 90       	pop	r4
    1bae:	3f 90       	pop	r3
    1bb0:	2f 90       	pop	r2
    1bb2:	08 95       	ret

00001bb4 <psd_init>:
    1bb4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1bb8:	8c e0       	ldi	r24, 0x0C	; 12
    1bba:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1bbe:	88 e9       	ldi	r24, 0x98	; 152
    1bc0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1bc4:	86 e0       	ldi	r24, 0x06	; 6
    1bc6:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1bca:	ef e3       	ldi	r30, 0x3F	; 63
    1bcc:	f2 e0       	ldi	r31, 0x02	; 2
    1bce:	11 82       	std	Z+1, r1	; 0x01
    1bd0:	10 82       	st	Z, r1
    1bd2:	13 82       	std	Z+3, r1	; 0x03
    1bd4:	12 82       	std	Z+2, r1	; 0x02
    1bd6:	15 82       	std	Z+5, r1	; 0x05
    1bd8:	14 82       	std	Z+4, r1	; 0x04
    1bda:	08 95       	ret

00001bdc <__vector_30>:
    1bdc:	1f 92       	push	r1
    1bde:	0f 92       	push	r0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	0f 92       	push	r0
    1be4:	11 24       	eor	r1, r1
    1be6:	0b b6       	in	r0, 0x3b	; 59
    1be8:	0f 92       	push	r0
    1bea:	2f 93       	push	r18
    1bec:	8f 93       	push	r24
    1bee:	9f 93       	push	r25
    1bf0:	af 93       	push	r26
    1bf2:	bf 93       	push	r27
    1bf4:	ef 93       	push	r30
    1bf6:	ff 93       	push	r31
    1bf8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1bfc:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1c00:	88 71       	andi	r24, 0x18	; 24
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <__vector_30+0x2e>
    1c04:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <rxcnt.1627>
    1c08:	41 c0       	rjmp	.+130    	; 0x1c8c <__vector_30+0xb0>
    1c0a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rxcnt.1627>
    1c0e:	81 11       	cpse	r24, r1
    1c10:	0b c0       	rjmp	.+22     	; 0x1c28 <__vector_30+0x4c>
    1c12:	9c 3c       	cpi	r25, 0xCC	; 204
    1c14:	d9 f5       	brne	.+118    	; 0x1c8c <__vector_30+0xb0>
    1c16:	8c ec       	ldi	r24, 0xCC	; 204
    1c18:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <rxdata.1628>
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <rxcnt.1627>
    1c22:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <chk.1626>
    1c26:	32 c0       	rjmp	.+100    	; 0x1c8c <__vector_30+0xb0>
    1c28:	e8 2f       	mov	r30, r24
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	e6 5e       	subi	r30, 0xE6	; 230
    1c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c30:	90 83       	st	Z, r25
    1c32:	85 30       	cpi	r24, 0x05	; 5
    1c34:	41 f1       	breq	.+80     	; 0x1c86 <__vector_30+0xaa>
    1c36:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <chk.1626>
    1c3a:	92 0f       	add	r25, r18
    1c3c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <chk.1626>
    1c40:	8f 5f       	subi	r24, 0xFF	; 255
    1c42:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rxcnt.1627>
    1c46:	87 30       	cpi	r24, 0x07	; 7
    1c48:	09 f5       	brne	.+66     	; 0x1c8c <__vector_30+0xb0>
    1c4a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <rxdata.1628+0x5>
    1c4e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <chk.1626>
    1c52:	98 13       	cpse	r25, r24
    1c54:	15 c0       	rjmp	.+42     	; 0x1c80 <__vector_30+0xa4>
    1c56:	aa e1       	ldi	r26, 0x1A	; 26
    1c58:	b1 e0       	ldi	r27, 0x01	; 1
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	ec 91       	ld	r30, X
    1c5e:	11 97       	sbiw	r26, 0x01	; 1
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	13 96       	adiw	r26, 0x03	; 3
    1c64:	8c 91       	ld	r24, X
    1c66:	13 97       	sbiw	r26, 0x03	; 3
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	88 27       	eor	r24, r24
    1c6e:	14 96       	adiw	r26, 0x04	; 4
    1c70:	2c 91       	ld	r18, X
    1c72:	82 2b       	or	r24, r18
    1c74:	ee 0f       	add	r30, r30
    1c76:	ff 1f       	adc	r31, r31
    1c78:	e3 5e       	subi	r30, 0xE3	; 227
    1c7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <rxcnt.1627>
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <__vector_30+0xb0>
    1c86:	86 e0       	ldi	r24, 0x06	; 6
    1c88:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rxcnt.1627>
    1c8c:	ff 91       	pop	r31
    1c8e:	ef 91       	pop	r30
    1c90:	bf 91       	pop	r27
    1c92:	af 91       	pop	r26
    1c94:	9f 91       	pop	r25
    1c96:	8f 91       	pop	r24
    1c98:	2f 91       	pop	r18
    1c9a:	0f 90       	pop	r0
    1c9c:	0b be       	out	0x3b, r0	; 59
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	0f 90       	pop	r0
    1ca4:	1f 90       	pop	r1
    1ca6:	18 95       	reti

00001ca8 <psd_clear>:
    1ca8:	ef e3       	ldi	r30, 0x3F	; 63
    1caa:	f2 e0       	ldi	r31, 0x02	; 2
    1cac:	11 82       	std	Z+1, r1	; 0x01
    1cae:	10 82       	st	Z, r1
    1cb0:	13 82       	std	Z+3, r1	; 0x03
    1cb2:	12 82       	std	Z+2, r1	; 0x02
    1cb4:	15 82       	std	Z+5, r1	; 0x05
    1cb6:	14 82       	std	Z+4, r1	; 0x04
    1cb8:	08 95       	ret

00001cba <psd_read>:
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	27 97       	sbiw	r28, 0x07	; 7
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	8a ea       	ldi	r24, 0xAA	; 170
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	87 e0       	ldi	r24, 0x07	; 7
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
    1cde:	1c 82       	std	Y+4, r1	; 0x04
    1ce0:	1d 82       	std	Y+5, r1	; 0x05
    1ce2:	85 e5       	ldi	r24, 0x55	; 85
    1ce4:	8f 83       	std	Y+7, r24	; 0x07
    1ce6:	51 e1       	ldi	r21, 0x11	; 17
    1ce8:	8e 01       	movw	r16, r28
    1cea:	08 5f       	subi	r16, 0xF8	; 248
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	eb e9       	ldi	r30, 0x9B	; 155
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	6c e9       	ldi	r22, 0x9C	; 156
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	40 ea       	ldi	r20, 0xA0	; 160
    1cf8:	3f e0       	ldi	r19, 0x0F	; 15
    1cfa:	5a 83       	std	Y+2, r21	; 0x02
    1cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	89 0f       	add	r24, r25
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	89 0f       	add	r24, r25
    1d06:	9d 81       	ldd	r25, Y+5	; 0x05
    1d08:	89 0f       	add	r24, r25
    1d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0c:	89 0f       	add	r24, r25
    1d0e:	85 0f       	add	r24, r21
    1d10:	8e 83       	std	Y+6, r24	; 0x06
    1d12:	ce 01       	movw	r24, r28
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	7c 01       	movw	r14, r24
    1d18:	84 2f       	mov	r24, r20
    1d1a:	93 2f       	mov	r25, r19
    1d1c:	20 81       	ld	r18, Z
    1d1e:	25 fd       	sbrc	r18, 5
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <psd_read+0x6e>
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	d8 f7       	brcc	.-10     	; 0x1d1c <psd_read+0x62>
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <psd_read+0x72>
    1d28:	89 2b       	or	r24, r25
    1d2a:	41 f0       	breq	.+16     	; 0x1d3c <psd_read+0x82>
    1d2c:	d7 01       	movw	r26, r14
    1d2e:	8d 91       	ld	r24, X+
    1d30:	7d 01       	movw	r14, r26
    1d32:	db 01       	movw	r26, r22
    1d34:	8c 93       	st	X, r24
    1d36:	e0 16       	cp	r14, r16
    1d38:	f1 06       	cpc	r15, r17
    1d3a:	71 f7       	brne	.-36     	; 0x1d18 <psd_read+0x5e>
    1d3c:	5f 5f       	subi	r21, 0xFF	; 255
    1d3e:	54 31       	cpi	r21, 0x14	; 20
    1d40:	e1 f6       	brne	.-72     	; 0x1cfa <psd_read+0x40>
    1d42:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <psd>
    1d46:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <psd+0x1>
    1d4a:	89 2b       	or	r24, r25
    1d4c:	79 f0       	breq	.+30     	; 0x1d6c <psd_read+0xb2>
    1d4e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <psd+0x2>
    1d52:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <psd+0x3>
    1d56:	89 2b       	or	r24, r25
    1d58:	59 f0       	breq	.+22     	; 0x1d70 <psd_read+0xb6>
    1d5a:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <psd+0x4>
    1d5e:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <psd+0x5>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	23 2b       	or	r18, r19
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <psd_read+0xb8>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <psd_read+0xb8>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <psd_read+0xb8>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	27 96       	adiw	r28, 0x07	; 7
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	08 95       	ret

00001d8c <init_SPI>:
			break;
	}
}
void trancieve_SPI (char data)
{
	SPDR= data;
    1d8c:	78 94       	sei
    1d8e:	88 23       	and	r24, r24
    1d90:	51 f0       	breq	.+20     	; 0x1da6 <init_SPI+0x1a>
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	79 f4       	brne	.+30     	; 0x1db4 <init_SPI+0x28>
    1d96:	86 ef       	ldi	r24, 0xF6	; 246
    1d98:	8d b9       	out	0x0d, r24	; 13
    1d9a:	1e b8       	out	0x0e, r1	; 14
    1d9c:	b8 9a       	sbi	0x17, 0	; 23
    1d9e:	b9 9a       	sbi	0x17, 1	; 23
    1da0:	ba 9a       	sbi	0x17, 2	; 23
    1da2:	bb 98       	cbi	0x17, 3	; 23
    1da4:	08 95       	ret
    1da6:	86 ec       	ldi	r24, 0xC6	; 198
    1da8:	8d b9       	out	0x0d, r24	; 13
    1daa:	1e b8       	out	0x0e, r1	; 14
    1dac:	b8 98       	cbi	0x17, 0	; 23
    1dae:	b9 98       	cbi	0x17, 1	; 23
    1db0:	ba 98       	cbi	0x17, 2	; 23
    1db2:	bb 9a       	sbi	0x17, 3	; 23
    1db4:	08 95       	ret

00001db6 <Set_SPI_Recieve>:
}
void (*SPI_ptr)(void);
void Set_SPI_Recieve (void (*ptr)(void))
{
	SPI_ptr=ptr;
    1db6:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <SPI_ptr+0x1>
    1dba:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <SPI_ptr>
    1dbe:	08 95       	ret

00001dc0 <__vector_17>:
}
char recieved_data ;
ISR(SPI_STC_vect)
{
    1dc0:	1f 92       	push	r1
    1dc2:	0f 92       	push	r0
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	0f 92       	push	r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	0b b6       	in	r0, 0x3b	; 59
    1dcc:	0f 92       	push	r0
    1dce:	2f 93       	push	r18
    1dd0:	3f 93       	push	r19
    1dd2:	4f 93       	push	r20
    1dd4:	5f 93       	push	r21
    1dd6:	6f 93       	push	r22
    1dd8:	7f 93       	push	r23
    1dda:	8f 93       	push	r24
    1ddc:	9f 93       	push	r25
    1dde:	af 93       	push	r26
    1de0:	bf 93       	push	r27
    1de2:	ef 93       	push	r30
    1de4:	ff 93       	push	r31
	SPI_ptr();
    1de6:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <SPI_ptr>
    1dea:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <SPI_ptr+0x1>
    1dee:	09 95       	icall
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0b be       	out	0x3b, r0	; 59
    1e0c:	0f 90       	pop	r0
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	0f 90       	pop	r0
    1e12:	1f 90       	pop	r1
    1e14:	18 95       	reti

00001e16 <Timer_init>:
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	83 bf       	out	0x33, r24	; 51
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	87 bf       	out	0x37, r24	; 55
    1e1e:	12 be       	out	0x32, r1	; 50
    1e20:	08 95       	ret

00001e22 <Timer_Reset>:
    1e22:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <Timer_counter>
    1e26:	12 be       	out	0x32, r1	; 50
    1e28:	08 95       	ret

00001e2a <__vector_16>:
    1e2a:	1f 92       	push	r1
    1e2c:	0f 92       	push	r0
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	0f 92       	push	r0
    1e32:	11 24       	eor	r1, r1
    1e34:	8f 93       	push	r24
    1e36:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Timer_counter>
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Timer_counter>
    1e40:	8f 91       	pop	r24
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	0f 90       	pop	r0
    1e48:	1f 90       	pop	r1
    1e4a:	18 95       	reti

00001e4c <get_direction>:




int get_direction(double A[2] , double B[2])
{
    1e4c:	8f 92       	push	r8
    1e4e:	9f 92       	push	r9
    1e50:	af 92       	push	r10
    1e52:	bf 92       	push	r11
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	8c 01       	movw	r16, r24
    1e66:	eb 01       	movw	r28, r22
	/* Directions
	3	2	1
	4	*	0
	5	6	7
	*/
	if (B[0]>A[0])
    1e68:	c8 80       	ld	r12, Y
    1e6a:	d9 80       	ldd	r13, Y+1	; 0x01
    1e6c:	ea 80       	ldd	r14, Y+2	; 0x02
    1e6e:	fb 80       	ldd	r15, Y+3	; 0x03
    1e70:	fc 01       	movw	r30, r24
    1e72:	80 80       	ld	r8, Z
    1e74:	91 80       	ldd	r9, Z+1	; 0x01
    1e76:	a2 80       	ldd	r10, Z+2	; 0x02
    1e78:	b3 80       	ldd	r11, Z+3	; 0x03
    1e7a:	a5 01       	movw	r20, r10
    1e7c:	94 01       	movw	r18, r8
    1e7e:	c7 01       	movw	r24, r14
    1e80:	b6 01       	movw	r22, r12
    1e82:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	f4 f4       	brge	.+60     	; 0x1ec6 <get_direction+0x7a>
	{
		if (B[1]>A[1]) return 1 ; //up right
    1e8a:	cc 80       	ldd	r12, Y+4	; 0x04
    1e8c:	dd 80       	ldd	r13, Y+5	; 0x05
    1e8e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e90:	ff 80       	ldd	r15, Y+7	; 0x07
    1e92:	f8 01       	movw	r30, r16
    1e94:	84 80       	ldd	r8, Z+4	; 0x04
    1e96:	95 80       	ldd	r9, Z+5	; 0x05
    1e98:	a6 80       	ldd	r10, Z+6	; 0x06
    1e9a:	b7 80       	ldd	r11, Z+7	; 0x07
    1e9c:	a5 01       	movw	r20, r10
    1e9e:	94 01       	movw	r18, r8
    1ea0:	c7 01       	movw	r24, r14
    1ea2:	b6 01       	movw	r22, r12
    1ea4:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	0c f4       	brge	.+2      	; 0x1eae <get_direction+0x62>
    1eac:	44 c0       	rjmp	.+136    	; 0x1f36 <get_direction+0xea>
		else if (B[1]<A[1]) return 7 ; //down right
    1eae:	a5 01       	movw	r20, r10
    1eb0:	94 01       	movw	r18, r8
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	0c f4       	brge	.+2      	; 0x1ec0 <get_direction+0x74>
    1ebe:	3e c0       	rjmp	.+124    	; 0x1f3c <get_direction+0xf0>
		else return 0 ; //right
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	43 c0       	rjmp	.+134    	; 0x1f4c <get_direction+0x100>
	}
	if (B[0]<A[0])
    1ec6:	a5 01       	movw	r20, r10
    1ec8:	94 01       	movw	r18, r8
    1eca:	c7 01       	movw	r24, r14
    1ecc:	b6 01       	movw	r22, r12
    1ece:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
    1ed2:	88 23       	and	r24, r24
    1ed4:	04 f5       	brge	.+64     	; 0x1f16 <get_direction+0xca>
	{
		if (B[1]>A[1]) return 3 ; //up left
    1ed6:	cc 80       	ldd	r12, Y+4	; 0x04
    1ed8:	dd 80       	ldd	r13, Y+5	; 0x05
    1eda:	ee 80       	ldd	r14, Y+6	; 0x06
    1edc:	ff 80       	ldd	r15, Y+7	; 0x07
    1ede:	f8 01       	movw	r30, r16
    1ee0:	84 80       	ldd	r8, Z+4	; 0x04
    1ee2:	95 80       	ldd	r9, Z+5	; 0x05
    1ee4:	a6 80       	ldd	r10, Z+6	; 0x06
    1ee6:	b7 80       	ldd	r11, Z+7	; 0x07
    1ee8:	a5 01       	movw	r20, r10
    1eea:	94 01       	movw	r18, r8
    1eec:	c7 01       	movw	r24, r14
    1eee:	b6 01       	movw	r22, r12
    1ef0:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	2c f1       	brlt	.+74     	; 0x1f42 <get_direction+0xf6>
		else if (B[1]<A[1]) return 5 ; //down left
    1ef8:	a5 01       	movw	r20, r10
    1efa:	94 01       	movw	r18, r8
    1efc:	c7 01       	movw	r24, r14
    1efe:	b6 01       	movw	r22, r12
    1f00:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__cmpsf2>
		else return 4 ; //left
    1f04:	08 2e       	mov	r0, r24
    1f06:	00 0c       	add	r0, r0
    1f08:	99 0b       	sbc	r25, r25
    1f0a:	88 27       	eor	r24, r24
    1f0c:	99 0f       	add	r25, r25
    1f0e:	88 1f       	adc	r24, r24
    1f10:	99 27       	eor	r25, r25
    1f12:	04 96       	adiw	r24, 0x04	; 4
    1f14:	1b c0       	rjmp	.+54     	; 0x1f4c <get_direction+0x100>
	}
	else
	{
		if (B[1]>A[1]) return 2 ; //up
    1f16:	f8 01       	movw	r30, r16
    1f18:	24 81       	ldd	r18, Z+4	; 0x04
    1f1a:	35 81       	ldd	r19, Z+5	; 0x05
    1f1c:	46 81       	ldd	r20, Z+6	; 0x06
    1f1e:	57 81       	ldd	r21, Z+7	; 0x07
    1f20:	6c 81       	ldd	r22, Y+4	; 0x04
    1f22:	7d 81       	ldd	r23, Y+5	; 0x05
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	0e 94 2e 1b 	call	0x365c	; 0x365c <__gesf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	64 f0       	brlt	.+24     	; 0x1f48 <get_direction+0xfc>
		else return 6 ; //down
    1f30:	86 e0       	ldi	r24, 0x06	; 6
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0b c0       	rjmp	.+22     	; 0x1f4c <get_direction+0x100>
	4	*	0
	5	6	7
	*/
	if (B[0]>A[0])
	{
		if (B[1]>A[1]) return 1 ; //up right
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	08 c0       	rjmp	.+16     	; 0x1f4c <get_direction+0x100>
		else if (B[1]<A[1]) return 7 ; //down right
    1f3c:	87 e0       	ldi	r24, 0x07	; 7
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	05 c0       	rjmp	.+10     	; 0x1f4c <get_direction+0x100>
		else return 0 ; //right
	}
	if (B[0]<A[0])
	{
		if (B[1]>A[1]) return 3 ; //up left
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <get_direction+0x100>
		else if (B[1]<A[1]) return 5 ; //down left
		else return 4 ; //left
	}
	else
	{
		if (B[1]>A[1]) return 2 ; //up
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
		else return 6 ; //down
	}
}
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	bf 90       	pop	r11
    1f5e:	af 90       	pop	r10
    1f60:	9f 90       	pop	r9
    1f62:	8f 90       	pop	r8
    1f64:	08 95       	ret

00001f66 <update_current_cell>:




void update_current_cell ()
{
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
	current_cell[0]=round(current_position[0]/cell_L);
    1f6e:	0b e0       	ldi	r16, 0x0B	; 11
    1f70:	18 e0       	ldi	r17, 0x08	; 8
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	50 e4       	ldi	r21, 0x40	; 64
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1f88:	0e 94 95 1b 	call	0x372a	; 0x372a <round>
    1f8c:	c1 e5       	ldi	r28, 0x51	; 81
    1f8e:	d2 e0       	ldi	r29, 0x02	; 2
    1f90:	68 83       	st	Y, r22
    1f92:	79 83       	std	Y+1, r23	; 0x01
    1f94:	8a 83       	std	Y+2, r24	; 0x02
    1f96:	9b 83       	std	Y+3, r25	; 0x03
	current_cell[1]=round(current_position[1]/cell_L);
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	50 e4       	ldi	r21, 0x40	; 64
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	64 81       	ldd	r22, Z+4	; 0x04
    1fa4:	75 81       	ldd	r23, Z+5	; 0x05
    1fa6:	86 81       	ldd	r24, Z+6	; 0x06
    1fa8:	97 81       	ldd	r25, Z+7	; 0x07
    1faa:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1fae:	0e 94 95 1b 	call	0x372a	; 0x372a <round>
    1fb2:	6c 83       	std	Y+4, r22	; 0x04
    1fb4:	7d 83       	std	Y+5, r23	; 0x05
    1fb6:	8e 83       	std	Y+6, r24	; 0x06
    1fb8:	9f 83       	std	Y+7, r25	; 0x07
	current_cell[2]=t_direction*M_PI/4-1.5708;
    1fba:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <t_direction>
    1fbe:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <t_direction+0x1>
    1fc2:	07 2e       	mov	r0, r23
    1fc4:	00 0c       	add	r0, r0
    1fc6:	88 0b       	sbc	r24, r24
    1fc8:	99 0b       	sbc	r25, r25
    1fca:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatsisf>
    1fce:	2b ed       	ldi	r18, 0xDB	; 219
    1fd0:	3f e0       	ldi	r19, 0x0F	; 15
    1fd2:	49 e4       	ldi	r20, 0x49	; 73
    1fd4:	50 e4       	ldi	r21, 0x40	; 64
    1fd6:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5e e3       	ldi	r21, 0x3E	; 62
    1fe2:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    1fe6:	29 ef       	ldi	r18, 0xF9	; 249
    1fe8:	3f e0       	ldi	r19, 0x0F	; 15
    1fea:	49 ec       	ldi	r20, 0xC9	; 201
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    1ff2:	68 87       	std	Y+8, r22	; 0x08
    1ff4:	79 87       	std	Y+9, r23	; 0x09
    1ff6:	8a 87       	std	Y+10, r24	; 0x0a
    1ff8:	9b 87       	std	Y+11, r25	; 0x0b
} 
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <tracking_init>:

void tracking_init()
{
	j=0 ; 
    2004:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <j>
	t_Start = 0 ;
    2008:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <t_Start>
	t_change_velocities=0;
    200c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <t_change_velocities>
    2010:	08 95       	ret

00002012 <add_to_profile>:
int tnr_vpcntr;
int tnr_velocity_cntr_profile [100];
int tnr_i;

void add_to_profile (double vvx , double vvy , int vcntr)
{
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
	tnr_velocity_profile[tnr_vpcntr][0]=vvx;
    2016:	a0 91 3f 0b 	lds	r26, 0x0B3F	; 0x800b3f <tnr_vpcntr>
    201a:	b0 91 40 0b 	lds	r27, 0x0B40	; 0x800b40 <tnr_vpcntr+0x1>
    201e:	fd 01       	movw	r30, r26
    2020:	ee 0f       	add	r30, r30
    2022:	ff 1f       	adc	r31, r31
    2024:	ee 0f       	add	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	ee 0f       	add	r30, r30
    202a:	ff 1f       	adc	r31, r31
    202c:	e7 5e       	subi	r30, 0xE7	; 231
    202e:	f7 4f       	sbci	r31, 0xF7	; 247
    2030:	60 83       	st	Z, r22
    2032:	71 83       	std	Z+1, r23	; 0x01
    2034:	82 83       	std	Z+2, r24	; 0x02
    2036:	93 83       	std	Z+3, r25	; 0x03
	tnr_velocity_profile[tnr_vpcntr][1]=vvy;
    2038:	24 83       	std	Z+4, r18	; 0x04
    203a:	35 83       	std	Z+5, r19	; 0x05
    203c:	46 83       	std	Z+6, r20	; 0x06
    203e:	57 83       	std	Z+7, r21	; 0x07
	tnr_velocity_cntr_profile[tnr_vpcntr]=vcntr;
    2040:	fd 01       	movw	r30, r26
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	e3 5d       	subi	r30, 0xD3	; 211
    2048:	f8 4f       	sbci	r31, 0xF8	; 248
    204a:	11 83       	std	Z+1, r17	; 0x01
    204c:	00 83       	st	Z, r16
	tnr_vpcntr++;
    204e:	cd 01       	movw	r24, r26
    2050:	01 96       	adiw	r24, 0x01	; 1
    2052:	90 93 40 0b 	sts	0x0B40, r25	; 0x800b40 <tnr_vpcntr+0x1>
    2056:	80 93 3f 0b 	sts	0x0B3F, r24	; 0x800b3f <tnr_vpcntr>
}
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	08 95       	ret

00002060 <add_to_profile_direction>:
void add_to_profile_direction(double vv , int vcntr)
{
    2060:	cf 92       	push	r12
    2062:	df 92       	push	r13
    2064:	ef 92       	push	r14
    2066:	ff 92       	push	r15
    2068:	0f 93       	push	r16
    206a:	1f 93       	push	r17
	switch(tnr_dir)
    206c:	e0 91 f9 07 	lds	r30, 0x07F9	; 0x8007f9 <tnr_dir>
    2070:	f0 91 fa 07 	lds	r31, 0x07FA	; 0x8007fa <tnr_dir+0x1>
    2074:	e8 30       	cpi	r30, 0x08	; 8
    2076:	f1 05       	cpc	r31, r1
    2078:	08 f0       	brcs	.+2      	; 0x207c <add_to_profile_direction+0x1c>
    207a:	38 c0       	rjmp	.+112    	; 0x20ec <add_to_profile_direction+0x8c>
    207c:	8a 01       	movw	r16, r20
    207e:	ea 5b       	subi	r30, 0xBA	; 186
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__tablejump2__>
	{
		case 0 :
		{
			add_to_profile(vv,0,vcntr);
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	a9 01       	movw	r20, r18
    208c:	c2 df       	rcall	.-124    	; 0x2012 <add_to_profile>
			break;
    208e:	2e c0       	rjmp	.+92     	; 0x20ec <add_to_profile_direction+0x8c>
		}
		case 1 :
		{
			add_to_profile(vv,vv,vcntr);
    2090:	9b 01       	movw	r18, r22
    2092:	ac 01       	movw	r20, r24
    2094:	be df       	rcall	.-132    	; 0x2012 <add_to_profile>
			break;
    2096:	2a c0       	rjmp	.+84     	; 0x20ec <add_to_profile_direction+0x8c>
		}
		case 2 :
		{
			add_to_profile(0,vv,vcntr);
    2098:	9b 01       	movw	r18, r22
    209a:	ac 01       	movw	r20, r24
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	cb 01       	movw	r24, r22
    20a2:	b7 df       	rcall	.-146    	; 0x2012 <add_to_profile>
			break;
    20a4:	23 c0       	rjmp	.+70     	; 0x20ec <add_to_profile_direction+0x8c>
		}
		case 3:
		{
			add_to_profile(-vv,vv,vcntr);
    20a6:	6b 01       	movw	r12, r22
    20a8:	7c 01       	movw	r14, r24
    20aa:	f7 fa       	bst	r15, 7
    20ac:	f0 94       	com	r15
    20ae:	f7 f8       	bld	r15, 7
    20b0:	f0 94       	com	r15
    20b2:	9b 01       	movw	r18, r22
    20b4:	ac 01       	movw	r20, r24
    20b6:	c7 01       	movw	r24, r14
    20b8:	b6 01       	movw	r22, r12
    20ba:	ab df       	rcall	.-170    	; 0x2012 <add_to_profile>
			break;
    20bc:	17 c0       	rjmp	.+46     	; 0x20ec <add_to_profile_direction+0x8c>
		}
		case 4 :
		{
			add_to_profile(-vv,0,vcntr);
    20be:	90 58       	subi	r25, 0x80	; 128
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	a9 01       	movw	r20, r18
    20c6:	a5 df       	rcall	.-182    	; 0x2012 <add_to_profile>
			break;
    20c8:	11 c0       	rjmp	.+34     	; 0x20ec <add_to_profile_direction+0x8c>
		}
		case 5 :
		{
			add_to_profile(-vv,-vv,vcntr);
    20ca:	90 58       	subi	r25, 0x80	; 128
    20cc:	9b 01       	movw	r18, r22
    20ce:	ac 01       	movw	r20, r24
    20d0:	a0 df       	rcall	.-192    	; 0x2012 <add_to_profile>
			break;
    20d2:	0c c0       	rjmp	.+24     	; 0x20ec <add_to_profile_direction+0x8c>
		}
		case 6 :
		{
			add_to_profile(0,-vv,vcntr);
    20d4:	9b 01       	movw	r18, r22
    20d6:	ac 01       	movw	r20, r24
    20d8:	50 58       	subi	r21, 0x80	; 128
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	cb 01       	movw	r24, r22
    20e0:	98 df       	rcall	.-208    	; 0x2012 <add_to_profile>
			break;
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <add_to_profile_direction+0x8c>
		}
		case 7 :
		{
			add_to_profile(vv,-vv,vcntr);
    20e4:	9b 01       	movw	r18, r22
    20e6:	ac 01       	movw	r20, r24
    20e8:	50 58       	subi	r21, 0x80	; 128
    20ea:	93 df       	rcall	.-218    	; 0x2012 <add_to_profile>
			break;
		}
	}
}
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	df 90       	pop	r13
    20f6:	cf 90       	pop	r12
    20f8:	08 95       	ret

000020fa <track_no_Rotation_calculations>:

int test ;
void track_no_Rotation_calculations ()
{
    20fa:	bf 92       	push	r11
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
	tnr_i=0;
    210c:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <tnr_i+0x1>
    2110:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <tnr_i>
	tnr_vpcntr=0;
    2114:	10 92 40 0b 	sts	0x0B40, r1	; 0x800b40 <tnr_vpcntr+0x1>
    2118:	10 92 3f 0b 	sts	0x0B3F, r1	; 0x800b3f <tnr_vpcntr>
	tnr_profile_pointer=0;
    211c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <tnr_profile_pointer+0x1>
    2120:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <tnr_profile_pointer>
	test=0;
    2124:	10 92 fe 07 	sts	0x07FE, r1	; 0x8007fe <test+0x1>
    2128:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <test>
	while(1)
	{
		t_P[0][0] =Path[tnr_i][0];
    212c:	09 e1       	ldi	r16, 0x19	; 25
    212e:	17 e0       	ldi	r17, 0x07	; 7
		t_P[0][1] =Path[tnr_i][1];
		t_P[1][0] =Path[tnr_i+1][0];
		t_P[1][1] =Path[tnr_i+1][1];
		tnr_dir= get_direction(t_P[0],t_P[1]);
		tnr_difr[0] = Path[tnr_i+1][0]-Path[tnr_i][0];
    2130:	0f 2e       	mov	r0, r31
    2132:	f5 ef       	ldi	r31, 0xF5	; 245
    2134:	ef 2e       	mov	r14, r31
    2136:	f7 e0       	ldi	r31, 0x07	; 7
    2138:	ff 2e       	mov	r15, r31
    213a:	f0 2d       	mov	r31, r0
	tnr_vpcntr=0;
	tnr_profile_pointer=0;
	test=0;
	while(1)
	{
		t_P[0][0] =Path[tnr_i][0];
    213c:	c0 90 17 07 	lds	r12, 0x0717	; 0x800717 <tnr_i>
    2140:	d0 90 18 07 	lds	r13, 0x0718	; 0x800718 <tnr_i+0x1>
    2144:	e6 01       	movw	r28, r12
    2146:	cc 0f       	add	r28, r28
    2148:	dd 1f       	adc	r29, r29
    214a:	c2 59       	subi	r28, 0x92	; 146
    214c:	de 4f       	sbci	r29, 0xFE	; 254
    214e:	b8 80       	ld	r11, Y
    2150:	6b 2d       	mov	r22, r11
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    215c:	f8 01       	movw	r30, r16
    215e:	60 83       	st	Z, r22
    2160:	71 83       	std	Z+1, r23	; 0x01
    2162:	82 83       	std	Z+2, r24	; 0x02
    2164:	93 83       	std	Z+3, r25	; 0x03
		t_P[0][1] =Path[tnr_i][1];
    2166:	d9 81       	ldd	r29, Y+1	; 0x01
    2168:	6d 2f       	mov	r22, r29
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    2174:	f8 01       	movw	r30, r16
    2176:	64 83       	std	Z+4, r22	; 0x04
    2178:	75 83       	std	Z+5, r23	; 0x05
    217a:	86 83       	std	Z+6, r24	; 0x06
    217c:	97 83       	std	Z+7, r25	; 0x07
		t_P[1][0] =Path[tnr_i+1][0];
    217e:	c6 01       	movw	r24, r12
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	9c 01       	movw	r18, r24
    2186:	20 59       	subi	r18, 0x90	; 144
    2188:	3e 4f       	sbci	r19, 0xFE	; 254
    218a:	69 01       	movw	r12, r18
    218c:	f9 01       	movw	r30, r18
    218e:	c0 81       	ld	r28, Z
    2190:	6c 2f       	mov	r22, r28
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    219c:	f8 01       	movw	r30, r16
    219e:	60 87       	std	Z+8, r22	; 0x08
    21a0:	71 87       	std	Z+9, r23	; 0x09
    21a2:	82 87       	std	Z+10, r24	; 0x0a
    21a4:	93 87       	std	Z+11, r25	; 0x0b
		t_P[1][1] =Path[tnr_i+1][1];
    21a6:	f6 01       	movw	r30, r12
    21a8:	d1 80       	ldd	r13, Z+1	; 0x01
    21aa:	6d 2d       	mov	r22, r13
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 03 1a 	call	0x3406	; 0x3406 <__floatunsisf>
    21b6:	f8 01       	movw	r30, r16
    21b8:	64 87       	std	Z+12, r22	; 0x0c
    21ba:	75 87       	std	Z+13, r23	; 0x0d
    21bc:	86 87       	std	Z+14, r24	; 0x0e
    21be:	97 87       	std	Z+15, r25	; 0x0f
		tnr_dir= get_direction(t_P[0],t_P[1]);
    21c0:	61 e2       	ldi	r22, 0x21	; 33
    21c2:	77 e0       	ldi	r23, 0x07	; 7
    21c4:	c8 01       	movw	r24, r16
    21c6:	42 de       	rcall	.-892    	; 0x1e4c <get_direction>
    21c8:	90 93 fa 07 	sts	0x07FA, r25	; 0x8007fa <tnr_dir+0x1>
    21cc:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <tnr_dir>
		tnr_difr[0] = Path[tnr_i+1][0]-Path[tnr_i][0];
    21d0:	2c 2f       	mov	r18, r28
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	2b 19       	sub	r18, r11
    21d6:	31 09       	sbc	r19, r1
    21d8:	f7 01       	movw	r30, r14
    21da:	31 83       	std	Z+1, r19	; 0x01
    21dc:	20 83       	st	Z, r18
		tnr_difr[1] = Path[tnr_i+1][1]-Path[tnr_i][1];
    21de:	8d 2d       	mov	r24, r13
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	8d 1b       	sub	r24, r29
    21e4:	91 09       	sbc	r25, r1
    21e6:	93 83       	std	Z+3, r25	; 0x03
    21e8:	82 83       	std	Z+2, r24	; 0x02
		if (tnr_difr[0]>0)
    21ea:	12 16       	cp	r1, r18
    21ec:	13 06       	cpc	r1, r19
    21ee:	2c f4       	brge	.+10     	; 0x21fa <track_no_Rotation_calculations+0x100>
		{tnr_diffrence = tnr_difr[0];}
    21f0:	30 93 16 07 	sts	0x0716, r19	; 0x800716 <tnr_diffrence+0x1>
    21f4:	20 93 15 07 	sts	0x0715, r18	; 0x800715 <tnr_diffrence>
    21f8:	19 c0       	rjmp	.+50     	; 0x222c <track_no_Rotation_calculations+0x132>
		else if (tnr_difr[0]<0)
    21fa:	33 23       	and	r19, r19
    21fc:	44 f4       	brge	.+16     	; 0x220e <track_no_Rotation_calculations+0x114>
		{tnr_diffrence = -tnr_difr[0];}
    21fe:	31 95       	neg	r19
    2200:	21 95       	neg	r18
    2202:	31 09       	sbc	r19, r1
    2204:	30 93 16 07 	sts	0x0716, r19	; 0x800716 <tnr_diffrence+0x1>
    2208:	20 93 15 07 	sts	0x0715, r18	; 0x800715 <tnr_diffrence>
    220c:	0f c0       	rjmp	.+30     	; 0x222c <track_no_Rotation_calculations+0x132>
		else
		{
			if (tnr_difr[1]>0)
    220e:	18 16       	cp	r1, r24
    2210:	19 06       	cpc	r1, r25
    2212:	2c f4       	brge	.+10     	; 0x221e <track_no_Rotation_calculations+0x124>
			{tnr_diffrence = tnr_difr[1];}
    2214:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <tnr_diffrence+0x1>
    2218:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <tnr_diffrence>
    221c:	07 c0       	rjmp	.+14     	; 0x222c <track_no_Rotation_calculations+0x132>
			else
			{tnr_diffrence = -tnr_difr[1];}
    221e:	91 95       	neg	r25
    2220:	81 95       	neg	r24
    2222:	91 09       	sbc	r25, r1
    2224:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <tnr_diffrence+0x1>
    2228:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <tnr_diffrence>
		}
		if (tnr_diffrence==1) // distance is exactly one cell
    222c:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <tnr_diffrence>
    2230:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <tnr_diffrence+0x1>
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	b1 f4       	brne	.+44     	; 0x2264 <track_no_Rotation_calculations+0x16a>
		{
			add_to_profile_direction(0.10,05);
    2238:	45 e0       	ldi	r20, 0x05	; 5
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	6d ec       	ldi	r22, 0xCD	; 205
    223e:	7c ec       	ldi	r23, 0xCC	; 204
    2240:	8c ec       	ldi	r24, 0xCC	; 204
    2242:	9d e3       	ldi	r25, 0x3D	; 61
    2244:	0d df       	rcall	.-486    	; 0x2060 <add_to_profile_direction>
	
			add_to_profile_direction(0.15,10);
    2246:	4a e0       	ldi	r20, 0x0A	; 10
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	6a e9       	ldi	r22, 0x9A	; 154
    224c:	79 e9       	ldi	r23, 0x99	; 153
    224e:	89 e1       	ldi	r24, 0x19	; 25
    2250:	9e e3       	ldi	r25, 0x3E	; 62
    2252:	06 df       	rcall	.-500    	; 0x2060 <add_to_profile_direction>
			
			add_to_profile_direction(0.10,05);
    2254:	45 e0       	ldi	r20, 0x05	; 5
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	6d ec       	ldi	r22, 0xCD	; 205
    225a:	7c ec       	ldi	r23, 0xCC	; 204
    225c:	8c ec       	ldi	r24, 0xCC	; 204
    225e:	9d e3       	ldi	r25, 0x3D	; 61
    2260:	ff de       	rcall	.-514    	; 0x2060 <add_to_profile_direction>
    2262:	5a c0       	rjmp	.+180    	; 0x2318 <track_no_Rotation_calculations+0x21e>
		}
		else //distance is bigger than 1 cell
		{
			add_to_profile_direction(0.05,05);
    2264:	45 e0       	ldi	r20, 0x05	; 5
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	6d ec       	ldi	r22, 0xCD	; 205
    226a:	7c ec       	ldi	r23, 0xCC	; 204
    226c:	8c e4       	ldi	r24, 0x4C	; 76
    226e:	9d e3       	ldi	r25, 0x3D	; 61
    2270:	f7 de       	rcall	.-530    	; 0x2060 <add_to_profile_direction>
			
			add_to_profile_direction(0.10,05);
    2272:	45 e0       	ldi	r20, 0x05	; 5
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	6d ec       	ldi	r22, 0xCD	; 205
    2278:	7c ec       	ldi	r23, 0xCC	; 204
    227a:	8c ec       	ldi	r24, 0xCC	; 204
    227c:	9d e3       	ldi	r25, 0x3D	; 61
    227e:	f0 de       	rcall	.-544    	; 0x2060 <add_to_profile_direction>
			
			add_to_profile_direction(0.15,05);
    2280:	45 e0       	ldi	r20, 0x05	; 5
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	6a e9       	ldi	r22, 0x9A	; 154
    2286:	79 e9       	ldi	r23, 0x99	; 153
    2288:	89 e1       	ldi	r24, 0x19	; 25
    228a:	9e e3       	ldi	r25, 0x3E	; 62
    228c:	e9 de       	rcall	.-558    	; 0x2060 <add_to_profile_direction>
			
			add_to_profile_direction(0.20,05);
    228e:	45 e0       	ldi	r20, 0x05	; 5
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	6d ec       	ldi	r22, 0xCD	; 205
    2294:	7c ec       	ldi	r23, 0xCC	; 204
    2296:	8c e4       	ldi	r24, 0x4C	; 76
    2298:	9e e3       	ldi	r25, 0x3E	; 62
    229a:	e2 de       	rcall	.-572    	; 0x2060 <add_to_profile_direction>
			
			if (tnr_diffrence>2)
    229c:	40 91 15 07 	lds	r20, 0x0715	; 0x800715 <tnr_diffrence>
    22a0:	50 91 16 07 	lds	r21, 0x0716	; 0x800716 <tnr_diffrence+0x1>
    22a4:	43 30       	cpi	r20, 0x03	; 3
    22a6:	51 05       	cpc	r21, r1
    22a8:	94 f0       	brlt	.+36     	; 0x22ce <track_no_Rotation_calculations+0x1d4>
			{
				add_to_profile_direction(0.25,10*(tnr_diffrence-2));
    22aa:	42 50       	subi	r20, 0x02	; 2
    22ac:	51 09       	sbc	r21, r1
    22ae:	ca 01       	movw	r24, r20
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	44 0f       	add	r20, r20
    22b6:	55 1f       	adc	r21, r21
    22b8:	44 0f       	add	r20, r20
    22ba:	55 1f       	adc	r21, r21
    22bc:	44 0f       	add	r20, r20
    22be:	55 1f       	adc	r21, r21
    22c0:	48 0f       	add	r20, r24
    22c2:	59 1f       	adc	r21, r25
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	80 e8       	ldi	r24, 0x80	; 128
    22ca:	9e e3       	ldi	r25, 0x3E	; 62
    22cc:	c9 de       	rcall	.-622    	; 0x2060 <add_to_profile_direction>
				
			}
			add_to_profile_direction(0.20,05);
    22ce:	45 e0       	ldi	r20, 0x05	; 5
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	6d ec       	ldi	r22, 0xCD	; 205
    22d4:	7c ec       	ldi	r23, 0xCC	; 204
    22d6:	8c e4       	ldi	r24, 0x4C	; 76
    22d8:	9e e3       	ldi	r25, 0x3E	; 62
    22da:	c2 de       	rcall	.-636    	; 0x2060 <add_to_profile_direction>
			
			add_to_profile_direction(0.15,05);
    22dc:	45 e0       	ldi	r20, 0x05	; 5
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	6a e9       	ldi	r22, 0x9A	; 154
    22e2:	79 e9       	ldi	r23, 0x99	; 153
    22e4:	89 e1       	ldi	r24, 0x19	; 25
    22e6:	9e e3       	ldi	r25, 0x3E	; 62
    22e8:	bb de       	rcall	.-650    	; 0x2060 <add_to_profile_direction>
			
			add_to_profile_direction(0.10,05);
    22ea:	45 e0       	ldi	r20, 0x05	; 5
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	6d ec       	ldi	r22, 0xCD	; 205
    22f0:	7c ec       	ldi	r23, 0xCC	; 204
    22f2:	8c ec       	ldi	r24, 0xCC	; 204
    22f4:	9d e3       	ldi	r25, 0x3D	; 61
    22f6:	b4 de       	rcall	.-664    	; 0x2060 <add_to_profile_direction>
			
			add_to_profile_direction(0.05,05);
    22f8:	45 e0       	ldi	r20, 0x05	; 5
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	6d ec       	ldi	r22, 0xCD	; 205
    22fe:	7c ec       	ldi	r23, 0xCC	; 204
    2300:	8c e4       	ldi	r24, 0x4C	; 76
    2302:	9d e3       	ldi	r25, 0x3D	; 61
    2304:	ad de       	rcall	.-678    	; 0x2060 <add_to_profile_direction>
			test+=5;
    2306:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <test>
    230a:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <test+0x1>
    230e:	05 96       	adiw	r24, 0x05	; 5
    2310:	90 93 fe 07 	sts	0x07FE, r25	; 0x8007fe <test+0x1>
    2314:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <test>
		}
		tnr_i++;
    2318:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <tnr_i>
    231c:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <tnr_i+0x1>
    2320:	9c 01       	movw	r18, r24
    2322:	2f 5f       	subi	r18, 0xFF	; 255
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	30 93 18 07 	sts	0x0718, r19	; 0x800718 <tnr_i+0x1>
    232a:	20 93 17 07 	sts	0x0717, r18	; 0x800717 <tnr_i>
		if (Path[tnr_i+1][0]==-1||Path[tnr_i+1][0]==255){return;}
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	fc 01       	movw	r30, r24
    2334:	ee 58       	subi	r30, 0x8E	; 142
    2336:	fe 4f       	sbci	r31, 0xFE	; 254
    2338:	80 81       	ld	r24, Z
    233a:	8f 3f       	cpi	r24, 0xFF	; 255
    233c:	09 f0       	breq	.+2      	; 0x2340 <track_no_Rotation_calculations+0x246>
    233e:	fe ce       	rjmp	.-516    	; 0x213c <track_no_Rotation_calculations+0x42>
	}
}
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	bf 90       	pop	r11
    2352:	08 95       	ret

00002354 <track_no_Rotation>:

int track_no_Rotation()
{
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
	
	if (tnr_cntr==0)
    2360:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <tnr_cntr>
    2364:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <tnr_cntr+0x1>
    2368:	89 2b       	or	r24, r25
    236a:	09 f0       	breq	.+2      	; 0x236e <track_no_Rotation+0x1a>
    236c:	64 c0       	rjmp	.+200    	; 0x2436 <track_no_Rotation+0xe2>
	{
		if (tnr_profile_pointer==tnr_vpcntr) 
    236e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <tnr_profile_pointer>
    2372:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <tnr_profile_pointer+0x1>
    2376:	20 91 3f 0b 	lds	r18, 0x0B3F	; 0x800b3f <tnr_vpcntr>
    237a:	30 91 40 0b 	lds	r19, 0x0B40	; 0x800b40 <tnr_vpcntr+0x1>
    237e:	82 17       	cp	r24, r18
    2380:	93 07       	cpc	r25, r19
    2382:	39 f4       	brne	.+14     	; 0x2392 <track_no_Rotation+0x3e>
		{
// 			MotorStop(MOTOR_STOP_FAST);
// 			ApplyVxVy_double(0,0);
			Position[5]=0;
    2384:	e6 e3       	ldi	r30, 0x36	; 54
    2386:	f2 e0       	ldi	r31, 0x02	; 2
    2388:	15 82       	std	Z+5, r1	; 0x05
			Position[6]=0;
    238a:	16 82       	std	Z+6, r1	; 0x06
			return 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	99 c0       	rjmp	.+306    	; 0x24c4 <track_no_Rotation+0x170>
		}
		tnr_cntr=tnr_velocity_cntr_profile[tnr_profile_pointer];
    2392:	fc 01       	movw	r30, r24
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	e3 5d       	subi	r30, 0xD3	; 211
    239a:	f8 4f       	sbci	r31, 0xF8	; 248
    239c:	20 81       	ld	r18, Z
    239e:	31 81       	ldd	r19, Z+1	; 0x01
    23a0:	30 93 3e 0b 	sts	0x0B3E, r19	; 0x800b3e <tnr_cntr+0x1>
    23a4:	20 93 3d 0b 	sts	0x0B3D, r18	; 0x800b3d <tnr_cntr>
		ApplyVxVy_double(tnr_velocity_profile[tnr_profile_pointer][0],tnr_velocity_profile[tnr_profile_pointer][1]);
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	fc 01       	movw	r30, r24
    23b6:	e7 5e       	subi	r30, 0xE7	; 231
    23b8:	f7 4f       	sbci	r31, 0xF7	; 247
    23ba:	24 81       	ldd	r18, Z+4	; 0x04
    23bc:	35 81       	ldd	r19, Z+5	; 0x05
    23be:	46 81       	ldd	r20, Z+6	; 0x06
    23c0:	57 81       	ldd	r21, Z+7	; 0x07
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	0e 94 57 02 	call	0x4ae	; 0x4ae <ApplyVxVy_double>
		Position[5]=tnr_velocity_profile[tnr_profile_pointer][0]*100;
    23ce:	c0 91 23 01 	lds	r28, 0x0123	; 0x800123 <tnr_profile_pointer>
    23d2:	d0 91 24 01 	lds	r29, 0x0124	; 0x800124 <tnr_profile_pointer+0x1>
    23d6:	8e 01       	movw	r16, r28
    23d8:	00 0f       	add	r16, r16
    23da:	11 1f       	adc	r17, r17
    23dc:	00 0f       	add	r16, r16
    23de:	11 1f       	adc	r17, r17
    23e0:	00 0f       	add	r16, r16
    23e2:	11 1f       	adc	r17, r17
    23e4:	07 5e       	subi	r16, 0xE7	; 231
    23e6:	17 4f       	sbci	r17, 0xF7	; 247
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	48 ec       	ldi	r20, 0xC8	; 200
    23ee:	52 e4       	ldi	r21, 0x42	; 66
    23f0:	f8 01       	movw	r30, r16
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    23fe:	d7 d7       	rcall	.+4014   	; 0x33ae <__fixunssfsi>
    2400:	0f 2e       	mov	r0, r31
    2402:	f6 e3       	ldi	r31, 0x36	; 54
    2404:	ef 2e       	mov	r14, r31
    2406:	f2 e0       	ldi	r31, 0x02	; 2
    2408:	ff 2e       	mov	r15, r31
    240a:	f0 2d       	mov	r31, r0
    240c:	f7 01       	movw	r30, r14
    240e:	65 83       	std	Z+5, r22	; 0x05
		Position[6]=tnr_velocity_profile[tnr_profile_pointer][1]*100;
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	48 ec       	ldi	r20, 0xC8	; 200
    2416:	52 e4       	ldi	r21, 0x42	; 66
    2418:	f8 01       	movw	r30, r16
    241a:	64 81       	ldd	r22, Z+4	; 0x04
    241c:	75 81       	ldd	r23, Z+5	; 0x05
    241e:	86 81       	ldd	r24, Z+6	; 0x06
    2420:	97 81       	ldd	r25, Z+7	; 0x07
    2422:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    2426:	c3 d7       	rcall	.+3974   	; 0x33ae <__fixunssfsi>
    2428:	f7 01       	movw	r30, r14
    242a:	66 83       	std	Z+6, r22	; 0x06
		tnr_profile_pointer++;
    242c:	21 96       	adiw	r28, 0x01	; 1
    242e:	d0 93 24 01 	sts	0x0124, r29	; 0x800124 <tnr_profile_pointer+0x1>
    2432:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <tnr_profile_pointer>
	}
	tnr_cntr--;
    2436:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <tnr_cntr>
    243a:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <tnr_cntr+0x1>
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	90 93 3e 0b 	sts	0x0B3E, r25	; 0x800b3e <tnr_cntr+0x1>
    2444:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <tnr_cntr>
	current_position[0]+=0.1*tnr_velocity_profile[tnr_profile_pointer-1][0];
    2448:	c0 91 23 01 	lds	r28, 0x0123	; 0x800123 <tnr_profile_pointer>
    244c:	d0 91 24 01 	lds	r29, 0x0124	; 0x800124 <tnr_profile_pointer+0x1>
    2450:	0b e0       	ldi	r16, 0x0B	; 11
    2452:	18 e0       	ldi	r17, 0x08	; 8
    2454:	cc 0f       	add	r28, r28
    2456:	dd 1f       	adc	r29, r29
    2458:	cc 0f       	add	r28, r28
    245a:	dd 1f       	adc	r29, r29
    245c:	cc 0f       	add	r28, r28
    245e:	dd 1f       	adc	r29, r29
    2460:	cf 5e       	subi	r28, 0xEF	; 239
    2462:	d7 4f       	sbci	r29, 0xF7	; 247
    2464:	2d ec       	ldi	r18, 0xCD	; 205
    2466:	3c ec       	ldi	r19, 0xCC	; 204
    2468:	4c ec       	ldi	r20, 0xCC	; 204
    246a:	5d e3       	ldi	r21, 0x3D	; 61
    246c:	68 81       	ld	r22, Y
    246e:	79 81       	ldd	r23, Y+1	; 0x01
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	9b 81       	ldd	r25, Y+3	; 0x03
    2474:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    2478:	9b 01       	movw	r18, r22
    247a:	ac 01       	movw	r20, r24
    247c:	f8 01       	movw	r30, r16
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	a8 d6       	rcall	.+3408   	; 0x31d8 <__addsf3>
    2488:	f8 01       	movw	r30, r16
    248a:	60 83       	st	Z, r22
    248c:	71 83       	std	Z+1, r23	; 0x01
    248e:	82 83       	std	Z+2, r24	; 0x02
    2490:	93 83       	std	Z+3, r25	; 0x03
	current_position[1]+=0.1*tnr_velocity_profile[tnr_profile_pointer-1][1];
    2492:	2d ec       	ldi	r18, 0xCD	; 205
    2494:	3c ec       	ldi	r19, 0xCC	; 204
    2496:	4c ec       	ldi	r20, 0xCC	; 204
    2498:	5d e3       	ldi	r21, 0x3D	; 61
    249a:	6c 81       	ldd	r22, Y+4	; 0x04
    249c:	7d 81       	ldd	r23, Y+5	; 0x05
    249e:	8e 81       	ldd	r24, Y+6	; 0x06
    24a0:	9f 81       	ldd	r25, Y+7	; 0x07
    24a2:	0e 94 32 1b 	call	0x3664	; 0x3664 <__mulsf3>
    24a6:	9b 01       	movw	r18, r22
    24a8:	ac 01       	movw	r20, r24
    24aa:	f8 01       	movw	r30, r16
    24ac:	64 81       	ldd	r22, Z+4	; 0x04
    24ae:	75 81       	ldd	r23, Z+5	; 0x05
    24b0:	86 81       	ldd	r24, Z+6	; 0x06
    24b2:	97 81       	ldd	r25, Z+7	; 0x07
    24b4:	91 d6       	rcall	.+3362   	; 0x31d8 <__addsf3>
    24b6:	f8 01       	movw	r30, r16
    24b8:	64 83       	std	Z+4, r22	; 0x04
    24ba:	75 83       	std	Z+5, r23	; 0x05
    24bc:	86 83       	std	Z+6, r24	; 0x06
    24be:	97 83       	std	Z+7, r25	; 0x07
	return 0;
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
}
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	08 95       	ret

000024d2 <tr_add_to_profile>:
double tr_profile [100][2] ;
int tr_profile_details [100][2] ; //[time slots required , applied j]
int tr_profile_cntr , tr_profile_it; 
void tr_add_to_profile (double V , double w , int slots )
{
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
	tr_profile[tr_profile_cntr][0]=V;
    24d6:	a0 91 39 0b 	lds	r26, 0x0B39	; 0x800b39 <tr_profile_cntr>
    24da:	b0 91 3a 0b 	lds	r27, 0x0B3A	; 0x800b3a <tr_profile_cntr+0x1>
    24de:	fd 01       	movw	r30, r26
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	ee 0f       	add	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	e1 5a       	subi	r30, 0xA1	; 161
    24ee:	fd 4f       	sbci	r31, 0xFD	; 253
    24f0:	60 83       	st	Z, r22
    24f2:	71 83       	std	Z+1, r23	; 0x01
    24f4:	82 83       	std	Z+2, r24	; 0x02
    24f6:	93 83       	std	Z+3, r25	; 0x03
	tr_profile[tr_profile_cntr][1]=w;
    24f8:	24 83       	std	Z+4, r18	; 0x04
    24fa:	35 83       	std	Z+5, r19	; 0x05
    24fc:	46 83       	std	Z+6, r20	; 0x06
    24fe:	57 83       	std	Z+7, r21	; 0x07
	tr_profile_details[tr_profile_cntr][0]=slots;
    2500:	fd 01       	movw	r30, r26
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	e1 58       	subi	r30, 0x81	; 129
    250c:	fa 4f       	sbci	r31, 0xFA	; 250
    250e:	11 83       	std	Z+1, r17	; 0x01
    2510:	00 83       	st	Z, r16
	tr_profile_details[tr_profile_cntr][1]=j;
    2512:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <j>
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	33 83       	std	Z+3, r19	; 0x03
    251a:	22 83       	std	Z+2, r18	; 0x02
	tr_profile_cntr++;
    251c:	cd 01       	movw	r24, r26
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	90 93 3a 0b 	sts	0x0B3A, r25	; 0x800b3a <tr_profile_cntr+0x1>
    2524:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <tr_profile_cntr>
}
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	08 95       	ret

0000252e <tr_add_to_profile_end_after_OA>:
void tr_add_to_profile_end_after_OA(char Y)
{
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
	if (Y==0)
    2532:	81 11       	cpse	r24, r1
    2534:	0a c0       	rjmp	.+20     	; 0x254a <tr_add_to_profile_end_after_OA+0x1c>
		{tr_add_to_profile(1.0,1.0,1);}
    2536:	01 e0       	ldi	r16, 0x01	; 1
    2538:	10 e0       	ldi	r17, 0x00	; 0
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	ca 01       	movw	r24, r20
    2544:	b9 01       	movw	r22, r18
    2546:	c5 df       	rcall	.-118    	; 0x24d2 <tr_add_to_profile>
    2548:	0b c0       	rjmp	.+22     	; 0x2560 <tr_add_to_profile_end_after_OA+0x32>
	else if (Y==1)
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	49 f4       	brne	.+18     	; 0x2560 <tr_add_to_profile_end_after_OA+0x32>
	{
		tr_add_to_profile(2.0,2.0,2);
    254e:	02 e0       	ldi	r16, 0x02	; 2
    2550:	10 e0       	ldi	r17, 0x00	; 0
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	50 e4       	ldi	r21, 0x40	; 64
    255a:	ca 01       	movw	r24, r20
    255c:	b9 01       	movw	r22, r18
    255e:	b9 df       	rcall	.-142    	; 0x24d2 <tr_add_to_profile>
	}
}
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	08 95       	ret

00002566 <check_end_after_OA>:
int check_end_after_OA ()
{
    2566:	cf 92       	push	r12
    2568:	df 92       	push	r13
    256a:	ef 92       	push	r14
    256c:	ff 92       	push	r15
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
	if (tr_profile[tr_profile_it][0]==1.0&&tr_profile[tr_profile_it][1]==1.0&&tr_profile_details[tr_profile_it][0]==1) return 1 ;
    2572:	c0 91 5d 02 	lds	r28, 0x025D	; 0x80025d <tr_profile_it>
    2576:	d0 91 5e 02 	lds	r29, 0x025E	; 0x80025e <tr_profile_it+0x1>
    257a:	fe 01       	movw	r30, r28
    257c:	ee 0f       	add	r30, r30
    257e:	ff 1f       	adc	r31, r31
    2580:	ee 0f       	add	r30, r30
    2582:	ff 1f       	adc	r31, r31
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	e1 5a       	subi	r30, 0xA1	; 161
    258a:	fd 4f       	sbci	r31, 0xFD	; 253
    258c:	c0 80       	ld	r12, Z
    258e:	d1 80       	ldd	r13, Z+1	; 0x01
    2590:	e2 80       	ldd	r14, Z+2	; 0x02
    2592:	f3 80       	ldd	r15, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	c7 01       	movw	r24, r14
    259e:	b6 01       	movw	r22, r12
    25a0:	92 d6       	rcall	.+3364   	; 0x32c6 <__cmpsf2>
    25a2:	81 11       	cpse	r24, r1
    25a4:	24 c0       	rjmp	.+72     	; 0x25ee <check_end_after_OA+0x88>
    25a6:	fe 01       	movw	r30, r28
    25a8:	ee 0f       	add	r30, r30
    25aa:	ff 1f       	adc	r31, r31
    25ac:	ee 0f       	add	r30, r30
    25ae:	ff 1f       	adc	r31, r31
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	e1 5a       	subi	r30, 0xA1	; 161
    25b6:	fd 4f       	sbci	r31, 0xFD	; 253
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	64 81       	ldd	r22, Z+4	; 0x04
    25c2:	75 81       	ldd	r23, Z+5	; 0x05
    25c4:	86 81       	ldd	r24, Z+6	; 0x06
    25c6:	97 81       	ldd	r25, Z+7	; 0x07
    25c8:	7e d6       	rcall	.+3324   	; 0x32c6 <__cmpsf2>
    25ca:	81 11       	cpse	r24, r1
    25cc:	39 c0       	rjmp	.+114    	; 0x2640 <check_end_after_OA+0xda>
    25ce:	cc 0f       	add	r28, r28
    25d0:	dd 1f       	adc	r29, r29
    25d2:	cc 0f       	add	r28, r28
    25d4:	dd 1f       	adc	r29, r29
    25d6:	c1 58       	subi	r28, 0x81	; 129
    25d8:	da 4f       	sbci	r29, 0xFA	; 250
    25da:	31 e0       	ldi	r19, 0x01	; 1
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	88 81       	ld	r24, Y
    25e0:	99 81       	ldd	r25, Y+1	; 0x01
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <check_end_after_OA+0x82>
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	83 2f       	mov	r24, r19
    25ea:	92 2f       	mov	r25, r18
    25ec:	34 c0       	rjmp	.+104    	; 0x2656 <check_end_after_OA+0xf0>
	else if (tr_profile[tr_profile_it][0]==2.0&&tr_profile[tr_profile_it][1]==2.0&&tr_profile_details[tr_profile_it][0]==2) return 2 ;
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	50 e4       	ldi	r21, 0x40	; 64
    25f6:	c7 01       	movw	r24, r14
    25f8:	b6 01       	movw	r22, r12
    25fa:	65 d6       	rcall	.+3274   	; 0x32c6 <__cmpsf2>
    25fc:	81 11       	cpse	r24, r1
    25fe:	23 c0       	rjmp	.+70     	; 0x2646 <check_end_after_OA+0xe0>
    2600:	fe 01       	movw	r30, r28
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	e1 5a       	subi	r30, 0xA1	; 161
    2610:	fd 4f       	sbci	r31, 0xFD	; 253
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	50 e4       	ldi	r21, 0x40	; 64
    261a:	64 81       	ldd	r22, Z+4	; 0x04
    261c:	75 81       	ldd	r23, Z+5	; 0x05
    261e:	86 81       	ldd	r24, Z+6	; 0x06
    2620:	97 81       	ldd	r25, Z+7	; 0x07
    2622:	51 d6       	rcall	.+3234   	; 0x32c6 <__cmpsf2>
    2624:	81 11       	cpse	r24, r1
    2626:	12 c0       	rjmp	.+36     	; 0x264c <check_end_after_OA+0xe6>
    2628:	cc 0f       	add	r28, r28
    262a:	dd 1f       	adc	r29, r29
    262c:	cc 0f       	add	r28, r28
    262e:	dd 1f       	adc	r29, r29
    2630:	c1 58       	subi	r28, 0x81	; 129
    2632:	da 4f       	sbci	r29, 0xFA	; 250
    2634:	88 81       	ld	r24, Y
    2636:	99 81       	ldd	r25, Y+1	; 0x01
    2638:	82 30       	cpi	r24, 0x02	; 2
    263a:	91 05       	cpc	r25, r1
    263c:	51 f4       	brne	.+20     	; 0x2652 <check_end_after_OA+0xec>
    263e:	0b c0       	rjmp	.+22     	; 0x2656 <check_end_after_OA+0xf0>
	return 0 ;
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	08 c0       	rjmp	.+16     	; 0x2656 <check_end_after_OA+0xf0>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <check_end_after_OA+0xf0>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <check_end_after_OA+0xf0>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
}
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	08 95       	ret

00002664 <modify_after_OA>:
void modify_after_OA(char OutofPath)
{
    2664:	3f 92       	push	r3
    2666:	4f 92       	push	r4
    2668:	5f 92       	push	r5
    266a:	6f 92       	push	r6
    266c:	7f 92       	push	r7
    266e:	8f 92       	push	r8
    2670:	9f 92       	push	r9
    2672:	af 92       	push	r10
    2674:	bf 92       	push	r11
    2676:	cf 92       	push	r12
    2678:	df 92       	push	r13
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	38 2e       	mov	r3, r24
	t_OA=1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <t_OA>
	tr_profile_cntr=0;
    268e:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <tr_profile_cntr+0x1>
    2692:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <tr_profile_cntr>
	tr_profile_it=-1; //incremented first befour being used
    2696:	8f ef       	ldi	r24, 0xFF	; 255
    2698:	9f ef       	ldi	r25, 0xFF	; 255
    269a:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <tr_profile_it+0x1>
    269e:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <tr_profile_it>
	t_cntr=0;
    26a2:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <t_cntr+0x1>
    26a6:	10 92 45 0b 	sts	0x0B45, r1	; 0x800b45 <t_cntr>
	t_P[0][0] =current_cell[0]*cell_L;
    26aa:	c9 e1       	ldi	r28, 0x19	; 25
    26ac:	d7 e0       	ldi	r29, 0x07	; 7
    26ae:	01 e5       	ldi	r16, 0x51	; 81
    26b0:	12 e0       	ldi	r17, 0x02	; 2
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5e e3       	ldi	r21, 0x3E	; 62
    26ba:	f8 01       	movw	r30, r16
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	cf d7       	rcall	.+3998   	; 0x3664 <__mulsf3>
    26c6:	68 83       	st	Y, r22
    26c8:	79 83       	std	Y+1, r23	; 0x01
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	9b 83       	std	Y+3, r25	; 0x03
	t_P[0][1] =current_cell[1]*cell_L;
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e8       	ldi	r20, 0x80	; 128
    26d4:	5e e3       	ldi	r21, 0x3E	; 62
    26d6:	f8 01       	movw	r30, r16
    26d8:	64 81       	ldd	r22, Z+4	; 0x04
    26da:	75 81       	ldd	r23, Z+5	; 0x05
    26dc:	86 81       	ldd	r24, Z+6	; 0x06
    26de:	97 81       	ldd	r25, Z+7	; 0x07
    26e0:	c1 d7       	rcall	.+3970   	; 0x3664 <__mulsf3>
    26e2:	6c 83       	std	Y+4, r22	; 0x04
    26e4:	7d 83       	std	Y+5, r23	; 0x05
    26e6:	8e 83       	std	Y+6, r24	; 0x06
    26e8:	9f 83       	std	Y+7, r25	; 0x07
	t_P[1][0] =PointFromOA[0]*cell_L;
    26ea:	08 e6       	ldi	r16, 0x68	; 104
    26ec:	11 e0       	ldi	r17, 0x01	; 1
    26ee:	f8 01       	movw	r30, r16
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	07 2e       	mov	r0, r23
    26f6:	00 0c       	add	r0, r0
    26f8:	88 0b       	sbc	r24, r24
    26fa:	99 0b       	sbc	r25, r25
    26fc:	86 d6       	rcall	.+3340   	; 0x340a <__floatsisf>
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5e e3       	ldi	r21, 0x3E	; 62
    2706:	ae d7       	rcall	.+3932   	; 0x3664 <__mulsf3>
    2708:	68 87       	std	Y+8, r22	; 0x08
    270a:	79 87       	std	Y+9, r23	; 0x09
    270c:	8a 87       	std	Y+10, r24	; 0x0a
    270e:	9b 87       	std	Y+11, r25	; 0x0b
	t_P[1][1] =PointFromOA[1]*cell_L;
    2710:	f8 01       	movw	r30, r16
    2712:	62 81       	ldd	r22, Z+2	; 0x02
    2714:	73 81       	ldd	r23, Z+3	; 0x03
    2716:	07 2e       	mov	r0, r23
    2718:	00 0c       	add	r0, r0
    271a:	88 0b       	sbc	r24, r24
    271c:	99 0b       	sbc	r25, r25
    271e:	75 d6       	rcall	.+3306   	; 0x340a <__floatsisf>
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5e e3       	ldi	r21, 0x3E	; 62
    2728:	9d d7       	rcall	.+3898   	; 0x3664 <__mulsf3>
    272a:	6c 87       	std	Y+12, r22	; 0x0c
    272c:	7d 87       	std	Y+13, r23	; 0x0d
    272e:	8e 87       	std	Y+14, r24	; 0x0e
    2730:	9f 87       	std	Y+15, r25	; 0x0f
	t_direction_nxt = get_direction(t_P[0],t_P[1]);
    2732:	61 e2       	ldi	r22, 0x21	; 33
    2734:	77 e0       	ldi	r23, 0x07	; 7
    2736:	ce 01       	movw	r24, r28
    2738:	89 db       	rcall	.-2286   	; 0x1e4c <get_direction>
    273a:	9c 01       	movw	r18, r24
    273c:	90 93 3c 0b 	sts	0x0B3C, r25	; 0x800b3c <t_direction_nxt+0x1>
    2740:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <t_direction_nxt>
	t_direction_difr = t_direction_nxt - t_direction ;
    2744:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <t_direction>
    2748:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <t_direction+0x1>
    274c:	28 1b       	sub	r18, r24
    274e:	39 0b       	sbc	r19, r25
	if (t_direction_difr<-3) t_direction_difr += 8 ;
    2750:	2d 3f       	cpi	r18, 0xFD	; 253
    2752:	ff ef       	ldi	r31, 0xFF	; 255
    2754:	3f 07       	cpc	r19, r31
    2756:	2c f0       	brlt	.+10     	; 0x2762 <modify_after_OA+0xfe>
	t_P[0][0] =current_cell[0]*cell_L;
	t_P[0][1] =current_cell[1]*cell_L;
	t_P[1][0] =PointFromOA[0]*cell_L;
	t_P[1][1] =PointFromOA[1]*cell_L;
	t_direction_nxt = get_direction(t_P[0],t_P[1]);
	t_direction_difr = t_direction_nxt - t_direction ;
    2758:	30 93 18 08 	sts	0x0818, r19	; 0x800818 <t_direction_difr+0x1>
    275c:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <t_direction_difr>
    2760:	06 c0       	rjmp	.+12     	; 0x276e <modify_after_OA+0x10a>
	if (t_direction_difr<-3) t_direction_difr += 8 ;
    2762:	28 5f       	subi	r18, 0xF8	; 248
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	30 93 18 08 	sts	0x0818, r19	; 0x800818 <t_direction_difr+0x1>
    276a:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <t_direction_difr>
	if (t_direction_difr>4) t_direction_difr -= 8 ;
    276e:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <t_direction_difr>
    2772:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <t_direction_difr+0x1>
    2776:	85 30       	cpi	r24, 0x05	; 5
    2778:	91 05       	cpc	r25, r1
    277a:	2c f0       	brlt	.+10     	; 0x2786 <modify_after_OA+0x122>
    277c:	08 97       	sbiw	r24, 0x08	; 8
    277e:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <t_direction_difr+0x1>
    2782:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <t_direction_difr>
	if(t_direction_difr>0) tr_add_to_profile(0, M_PI/4 , t_direction_difr*10);
    2786:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <t_direction_difr>
    278a:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <t_direction_difr+0x1>
    278e:	12 16       	cp	r1, r18
    2790:	13 06       	cpc	r1, r19
    2792:	a4 f4       	brge	.+40     	; 0x27bc <modify_after_OA+0x158>
    2794:	89 01       	movw	r16, r18
    2796:	00 0f       	add	r16, r16
    2798:	11 1f       	adc	r17, r17
    279a:	22 0f       	add	r18, r18
    279c:	33 1f       	adc	r19, r19
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	22 0f       	add	r18, r18
    27a4:	33 1f       	adc	r19, r19
    27a6:	02 0f       	add	r16, r18
    27a8:	13 1f       	adc	r17, r19
    27aa:	2b ed       	ldi	r18, 0xDB	; 219
    27ac:	3f e0       	ldi	r19, 0x0F	; 15
    27ae:	49 e4       	ldi	r20, 0x49	; 73
    27b0:	5f e3       	ldi	r21, 0x3F	; 63
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	cb 01       	movw	r24, r22
    27b8:	8c de       	rcall	.-744    	; 0x24d2 <tr_add_to_profile>
    27ba:	10 c0       	rjmp	.+32     	; 0x27dc <modify_after_OA+0x178>
	else  if (t_direction_difr<0)tr_add_to_profile(0, -M_PI/4 , -t_direction_difr*10);
    27bc:	33 23       	and	r19, r19
    27be:	74 f4       	brge	.+28     	; 0x27dc <modify_after_OA+0x178>
    27c0:	46 ef       	ldi	r20, 0xF6	; 246
    27c2:	42 03       	mulsu	r20, r18
    27c4:	80 01       	movw	r16, r0
    27c6:	43 9f       	mul	r20, r19
    27c8:	10 0d       	add	r17, r0
    27ca:	11 24       	eor	r1, r1
    27cc:	2b ed       	ldi	r18, 0xDB	; 219
    27ce:	3f e0       	ldi	r19, 0x0F	; 15
    27d0:	49 e4       	ldi	r20, 0x49	; 73
    27d2:	5f eb       	ldi	r21, 0xBF	; 191
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	cb 01       	movw	r24, r22
    27da:	7b de       	rcall	.-778    	; 0x24d2 <tr_add_to_profile>
	t_r=sqrt(((t_P[1][0]-t_P[0][0])*(t_P[1][0]-t_P[0][0]))+((t_P[1][1]-t_P[0][1])*(t_P[1][1]-t_P[0][1])));
    27dc:	c9 e1       	ldi	r28, 0x19	; 25
    27de:	d7 e0       	ldi	r29, 0x07	; 7
    27e0:	28 81       	ld	r18, Y
    27e2:	39 81       	ldd	r19, Y+1	; 0x01
    27e4:	4a 81       	ldd	r20, Y+2	; 0x02
    27e6:	5b 81       	ldd	r21, Y+3	; 0x03
    27e8:	68 85       	ldd	r22, Y+8	; 0x08
    27ea:	79 85       	ldd	r23, Y+9	; 0x09
    27ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    27f0:	f2 d4       	rcall	.+2532   	; 0x31d6 <__subsf3>
    27f2:	4b 01       	movw	r8, r22
    27f4:	5c 01       	movw	r10, r24
    27f6:	2c 81       	ldd	r18, Y+4	; 0x04
    27f8:	3d 81       	ldd	r19, Y+5	; 0x05
    27fa:	4e 81       	ldd	r20, Y+6	; 0x06
    27fc:	5f 81       	ldd	r21, Y+7	; 0x07
    27fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2800:	7d 85       	ldd	r23, Y+13	; 0x0d
    2802:	8e 85       	ldd	r24, Y+14	; 0x0e
    2804:	9f 85       	ldd	r25, Y+15	; 0x0f
    2806:	e7 d4       	rcall	.+2510   	; 0x31d6 <__subsf3>
    2808:	6b 01       	movw	r12, r22
    280a:	7c 01       	movw	r14, r24
    280c:	a5 01       	movw	r20, r10
    280e:	94 01       	movw	r18, r8
    2810:	c5 01       	movw	r24, r10
    2812:	b4 01       	movw	r22, r8
    2814:	27 d7       	rcall	.+3662   	; 0x3664 <__mulsf3>
    2816:	4b 01       	movw	r8, r22
    2818:	5c 01       	movw	r10, r24
    281a:	a7 01       	movw	r20, r14
    281c:	96 01       	movw	r18, r12
    281e:	c7 01       	movw	r24, r14
    2820:	b6 01       	movw	r22, r12
    2822:	20 d7       	rcall	.+3648   	; 0x3664 <__mulsf3>
    2824:	9b 01       	movw	r18, r22
    2826:	ac 01       	movw	r20, r24
    2828:	c5 01       	movw	r24, r10
    282a:	b4 01       	movw	r22, r8
    282c:	d5 d4       	rcall	.+2474   	; 0x31d8 <__addsf3>
    282e:	a7 d7       	rcall	.+3918   	; 0x377e <sqrt>
    2830:	60 93 ff 07 	sts	0x07FF, r22	; 0x8007ff <t_r>
    2834:	70 93 00 08 	sts	0x0800, r23	; 0x800800 <t_r+0x1>
    2838:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <t_r+0x2>
    283c:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <t_r+0x3>
	if(t_direction_nxt%2==0)
    2840:	10 91 3b 0b 	lds	r17, 0x0B3B	; 0x800b3b <t_direction_nxt>
    2844:	f0 90 3c 0b 	lds	r15, 0x0B3C	; 0x800b3c <t_direction_nxt+0x1>
    2848:	10 fd       	sbrc	r17, 0
    284a:	18 c0       	rjmp	.+48     	; 0x287c <modify_after_OA+0x218>
	t_cntr_forward=round(10*t_r/Kv);
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	07 d7       	rcall	.+3598   	; 0x3664 <__mulsf3>
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	50 e4       	ldi	r21, 0x40	; 64
    285e:	02 d7       	rcall	.+3588   	; 0x3664 <__mulsf3>
    2860:	64 d7       	rcall	.+3784   	; 0x372a <round>
    2862:	a0 d5       	rcall	.+2880   	; 0x33a4 <__fixsfsi>
    2864:	70 93 14 07 	sts	0x0714, r23	; 0x800714 <t_cntr_forward+0x1>
    2868:	60 93 13 07 	sts	0x0713, r22	; 0x800713 <t_cntr_forward>
	else
	t_cntr_forward=round(10*t_r/(sqrtof2devided*Kv));
	t_direction=t_direction_nxt;
    286c:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <t_direction>
    2870:	f0 92 2b 01 	sts	0x012B, r15	; 0x80012b <t_direction+0x1>
	if (t_cntr_forward!=0)
    2874:	61 15       	cp	r22, r1
    2876:	71 05       	cpc	r23, r1
    2878:	c9 f4       	brne	.+50     	; 0x28ac <modify_after_OA+0x248>
    287a:	2b c0       	rjmp	.+86     	; 0x28d2 <modify_after_OA+0x26e>
	else  if (t_direction_difr<0)tr_add_to_profile(0, -M_PI/4 , -t_direction_difr*10);
	t_r=sqrt(((t_P[1][0]-t_P[0][0])*(t_P[1][0]-t_P[0][0]))+((t_P[1][1]-t_P[0][1])*(t_P[1][1]-t_P[0][1])));
	if(t_direction_nxt%2==0)
	t_cntr_forward=round(10*t_r/Kv);
	else
	t_cntr_forward=round(10*t_r/(sqrtof2devided*Kv));
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	ef d6       	rcall	.+3550   	; 0x3664 <__mulsf3>
    2886:	2e ea       	ldi	r18, 0xAE	; 174
    2888:	3c e4       	ldi	r19, 0x4C	; 76
    288a:	41 e8       	ldi	r20, 0x81	; 129
    288c:	5e e3       	ldi	r21, 0x3E	; 62
    288e:	22 d5       	rcall	.+2628   	; 0x32d4 <__divsf3>
    2890:	4c d7       	rcall	.+3736   	; 0x372a <round>
    2892:	88 d5       	rcall	.+2832   	; 0x33a4 <__fixsfsi>
    2894:	70 93 14 07 	sts	0x0714, r23	; 0x800714 <t_cntr_forward+0x1>
    2898:	60 93 13 07 	sts	0x0713, r22	; 0x800713 <t_cntr_forward>
	t_direction=t_direction_nxt;
    289c:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <t_direction>
    28a0:	f0 92 2b 01 	sts	0x012B, r15	; 0x80012b <t_direction+0x1>
	if (t_cntr_forward!=0)
    28a4:	61 15       	cp	r22, r1
    28a6:	71 05       	cpc	r23, r1
    28a8:	59 f4       	brne	.+22     	; 0x28c0 <modify_after_OA+0x25c>
    28aa:	13 c0       	rjmp	.+38     	; 0x28d2 <modify_after_OA+0x26e>
	{
		if (t_direction%2==0) //  left , up , right , down
		tr_add_to_profile(Kv,0,t_cntr_forward);
    28ac:	8b 01       	movw	r16, r22
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	a9 01       	movw	r20, r18
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	80 e8       	ldi	r24, 0x80	; 128
    28ba:	9e e3       	ldi	r25, 0x3E	; 62
    28bc:	0a de       	rcall	.-1004   	; 0x24d2 <tr_add_to_profile>
    28be:	09 c0       	rjmp	.+18     	; 0x28d2 <modify_after_OA+0x26e>
		else // other directions
		tr_add_to_profile(sqrtof2devided*Kv,0,t_cntr_forward);
    28c0:	8b 01       	movw	r16, r22
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	a9 01       	movw	r20, r18
    28c8:	6e ea       	ldi	r22, 0xAE	; 174
    28ca:	7c e4       	ldi	r23, 0x4C	; 76
    28cc:	81 e8       	ldi	r24, 0x81	; 129
    28ce:	9e e3       	ldi	r25, 0x3E	; 62
    28d0:	00 de       	rcall	.-1024   	; 0x24d2 <tr_add_to_profile>
	}
	t_direction_nxt = PointFromOA[2] ;
    28d2:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <PointFromOA+0x4>
    28d6:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <PointFromOA+0x5>
    28da:	30 93 3c 0b 	sts	0x0B3C, r19	; 0x800b3c <t_direction_nxt+0x1>
    28de:	20 93 3b 0b 	sts	0x0B3B, r18	; 0x800b3b <t_direction_nxt>
	t_direction_difr = t_direction_nxt - t_direction ;
    28e2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <t_direction>
    28e6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <t_direction+0x1>
    28ea:	28 1b       	sub	r18, r24
    28ec:	39 0b       	sbc	r19, r25
	if (t_direction_difr<-3) t_direction_difr += 8 ;
    28ee:	2d 3f       	cpi	r18, 0xFD	; 253
    28f0:	8f ef       	ldi	r24, 0xFF	; 255
    28f2:	38 07       	cpc	r19, r24
    28f4:	2c f0       	brlt	.+10     	; 0x2900 <modify_after_OA+0x29c>
		tr_add_to_profile(Kv,0,t_cntr_forward);
		else // other directions
		tr_add_to_profile(sqrtof2devided*Kv,0,t_cntr_forward);
	}
	t_direction_nxt = PointFromOA[2] ;
	t_direction_difr = t_direction_nxt - t_direction ;
    28f6:	30 93 18 08 	sts	0x0818, r19	; 0x800818 <t_direction_difr+0x1>
    28fa:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <t_direction_difr>
    28fe:	06 c0       	rjmp	.+12     	; 0x290c <modify_after_OA+0x2a8>
	if (t_direction_difr<-3) t_direction_difr += 8 ;
    2900:	28 5f       	subi	r18, 0xF8	; 248
    2902:	3f 4f       	sbci	r19, 0xFF	; 255
    2904:	30 93 18 08 	sts	0x0818, r19	; 0x800818 <t_direction_difr+0x1>
    2908:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <t_direction_difr>
	if (t_direction_difr>4) t_direction_difr -= 8 ;
    290c:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <t_direction_difr>
    2910:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <t_direction_difr+0x1>
    2914:	85 30       	cpi	r24, 0x05	; 5
    2916:	91 05       	cpc	r25, r1
    2918:	2c f0       	brlt	.+10     	; 0x2924 <modify_after_OA+0x2c0>
    291a:	08 97       	sbiw	r24, 0x08	; 8
    291c:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <t_direction_difr+0x1>
    2920:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <t_direction_difr>
	if(t_direction_difr>0) tr_add_to_profile(0, M_PI/4 , t_direction_difr*10);
    2924:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <t_direction_difr>
    2928:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <t_direction_difr+0x1>
    292c:	12 16       	cp	r1, r18
    292e:	13 06       	cpc	r1, r19
    2930:	a4 f4       	brge	.+40     	; 0x295a <modify_after_OA+0x2f6>
    2932:	89 01       	movw	r16, r18
    2934:	00 0f       	add	r16, r16
    2936:	11 1f       	adc	r17, r17
    2938:	22 0f       	add	r18, r18
    293a:	33 1f       	adc	r19, r19
    293c:	22 0f       	add	r18, r18
    293e:	33 1f       	adc	r19, r19
    2940:	22 0f       	add	r18, r18
    2942:	33 1f       	adc	r19, r19
    2944:	02 0f       	add	r16, r18
    2946:	13 1f       	adc	r17, r19
    2948:	2b ed       	ldi	r18, 0xDB	; 219
    294a:	3f e0       	ldi	r19, 0x0F	; 15
    294c:	49 e4       	ldi	r20, 0x49	; 73
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	cb 01       	movw	r24, r22
    2956:	bd dd       	rcall	.-1158   	; 0x24d2 <tr_add_to_profile>
    2958:	10 c0       	rjmp	.+32     	; 0x297a <modify_after_OA+0x316>
	else if (t_direction_difr<0) tr_add_to_profile(0, -M_PI/4 , -t_direction_difr*10);
    295a:	33 23       	and	r19, r19
    295c:	74 f4       	brge	.+28     	; 0x297a <modify_after_OA+0x316>
    295e:	46 ef       	ldi	r20, 0xF6	; 246
    2960:	42 03       	mulsu	r20, r18
    2962:	80 01       	movw	r16, r0
    2964:	43 9f       	mul	r20, r19
    2966:	10 0d       	add	r17, r0
    2968:	11 24       	eor	r1, r1
    296a:	2b ed       	ldi	r18, 0xDB	; 219
    296c:	3f e0       	ldi	r19, 0x0F	; 15
    296e:	49 e4       	ldi	r20, 0x49	; 73
    2970:	5f eb       	ldi	r21, 0xBF	; 191
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	cb 01       	movw	r24, r22
    2978:	ac dd       	rcall	.-1192   	; 0x24d2 <tr_add_to_profile>
	tr_add_to_profile_end_after_OA(OutofPath);
    297a:	83 2d       	mov	r24, r3
    297c:	d8 dd       	rcall	.-1104   	; 0x252e <tr_add_to_profile_end_after_OA>
}
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	cf 90       	pop	r12
    298e:	bf 90       	pop	r11
    2990:	af 90       	pop	r10
    2992:	9f 90       	pop	r9
    2994:	8f 90       	pop	r8
    2996:	7f 90       	pop	r7
    2998:	6f 90       	pop	r6
    299a:	5f 90       	pop	r5
    299c:	4f 90       	pop	r4
    299e:	3f 90       	pop	r3
    29a0:	08 95       	ret

000029a2 <track_calc>:
void track_calc ()
{
    29a2:	2f 92       	push	r2
    29a4:	3f 92       	push	r3
    29a6:	4f 92       	push	r4
    29a8:	5f 92       	push	r5
    29aa:	6f 92       	push	r6
    29ac:	7f 92       	push	r7
    29ae:	8f 92       	push	r8
    29b0:	9f 92       	push	r9
    29b2:	af 92       	push	r10
    29b4:	bf 92       	push	r11
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
	tr_profile_cntr=0;
    29c6:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <tr_profile_cntr+0x1>
    29ca:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <tr_profile_cntr>
	tr_profile_it=-1; //incremented first befour being used
    29ce:	8f ef       	ldi	r24, 0xFF	; 255
    29d0:	9f ef       	ldi	r25, 0xFF	; 255
    29d2:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <tr_profile_it+0x1>
    29d6:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <tr_profile_it>
	t_cntr=0;
    29da:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <t_cntr+0x1>
    29de:	10 92 45 0b 	sts	0x0B45, r1	; 0x800b45 <t_cntr>
	t_P[0][0] =current_cell[0]*cell_L;
    29e2:	09 e1       	ldi	r16, 0x19	; 25
    29e4:	17 e0       	ldi	r17, 0x07	; 7
    29e6:	c1 e5       	ldi	r28, 0x51	; 81
    29e8:	d2 e0       	ldi	r29, 0x02	; 2
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5e e3       	ldi	r21, 0x3E	; 62
    29f2:	68 81       	ld	r22, Y
    29f4:	79 81       	ldd	r23, Y+1	; 0x01
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	9b 81       	ldd	r25, Y+3	; 0x03
    29fa:	34 d6       	rcall	.+3176   	; 0x3664 <__mulsf3>
    29fc:	f8 01       	movw	r30, r16
    29fe:	60 83       	st	Z, r22
    2a00:	71 83       	std	Z+1, r23	; 0x01
    2a02:	82 83       	std	Z+2, r24	; 0x02
    2a04:	93 83       	std	Z+3, r25	; 0x03
	t_P[0][1] =current_cell[1]*cell_L;
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5e e3       	ldi	r21, 0x3E	; 62
    2a0e:	6c 81       	ldd	r22, Y+4	; 0x04
    2a10:	7d 81       	ldd	r23, Y+5	; 0x05
    2a12:	8e 81       	ldd	r24, Y+6	; 0x06
    2a14:	9f 81       	ldd	r25, Y+7	; 0x07
    2a16:	26 d6       	rcall	.+3148   	; 0x3664 <__mulsf3>
    2a18:	f8 01       	movw	r30, r16
    2a1a:	64 83       	std	Z+4, r22	; 0x04
    2a1c:	75 83       	std	Z+5, r23	; 0x05
    2a1e:	86 83       	std	Z+6, r24	; 0x06
    2a20:	97 83       	std	Z+7, r25	; 0x07
	t_P[1][0] =Path[j+1][0]*cell_L;
    2a22:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <j>
    2a26:	d0 e0       	ldi	r29, 0x00	; 0
    2a28:	cc 0f       	add	r28, r28
    2a2a:	dd 1f       	adc	r29, r29
    2a2c:	c0 59       	subi	r28, 0x90	; 144
    2a2e:	de 4f       	sbci	r29, 0xFE	; 254
    2a30:	68 81       	ld	r22, Y
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	e8 d4       	rcall	.+2512   	; 0x340a <__floatsisf>
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	5e e3       	ldi	r21, 0x3E	; 62
    2a42:	10 d6       	rcall	.+3104   	; 0x3664 <__mulsf3>
    2a44:	f8 01       	movw	r30, r16
    2a46:	60 87       	std	Z+8, r22	; 0x08
    2a48:	71 87       	std	Z+9, r23	; 0x09
    2a4a:	82 87       	std	Z+10, r24	; 0x0a
    2a4c:	93 87       	std	Z+11, r25	; 0x0b
	t_P[1][1] =Path[j+1][1]*cell_L;
    2a4e:	69 81       	ldd	r22, Y+1	; 0x01
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	d9 d4       	rcall	.+2482   	; 0x340a <__floatsisf>
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5e e3       	ldi	r21, 0x3E	; 62
    2a60:	01 d6       	rcall	.+3074   	; 0x3664 <__mulsf3>
    2a62:	f8 01       	movw	r30, r16
    2a64:	64 87       	std	Z+12, r22	; 0x0c
    2a66:	75 87       	std	Z+13, r23	; 0x0d
    2a68:	86 87       	std	Z+14, r24	; 0x0e
    2a6a:	97 87       	std	Z+15, r25	; 0x0f
	
	t_direction_nxt = get_direction(t_P[0],t_P[1]);
    2a6c:	61 e2       	ldi	r22, 0x21	; 33
    2a6e:	77 e0       	ldi	r23, 0x07	; 7
    2a70:	c8 01       	movw	r24, r16
    2a72:	ec d9       	rcall	.-3112   	; 0x1e4c <get_direction>
    2a74:	90 93 3c 0b 	sts	0x0B3C, r25	; 0x800b3c <t_direction_nxt+0x1>
    2a78:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <t_direction_nxt>
	t_direction_difr = t_direction_nxt - t_direction ;
    2a7c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <t_direction>
    2a80:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <t_direction+0x1>
    2a84:	82 1b       	sub	r24, r18
    2a86:	93 0b       	sbc	r25, r19
	if (t_direction_difr<-3) t_direction_difr += 8 ;
    2a88:	8d 3f       	cpi	r24, 0xFD	; 253
    2a8a:	ff ef       	ldi	r31, 0xFF	; 255
    2a8c:	9f 07       	cpc	r25, r31
    2a8e:	2c f0       	brlt	.+10     	; 0x2a9a <track_calc+0xf8>
	t_P[0][1] =current_cell[1]*cell_L;
	t_P[1][0] =Path[j+1][0]*cell_L;
	t_P[1][1] =Path[j+1][1]*cell_L;
	
	t_direction_nxt = get_direction(t_P[0],t_P[1]);
	t_direction_difr = t_direction_nxt - t_direction ;
    2a90:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <t_direction_difr+0x1>
    2a94:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <t_direction_difr>
    2a98:	05 c0       	rjmp	.+10     	; 0x2aa4 <track_calc+0x102>
	if (t_direction_difr<-3) t_direction_difr += 8 ;
    2a9a:	08 96       	adiw	r24, 0x08	; 8
    2a9c:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <t_direction_difr+0x1>
    2aa0:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <t_direction_difr>
	if (t_direction_difr>4) t_direction_difr -= 8 ;
    2aa4:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <t_direction_difr>
    2aa8:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <t_direction_difr+0x1>
    2aac:	85 30       	cpi	r24, 0x05	; 5
    2aae:	91 05       	cpc	r25, r1
    2ab0:	2c f0       	brlt	.+10     	; 0x2abc <track_calc+0x11a>
    2ab2:	08 97       	sbiw	r24, 0x08	; 8
    2ab4:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <t_direction_difr+0x1>
    2ab8:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <t_direction_difr>
	if(t_direction_difr>0) tr_add_to_profile(0, M_PI/4 , t_direction_difr*10);
    2abc:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <t_direction_difr>
    2ac0:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <t_direction_difr+0x1>
    2ac4:	12 16       	cp	r1, r18
    2ac6:	13 06       	cpc	r1, r19
    2ac8:	a4 f4       	brge	.+40     	; 0x2af2 <track_calc+0x150>
    2aca:	89 01       	movw	r16, r18
    2acc:	00 0f       	add	r16, r16
    2ace:	11 1f       	adc	r17, r17
    2ad0:	22 0f       	add	r18, r18
    2ad2:	33 1f       	adc	r19, r19
    2ad4:	22 0f       	add	r18, r18
    2ad6:	33 1f       	adc	r19, r19
    2ad8:	22 0f       	add	r18, r18
    2ada:	33 1f       	adc	r19, r19
    2adc:	02 0f       	add	r16, r18
    2ade:	13 1f       	adc	r17, r19
    2ae0:	2b ed       	ldi	r18, 0xDB	; 219
    2ae2:	3f e0       	ldi	r19, 0x0F	; 15
    2ae4:	49 e4       	ldi	r20, 0x49	; 73
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	cb 01       	movw	r24, r22
    2aee:	f1 dc       	rcall	.-1566   	; 0x24d2 <tr_add_to_profile>
    2af0:	10 c0       	rjmp	.+32     	; 0x2b12 <track_calc+0x170>
	else if (t_direction_difr<0) tr_add_to_profile(0, -M_PI/4 , -t_direction_difr*10);
    2af2:	33 23       	and	r19, r19
    2af4:	74 f4       	brge	.+28     	; 0x2b12 <track_calc+0x170>
    2af6:	46 ef       	ldi	r20, 0xF6	; 246
    2af8:	42 03       	mulsu	r20, r18
    2afa:	80 01       	movw	r16, r0
    2afc:	43 9f       	mul	r20, r19
    2afe:	10 0d       	add	r17, r0
    2b00:	11 24       	eor	r1, r1
    2b02:	2b ed       	ldi	r18, 0xDB	; 219
    2b04:	3f e0       	ldi	r19, 0x0F	; 15
    2b06:	49 e4       	ldi	r20, 0x49	; 73
    2b08:	5f eb       	ldi	r21, 0xBF	; 191
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	cb 01       	movw	r24, r22
    2b10:	e0 dc       	rcall	.-1600   	; 0x24d2 <tr_add_to_profile>

	t_r=sqrt(((t_P[1][0]-t_P[0][0])*(t_P[1][0]-t_P[0][0]))+((t_P[1][1]-t_P[0][1])*(t_P[1][1]-t_P[0][1])));
    2b12:	c9 e1       	ldi	r28, 0x19	; 25
    2b14:	d7 e0       	ldi	r29, 0x07	; 7
    2b16:	28 81       	ld	r18, Y
    2b18:	39 81       	ldd	r19, Y+1	; 0x01
    2b1a:	4a 81       	ldd	r20, Y+2	; 0x02
    2b1c:	5b 81       	ldd	r21, Y+3	; 0x03
    2b1e:	68 85       	ldd	r22, Y+8	; 0x08
    2b20:	79 85       	ldd	r23, Y+9	; 0x09
    2b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b26:	57 d3       	rcall	.+1710   	; 0x31d6 <__subsf3>
    2b28:	4b 01       	movw	r8, r22
    2b2a:	5c 01       	movw	r10, r24
    2b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b30:	4e 81       	ldd	r20, Y+6	; 0x06
    2b32:	5f 81       	ldd	r21, Y+7	; 0x07
    2b34:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b36:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b38:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b3c:	4c d3       	rcall	.+1688   	; 0x31d6 <__subsf3>
    2b3e:	6b 01       	movw	r12, r22
    2b40:	7c 01       	movw	r14, r24
    2b42:	a5 01       	movw	r20, r10
    2b44:	94 01       	movw	r18, r8
    2b46:	c5 01       	movw	r24, r10
    2b48:	b4 01       	movw	r22, r8
    2b4a:	8c d5       	rcall	.+2840   	; 0x3664 <__mulsf3>
    2b4c:	4b 01       	movw	r8, r22
    2b4e:	5c 01       	movw	r10, r24
    2b50:	a7 01       	movw	r20, r14
    2b52:	96 01       	movw	r18, r12
    2b54:	c7 01       	movw	r24, r14
    2b56:	b6 01       	movw	r22, r12
    2b58:	85 d5       	rcall	.+2826   	; 0x3664 <__mulsf3>
    2b5a:	9b 01       	movw	r18, r22
    2b5c:	ac 01       	movw	r20, r24
    2b5e:	c5 01       	movw	r24, r10
    2b60:	b4 01       	movw	r22, r8
    2b62:	3a d3       	rcall	.+1652   	; 0x31d8 <__addsf3>
    2b64:	0c d6       	rcall	.+3096   	; 0x377e <sqrt>
    2b66:	60 93 ff 07 	sts	0x07FF, r22	; 0x8007ff <t_r>
    2b6a:	70 93 00 08 	sts	0x0800, r23	; 0x800800 <t_r+0x1>
    2b6e:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <t_r+0x2>
    2b72:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <t_r+0x3>
	if(t_direction_nxt%2==0)
    2b76:	20 91 3b 0b 	lds	r18, 0x0B3B	; 0x800b3b <t_direction_nxt>
    2b7a:	20 fd       	sbrc	r18, 0
    2b7c:	1f c0       	rjmp	.+62     	; 0x2bbc <track_calc+0x21a>
	{
		t_cntr_forward=round(10*(t_r-l)/Kv);
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	5e e3       	ldi	r21, 0x3E	; 62
    2b86:	27 d3       	rcall	.+1614   	; 0x31d6 <__subsf3>
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e2       	ldi	r20, 0x20	; 32
    2b8e:	51 e4       	ldi	r21, 0x41	; 65
    2b90:	69 d5       	rcall	.+2770   	; 0x3664 <__mulsf3>
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	50 e4       	ldi	r21, 0x40	; 64
    2b9a:	64 d5       	rcall	.+2760   	; 0x3664 <__mulsf3>
    2b9c:	c6 d5       	rcall	.+2956   	; 0x372a <round>
    2b9e:	02 d4       	rcall	.+2052   	; 0x33a4 <__fixsfsi>
    2ba0:	70 93 14 07 	sts	0x0714, r23	; 0x800714 <t_cntr_forward+0x1>
    2ba4:	60 93 13 07 	sts	0x0713, r22	; 0x800713 <t_cntr_forward>
		tr_add_to_profile(Kv,0,t_cntr_forward);
    2ba8:	8b 01       	movw	r16, r22
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	a9 01       	movw	r20, r18
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	70 e0       	ldi	r23, 0x00	; 0
    2bb4:	80 e8       	ldi	r24, 0x80	; 128
    2bb6:	9e e3       	ldi	r25, 0x3E	; 62
    2bb8:	8c dc       	rcall	.-1768   	; 0x24d2 <tr_add_to_profile>
    2bba:	1e c0       	rjmp	.+60     	; 0x2bf8 <track_calc+0x256>
	}
	else
	{
		t_cntr_forward=round(10*(t_r-l)/(sqrtof2devided*Kv));
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e0       	ldi	r20, 0x00	; 0
    2bc2:	5e e3       	ldi	r21, 0x3E	; 62
    2bc4:	08 d3       	rcall	.+1552   	; 0x31d6 <__subsf3>
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	4a d5       	rcall	.+2708   	; 0x3664 <__mulsf3>
    2bd0:	2e ea       	ldi	r18, 0xAE	; 174
    2bd2:	3c e4       	ldi	r19, 0x4C	; 76
    2bd4:	41 e8       	ldi	r20, 0x81	; 129
    2bd6:	5e e3       	ldi	r21, 0x3E	; 62
    2bd8:	7d d3       	rcall	.+1786   	; 0x32d4 <__divsf3>
    2bda:	a7 d5       	rcall	.+2894   	; 0x372a <round>
    2bdc:	e3 d3       	rcall	.+1990   	; 0x33a4 <__fixsfsi>
    2bde:	70 93 14 07 	sts	0x0714, r23	; 0x800714 <t_cntr_forward+0x1>
    2be2:	60 93 13 07 	sts	0x0713, r22	; 0x800713 <t_cntr_forward>
		tr_add_to_profile(sqrtof2devided*Kv,0,t_cntr_forward);
    2be6:	8b 01       	movw	r16, r22
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	a9 01       	movw	r20, r18
    2bee:	6e ea       	ldi	r22, 0xAE	; 174
    2bf0:	7c e4       	ldi	r23, 0x4C	; 76
    2bf2:	81 e8       	ldi	r24, 0x81	; 129
    2bf4:	9e e3       	ldi	r25, 0x3E	; 62
    2bf6:	6d dc       	rcall	.-1830   	; 0x24d2 <tr_add_to_profile>
	}
	t_direction=t_direction_nxt;
    2bf8:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <t_direction_nxt>
    2bfc:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <t_direction_nxt+0x1>
    2c00:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <t_direction+0x1>
    2c04:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <t_direction>
	while (((signed char)Path[j+2][0]!=-1)&&(Path[j+2][0]!=255))
	{
		j++;
		t_P[0][0] =Path[j][0]*cell_L;
    2c08:	c9 e1       	ldi	r28, 0x19	; 25
    2c0a:	d7 e0       	ldi	r29, 0x07	; 7
    2c0c:	2c 2e       	mov	r2, r28
    2c0e:	3d 2e       	mov	r3, r29
	{
		t_cntr_forward=round(10*(t_r-l)/(sqrtof2devided*Kv));
		tr_add_to_profile(sqrtof2devided*Kv,0,t_cntr_forward);
	}
	t_direction=t_direction_nxt;
	while (((signed char)Path[j+2][0]!=-1)&&(Path[j+2][0]!=255))
    2c10:	37 c1       	rjmp	.+622    	; 0x2e80 <track_calc+0x4de>
	{
		j++;
    2c12:	0f 5f       	subi	r16, 0xFF	; 255
    2c14:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <j>
		t_P[0][0] =Path[j][0]*cell_L;
    2c18:	10 e0       	ldi	r17, 0x00	; 0
    2c1a:	c8 01       	movw	r24, r16
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	9c 01       	movw	r18, r24
    2c22:	22 59       	subi	r18, 0x92	; 146
    2c24:	3e 4f       	sbci	r19, 0xFE	; 254
    2c26:	79 01       	movw	r14, r18
    2c28:	f9 01       	movw	r30, r18
    2c2a:	60 81       	ld	r22, Z
    2c2c:	70 e0       	ldi	r23, 0x00	; 0
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	eb d3       	rcall	.+2006   	; 0x340a <__floatsisf>
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e8       	ldi	r20, 0x80	; 128
    2c3a:	5e e3       	ldi	r21, 0x3E	; 62
    2c3c:	13 d5       	rcall	.+2598   	; 0x3664 <__mulsf3>
    2c3e:	68 83       	st	Y, r22
    2c40:	79 83       	std	Y+1, r23	; 0x01
    2c42:	8a 83       	std	Y+2, r24	; 0x02
    2c44:	9b 83       	std	Y+3, r25	; 0x03
		t_P[0][1] =Path[j][1]*cell_L;
    2c46:	f7 01       	movw	r30, r14
    2c48:	61 81       	ldd	r22, Z+1	; 0x01
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	dc d3       	rcall	.+1976   	; 0x340a <__floatsisf>
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5e e3       	ldi	r21, 0x3E	; 62
    2c5a:	04 d5       	rcall	.+2568   	; 0x3664 <__mulsf3>
    2c5c:	6c 83       	std	Y+4, r22	; 0x04
    2c5e:	7d 83       	std	Y+5, r23	; 0x05
    2c60:	8e 83       	std	Y+6, r24	; 0x06
    2c62:	9f 83       	std	Y+7, r25	; 0x07
		t_P[1][0] =Path[j+1][0]*cell_L;
    2c64:	00 0f       	add	r16, r16
    2c66:	11 1f       	adc	r17, r17
    2c68:	00 59       	subi	r16, 0x90	; 144
    2c6a:	1e 4f       	sbci	r17, 0xFE	; 254
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	60 81       	ld	r22, Z
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	c9 d3       	rcall	.+1938   	; 0x340a <__floatsisf>
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5e e3       	ldi	r21, 0x3E	; 62
    2c80:	f1 d4       	rcall	.+2530   	; 0x3664 <__mulsf3>
    2c82:	68 87       	std	Y+8, r22	; 0x08
    2c84:	79 87       	std	Y+9, r23	; 0x09
    2c86:	8a 87       	std	Y+10, r24	; 0x0a
    2c88:	9b 87       	std	Y+11, r25	; 0x0b
		t_P[1][1] =Path[j+1][1]*cell_L;
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	61 81       	ldd	r22, Z+1	; 0x01
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	ba d3       	rcall	.+1908   	; 0x340a <__floatsisf>
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5e e3       	ldi	r21, 0x3E	; 62
    2c9e:	e2 d4       	rcall	.+2500   	; 0x3664 <__mulsf3>
    2ca0:	6c 87       	std	Y+12, r22	; 0x0c
    2ca2:	7d 87       	std	Y+13, r23	; 0x0d
    2ca4:	8e 87       	std	Y+14, r24	; 0x0e
    2ca6:	9f 87       	std	Y+15, r25	; 0x0f
		t_direction_nxt = get_direction(t_P[0],t_P[1]);
    2ca8:	61 e2       	ldi	r22, 0x21	; 33
    2caa:	77 e0       	ldi	r23, 0x07	; 7
    2cac:	82 2d       	mov	r24, r2
    2cae:	93 2d       	mov	r25, r3
    2cb0:	cd d8       	rcall	.-3686   	; 0x1e4c <get_direction>
    2cb2:	90 93 3c 0b 	sts	0x0B3C, r25	; 0x800b3c <t_direction_nxt+0x1>
    2cb6:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <t_direction_nxt>
		t_direction_difr = t_direction_nxt - t_direction +4 ;
    2cba:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <t_direction>
    2cbe:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <t_direction+0x1>
    2cc2:	82 1b       	sub	r24, r18
    2cc4:	93 0b       	sbc	r25, r19
    2cc6:	9c 01       	movw	r18, r24
    2cc8:	2c 5f       	subi	r18, 0xFC	; 252
    2cca:	3f 4f       	sbci	r19, 0xFF	; 255
		if (t_direction_difr<0) t_direction_difr += 8 ;
    2ccc:	2a f0       	brmi	.+10     	; 0x2cd8 <track_calc+0x336>
		t_P[0][0] =Path[j][0]*cell_L;
		t_P[0][1] =Path[j][1]*cell_L;
		t_P[1][0] =Path[j+1][0]*cell_L;
		t_P[1][1] =Path[j+1][1]*cell_L;
		t_direction_nxt = get_direction(t_P[0],t_P[1]);
		t_direction_difr = t_direction_nxt - t_direction +4 ;
    2cce:	30 93 18 08 	sts	0x0818, r19	; 0x800818 <t_direction_difr+0x1>
    2cd2:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <t_direction_difr>
    2cd6:	05 c0       	rjmp	.+10     	; 0x2ce2 <track_calc+0x340>
		if (t_direction_difr<0) t_direction_difr += 8 ;
    2cd8:	0c 96       	adiw	r24, 0x0c	; 12
    2cda:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <t_direction_difr+0x1>
    2cde:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <t_direction_difr>
		if (t_direction_difr>7) t_direction_difr -= 8 ;
    2ce2:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <t_direction_difr>
    2ce6:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <t_direction_difr+0x1>
    2cea:	88 30       	cpi	r24, 0x08	; 8
    2cec:	91 05       	cpc	r25, r1
    2cee:	2c f0       	brlt	.+10     	; 0x2cfa <track_calc+0x358>
    2cf0:	08 97       	sbiw	r24, 0x08	; 8
    2cf2:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <t_direction_difr+0x1>
    2cf6:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <t_direction_difr>
		switch (t_direction_difr)
    2cfa:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <t_direction_difr>
    2cfe:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <t_direction_difr+0x1>
    2d02:	83 30       	cpi	r24, 0x03	; 3
    2d04:	91 05       	cpc	r25, r1
    2d06:	b1 f0       	breq	.+44     	; 0x2d34 <track_calc+0x392>
    2d08:	1c f4       	brge	.+6      	; 0x2d10 <track_calc+0x36e>
    2d0a:	02 97       	sbiw	r24, 0x02	; 2
    2d0c:	39 f0       	breq	.+14     	; 0x2d1c <track_calc+0x37a>
    2d0e:	35 c0       	rjmp	.+106    	; 0x2d7a <track_calc+0x3d8>
    2d10:	85 30       	cpi	r24, 0x05	; 5
    2d12:	91 05       	cpc	r25, r1
    2d14:	d9 f0       	breq	.+54     	; 0x2d4c <track_calc+0x3aa>
    2d16:	06 97       	sbiw	r24, 0x06	; 6
    2d18:	29 f1       	breq	.+74     	; 0x2d64 <track_calc+0x3c2>
    2d1a:	2f c0       	rjmp	.+94     	; 0x2d7a <track_calc+0x3d8>
			case 3 : set_vwcntr (l*2.41421*M_PI/8,-M_PI/8,20) ; break ; // go up right
			case 5 : set_vwcntr (l*2.41421*M_PI/8,M_PI/8,20) ; break ; // go up left
			case 6 : set_vwcntr (l*M_PI/8,M_PI/8,40) ; break ; // go left
			*/
			
			case 2 : tr_add_to_profile (4*l*M_PI/8,-M_PI/8*4,10) ; break ; // go right
    2d1c:	0a e0       	ldi	r16, 0x0A	; 10
    2d1e:	10 e0       	ldi	r17, 0x00	; 0
    2d20:	2b ed       	ldi	r18, 0xDB	; 219
    2d22:	3f e0       	ldi	r19, 0x0F	; 15
    2d24:	49 ec       	ldi	r20, 0xC9	; 201
    2d26:	5f eb       	ldi	r21, 0xBF	; 191
    2d28:	6b ed       	ldi	r22, 0xDB	; 219
    2d2a:	7f e0       	ldi	r23, 0x0F	; 15
    2d2c:	89 e4       	ldi	r24, 0x49	; 73
    2d2e:	9e e3       	ldi	r25, 0x3E	; 62
    2d30:	d0 db       	rcall	.-2144   	; 0x24d2 <tr_add_to_profile>
    2d32:	23 c0       	rjmp	.+70     	; 0x2d7a <track_calc+0x3d8>
			case 3 : tr_add_to_profile (2*l*2.41421*M_PI/8,-M_PI/8*2,10) ; break ; // go up right
    2d34:	0a e0       	ldi	r16, 0x0A	; 10
    2d36:	10 e0       	ldi	r17, 0x00	; 0
    2d38:	2b ed       	ldi	r18, 0xDB	; 219
    2d3a:	3f e0       	ldi	r19, 0x0F	; 15
    2d3c:	49 e4       	ldi	r20, 0x49	; 73
    2d3e:	5f eb       	ldi	r21, 0xBF	; 191
    2d40:	60 ef       	ldi	r22, 0xF0	; 240
    2d42:	73 eb       	ldi	r23, 0xB3	; 179
    2d44:	82 e7       	ldi	r24, 0x72	; 114
    2d46:	9e e3       	ldi	r25, 0x3E	; 62
    2d48:	c4 db       	rcall	.-2168   	; 0x24d2 <tr_add_to_profile>
    2d4a:	17 c0       	rjmp	.+46     	; 0x2d7a <track_calc+0x3d8>
			case 5 : tr_add_to_profile (2*l*2.41421*M_PI/8,M_PI/8*2,10) ; break ; // go up left
    2d4c:	0a e0       	ldi	r16, 0x0A	; 10
    2d4e:	10 e0       	ldi	r17, 0x00	; 0
    2d50:	2b ed       	ldi	r18, 0xDB	; 219
    2d52:	3f e0       	ldi	r19, 0x0F	; 15
    2d54:	49 e4       	ldi	r20, 0x49	; 73
    2d56:	5f e3       	ldi	r21, 0x3F	; 63
    2d58:	60 ef       	ldi	r22, 0xF0	; 240
    2d5a:	73 eb       	ldi	r23, 0xB3	; 179
    2d5c:	82 e7       	ldi	r24, 0x72	; 114
    2d5e:	9e e3       	ldi	r25, 0x3E	; 62
    2d60:	b8 db       	rcall	.-2192   	; 0x24d2 <tr_add_to_profile>
    2d62:	0b c0       	rjmp	.+22     	; 0x2d7a <track_calc+0x3d8>
			case 6 : tr_add_to_profile (4*l*M_PI/8,M_PI/8*4,10) ; break ; // go left
    2d64:	0a e0       	ldi	r16, 0x0A	; 10
    2d66:	10 e0       	ldi	r17, 0x00	; 0
    2d68:	2b ed       	ldi	r18, 0xDB	; 219
    2d6a:	3f e0       	ldi	r19, 0x0F	; 15
    2d6c:	49 ec       	ldi	r20, 0xC9	; 201
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	6b ed       	ldi	r22, 0xDB	; 219
    2d72:	7f e0       	ldi	r23, 0x0F	; 15
    2d74:	89 e4       	ldi	r24, 0x49	; 73
    2d76:	9e e3       	ldi	r25, 0x3E	; 62
    2d78:	ac db       	rcall	.-2216   	; 0x24d2 <tr_add_to_profile>
		}
		t_r=sqrt(((t_P[1][0]-t_P[0][0])*(t_P[1][0]-t_P[0][0]))+((t_P[1][1]-t_P[0][1])*(t_P[1][1]-t_P[0][1])));
    2d7a:	28 81       	ld	r18, Y
    2d7c:	39 81       	ldd	r19, Y+1	; 0x01
    2d7e:	4a 81       	ldd	r20, Y+2	; 0x02
    2d80:	5b 81       	ldd	r21, Y+3	; 0x03
    2d82:	68 85       	ldd	r22, Y+8	; 0x08
    2d84:	79 85       	ldd	r23, Y+9	; 0x09
    2d86:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d88:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d8a:	25 d2       	rcall	.+1098   	; 0x31d6 <__subsf3>
    2d8c:	4b 01       	movw	r8, r22
    2d8e:	5c 01       	movw	r10, r24
    2d90:	2c 81       	ldd	r18, Y+4	; 0x04
    2d92:	3d 81       	ldd	r19, Y+5	; 0x05
    2d94:	4e 81       	ldd	r20, Y+6	; 0x06
    2d96:	5f 81       	ldd	r21, Y+7	; 0x07
    2d98:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d9a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2da0:	1a d2       	rcall	.+1076   	; 0x31d6 <__subsf3>
    2da2:	6b 01       	movw	r12, r22
    2da4:	7c 01       	movw	r14, r24
    2da6:	a5 01       	movw	r20, r10
    2da8:	94 01       	movw	r18, r8
    2daa:	c5 01       	movw	r24, r10
    2dac:	b4 01       	movw	r22, r8
    2dae:	5a d4       	rcall	.+2228   	; 0x3664 <__mulsf3>
    2db0:	4b 01       	movw	r8, r22
    2db2:	5c 01       	movw	r10, r24
    2db4:	a7 01       	movw	r20, r14
    2db6:	96 01       	movw	r18, r12
    2db8:	c7 01       	movw	r24, r14
    2dba:	b6 01       	movw	r22, r12
    2dbc:	53 d4       	rcall	.+2214   	; 0x3664 <__mulsf3>
    2dbe:	9b 01       	movw	r18, r22
    2dc0:	ac 01       	movw	r20, r24
    2dc2:	c5 01       	movw	r24, r10
    2dc4:	b4 01       	movw	r22, r8
    2dc6:	08 d2       	rcall	.+1040   	; 0x31d8 <__addsf3>
    2dc8:	da d4       	rcall	.+2484   	; 0x377e <sqrt>
    2dca:	60 93 ff 07 	sts	0x07FF, r22	; 0x8007ff <t_r>
    2dce:	70 93 00 08 	sts	0x0800, r23	; 0x800800 <t_r+0x1>
    2dd2:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <t_r+0x2>
    2dd6:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <t_r+0x3>
		if(t_direction_nxt%2==0)
    2dda:	00 91 3b 0b 	lds	r16, 0x0B3B	; 0x800b3b <t_direction_nxt>
    2dde:	10 91 3c 0b 	lds	r17, 0x0B3C	; 0x800b3c <t_direction_nxt+0x1>
    2de2:	78 01       	movw	r14, r16
    2de4:	f1 e0       	ldi	r31, 0x01	; 1
    2de6:	ef 22       	and	r14, r31
    2de8:	ff 24       	eor	r15, r15
    2dea:	00 fd       	sbrc	r16, 0
    2dec:	16 c0       	rjmp	.+44     	; 0x2e1a <track_calc+0x478>
			t_cntr_forward=round(10*(t_r-2*l)/Kv);
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5e e3       	ldi	r21, 0x3E	; 62
    2df6:	ef d1       	rcall	.+990    	; 0x31d6 <__subsf3>
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	40 e2       	ldi	r20, 0x20	; 32
    2dfe:	51 e4       	ldi	r21, 0x41	; 65
    2e00:	31 d4       	rcall	.+2146   	; 0x3664 <__mulsf3>
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e8       	ldi	r20, 0x80	; 128
    2e08:	50 e4       	ldi	r21, 0x40	; 64
    2e0a:	2c d4       	rcall	.+2136   	; 0x3664 <__mulsf3>
    2e0c:	8e d4       	rcall	.+2332   	; 0x372a <round>
    2e0e:	ca d2       	rcall	.+1428   	; 0x33a4 <__fixsfsi>
    2e10:	70 93 14 07 	sts	0x0714, r23	; 0x800714 <t_cntr_forward+0x1>
    2e14:	60 93 13 07 	sts	0x0713, r22	; 0x800713 <t_cntr_forward>
    2e18:	15 c0       	rjmp	.+42     	; 0x2e44 <track_calc+0x4a2>
		else
			t_cntr_forward=round(10*(t_r-2*l)/(sqrtof2devided*Kv));
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e8       	ldi	r20, 0x80	; 128
    2e20:	5e e3       	ldi	r21, 0x3E	; 62
    2e22:	d9 d1       	rcall	.+946    	; 0x31d6 <__subsf3>
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e2       	ldi	r20, 0x20	; 32
    2e2a:	51 e4       	ldi	r21, 0x41	; 65
    2e2c:	1b d4       	rcall	.+2102   	; 0x3664 <__mulsf3>
    2e2e:	2e ea       	ldi	r18, 0xAE	; 174
    2e30:	3c e4       	ldi	r19, 0x4C	; 76
    2e32:	41 e8       	ldi	r20, 0x81	; 129
    2e34:	5e e3       	ldi	r21, 0x3E	; 62
    2e36:	4e d2       	rcall	.+1180   	; 0x32d4 <__divsf3>
    2e38:	78 d4       	rcall	.+2288   	; 0x372a <round>
    2e3a:	b4 d2       	rcall	.+1384   	; 0x33a4 <__fixsfsi>
    2e3c:	70 93 14 07 	sts	0x0714, r23	; 0x800714 <t_cntr_forward+0x1>
    2e40:	60 93 13 07 	sts	0x0713, r22	; 0x800713 <t_cntr_forward>
		
		t_direction=t_direction_nxt;
    2e44:	10 93 2b 01 	sts	0x012B, r17	; 0x80012b <t_direction+0x1>
    2e48:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <t_direction>
		if (t_cntr_forward!=0)
    2e4c:	00 91 13 07 	lds	r16, 0x0713	; 0x800713 <t_cntr_forward>
    2e50:	10 91 14 07 	lds	r17, 0x0714	; 0x800714 <t_cntr_forward+0x1>
    2e54:	01 15       	cp	r16, r1
    2e56:	11 05       	cpc	r17, r1
    2e58:	99 f0       	breq	.+38     	; 0x2e80 <track_calc+0x4de>
		{
			if (t_direction%2==0) //  left , up , right , down
    2e5a:	ef 28       	or	r14, r15
    2e5c:	49 f4       	brne	.+18     	; 0x2e70 <track_calc+0x4ce>
				tr_add_to_profile(Kv,0,t_cntr_forward);
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	a9 01       	movw	r20, r18
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	80 e8       	ldi	r24, 0x80	; 128
    2e6a:	9e e3       	ldi	r25, 0x3E	; 62
    2e6c:	32 db       	rcall	.-2460   	; 0x24d2 <tr_add_to_profile>
    2e6e:	08 c0       	rjmp	.+16     	; 0x2e80 <track_calc+0x4de>
			else // other directions
				tr_add_to_profile(sqrtof2devided*Kv,0,t_cntr_forward);
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	a9 01       	movw	r20, r18
    2e76:	6e ea       	ldi	r22, 0xAE	; 174
    2e78:	7c e4       	ldi	r23, 0x4C	; 76
    2e7a:	81 e8       	ldi	r24, 0x81	; 129
    2e7c:	9e e3       	ldi	r25, 0x3E	; 62
    2e7e:	29 db       	rcall	.-2478   	; 0x24d2 <tr_add_to_profile>
	{
		t_cntr_forward=round(10*(t_r-l)/(sqrtof2devided*Kv));
		tr_add_to_profile(sqrtof2devided*Kv,0,t_cntr_forward);
	}
	t_direction=t_direction_nxt;
	while (((signed char)Path[j+2][0]!=-1)&&(Path[j+2][0]!=255))
    2e80:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <j>
    2e84:	e0 2f       	mov	r30, r16
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	ee 0f       	add	r30, r30
    2e8a:	ff 1f       	adc	r31, r31
    2e8c:	ee 58       	subi	r30, 0x8E	; 142
    2e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e90:	80 81       	ld	r24, Z
    2e92:	8f 3f       	cpi	r24, 0xFF	; 255
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <track_calc+0x4f6>
    2e96:	bd ce       	rjmp	.-646    	; 0x2c12 <track_calc+0x270>
				tr_add_to_profile(Kv,0,t_cntr_forward);
			else // other directions
				tr_add_to_profile(sqrtof2devided*Kv,0,t_cntr_forward);
		}
	}
	if (t_direction%2==0)
    2e98:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <t_direction>
    2e9c:	80 fd       	sbrc	r24, 0
    2e9e:	0b c0       	rjmp	.+22     	; 0x2eb6 <track_calc+0x514>
	{tr_add_to_profile(Kv,0,5);}
    2ea0:	05 e0       	ldi	r16, 0x05	; 5
    2ea2:	10 e0       	ldi	r17, 0x00	; 0
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	a9 01       	movw	r20, r18
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	70 e0       	ldi	r23, 0x00	; 0
    2eae:	80 e8       	ldi	r24, 0x80	; 128
    2eb0:	9e e3       	ldi	r25, 0x3E	; 62
    2eb2:	0f db       	rcall	.-2530   	; 0x24d2 <tr_add_to_profile>
    2eb4:	0a c0       	rjmp	.+20     	; 0x2eca <track_calc+0x528>
	else
	{tr_add_to_profile(Kv*sqrtof2devided,0,7);}
    2eb6:	07 e0       	ldi	r16, 0x07	; 7
    2eb8:	10 e0       	ldi	r17, 0x00	; 0
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	a9 01       	movw	r20, r18
    2ec0:	6e ea       	ldi	r22, 0xAE	; 174
    2ec2:	7c e4       	ldi	r23, 0x4C	; 76
    2ec4:	81 e8       	ldi	r24, 0x81	; 129
    2ec6:	9e e3       	ldi	r25, 0x3E	; 62
    2ec8:	04 db       	rcall	.-2552   	; 0x24d2 <tr_add_to_profile>
}
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	1f 91       	pop	r17
    2ed0:	0f 91       	pop	r16
    2ed2:	ff 90       	pop	r15
    2ed4:	ef 90       	pop	r14
    2ed6:	df 90       	pop	r13
    2ed8:	cf 90       	pop	r12
    2eda:	bf 90       	pop	r11
    2edc:	af 90       	pop	r10
    2ede:	9f 90       	pop	r9
    2ee0:	8f 90       	pop	r8
    2ee2:	7f 90       	pop	r7
    2ee4:	6f 90       	pop	r6
    2ee6:	5f 90       	pop	r5
    2ee8:	4f 90       	pop	r4
    2eea:	3f 90       	pop	r3
    2eec:	2f 90       	pop	r2
    2eee:	08 95       	ret

00002ef0 <track_slot>:
int check_result ;
int track_slot ()
{
    2ef0:	2f 92       	push	r2
    2ef2:	3f 92       	push	r3
    2ef4:	4f 92       	push	r4
    2ef6:	5f 92       	push	r5
    2ef8:	6f 92       	push	r6
    2efa:	7f 92       	push	r7
    2efc:	8f 92       	push	r8
    2efe:	9f 92       	push	r9
    2f00:	af 92       	push	r10
    2f02:	bf 92       	push	r11
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	00 d0       	rcall	.+0      	; 0x2f16 <track_slot+0x26>
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <track_slot+0x28>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
	if (t_cntr==0)
    2f1c:	e0 90 45 0b 	lds	r14, 0x0B45	; 0x800b45 <t_cntr>
    2f20:	f0 90 46 0b 	lds	r15, 0x0B46	; 0x800b46 <t_cntr+0x1>
    2f24:	e1 14       	cp	r14, r1
    2f26:	f1 04       	cpc	r15, r1
    2f28:	09 f0       	breq	.+2      	; 0x2f2c <track_slot+0x3c>
    2f2a:	75 c0       	rjmp	.+234    	; 0x3016 <track_slot+0x126>
	{
		tr_profile_it++;
    2f2c:	00 91 5d 02 	lds	r16, 0x025D	; 0x80025d <tr_profile_it>
    2f30:	10 91 5e 02 	lds	r17, 0x025E	; 0x80025e <tr_profile_it+0x1>
    2f34:	0f 5f       	subi	r16, 0xFF	; 255
    2f36:	1f 4f       	sbci	r17, 0xFF	; 255
    2f38:	10 93 5e 02 	sts	0x025E, r17	; 0x80025e <tr_profile_it+0x1>
    2f3c:	00 93 5d 02 	sts	0x025D, r16	; 0x80025d <tr_profile_it>
		if (tr_profile_it==tr_profile_cntr)
    2f40:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <tr_profile_cntr>
    2f44:	90 91 3a 0b 	lds	r25, 0x0B3A	; 0x800b3a <tr_profile_cntr+0x1>
    2f48:	08 17       	cp	r16, r24
    2f4a:	19 07       	cpc	r17, r25
    2f4c:	41 f4       	brne	.+16     	; 0x2f5e <track_slot+0x6e>
		{
			MotorStop(MOTOR_STOP_SMOOTH);
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	0e 94 38 06 	call	0xc70	; 0xc70 <MotorStop>
			update_current_cell();
    2f54:	08 d8       	rcall	.-4080   	; 0x1f66 <update_current_cell>
			return end_of_path ;
    2f56:	ee 24       	eor	r14, r14
    2f58:	e3 94       	inc	r14
    2f5a:	f1 2c       	mov	r15, r1
    2f5c:	24 c1       	rjmp	.+584    	; 0x31a6 <track_slot+0x2b6>
		}
		check_result=check_end_after_OA();
    2f5e:	03 db       	rcall	.-2554   	; 0x2566 <check_end_after_OA>
    2f60:	90 93 fc 07 	sts	0x07FC, r25	; 0x8007fc <check_result+0x1>
    2f64:	80 93 fb 07 	sts	0x07FB, r24	; 0x8007fb <check_result>
		if (check_result==1)
    2f68:	81 30       	cpi	r24, 0x01	; 1
    2f6a:	91 05       	cpc	r25, r1
    2f6c:	61 f4       	brne	.+24     	; 0x2f86 <track_slot+0x96>
		{
			MotorStop(MOTOR_STOP_SMOOTH);
    2f6e:	82 e0       	ldi	r24, 0x02	; 2
    2f70:	0e 94 38 06 	call	0xc70	; 0xc70 <MotorStop>
			update_current_cell();
    2f74:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <update_current_cell>
			t_OA=0;
    2f78:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <t_OA>
			return return_to_path_after_OA ;
    2f7c:	68 94       	set
    2f7e:	ee 24       	eor	r14, r14
    2f80:	e1 f8       	bld	r14, 1
    2f82:	f1 2c       	mov	r15, r1
    2f84:	10 c1       	rjmp	.+544    	; 0x31a6 <track_slot+0x2b6>
		}
		else if (check_result==2)
    2f86:	02 97       	sbiw	r24, 0x02	; 2
    2f88:	31 f4       	brne	.+12     	; 0x2f96 <track_slot+0xa6>
		{
			update_current_cell();
    2f8a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <update_current_cell>
			at_cell_center=1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <at_cell_center>
			return 0 ;
    2f94:	08 c1       	rjmp	.+528    	; 0x31a6 <track_slot+0x2b6>
		}
		ApplyVW(tr_profile[tr_profile_it][0],tr_profile[tr_profile_it][1]);
    2f96:	00 0f       	add	r16, r16
    2f98:	11 1f       	adc	r17, r17
    2f9a:	00 0f       	add	r16, r16
    2f9c:	11 1f       	adc	r17, r17
    2f9e:	00 0f       	add	r16, r16
    2fa0:	11 1f       	adc	r17, r17
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	e1 5a       	subi	r30, 0xA1	; 161
    2fa6:	fd 4f       	sbci	r31, 0xFD	; 253
    2fa8:	24 81       	ldd	r18, Z+4	; 0x04
    2faa:	35 81       	ldd	r19, Z+5	; 0x05
    2fac:	46 81       	ldd	r20, Z+6	; 0x06
    2fae:	57 81       	ldd	r21, Z+7	; 0x07
    2fb0:	60 81       	ld	r22, Z
    2fb2:	71 81       	ldd	r23, Z+1	; 0x01
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	93 81       	ldd	r25, Z+3	; 0x03
    2fb8:	0e 94 46 02 	call	0x48c	; 0x48c <ApplyVW>
		t_cntr=tr_profile_details[tr_profile_it][0];
    2fbc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <tr_profile_it>
    2fc0:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <tr_profile_it+0x1>
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	ee 0f       	add	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	ee 0f       	add	r30, r30
    2fcc:	ff 1f       	adc	r31, r31
    2fce:	e1 58       	subi	r30, 0x81	; 129
    2fd0:	fa 4f       	sbci	r31, 0xFA	; 250
    2fd2:	20 81       	ld	r18, Z
    2fd4:	31 81       	ldd	r19, Z+1	; 0x01
    2fd6:	30 93 46 0b 	sts	0x0B46, r19	; 0x800b46 <t_cntr+0x1>
    2fda:	20 93 45 0b 	sts	0x0B45, r18	; 0x800b45 <t_cntr>
		j=tr_profile_details[tr_profile_it][1];
    2fde:	22 81       	ldd	r18, Z+2	; 0x02
    2fe0:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <j>
		if (tr_profile[tr_profile_it][1]!=0) Rotating=1;
    2fe4:	88 0f       	add	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	e1 5a       	subi	r30, 0xA1	; 161
    2ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	a9 01       	movw	r20, r18
    2ffc:	64 81       	ldd	r22, Z+4	; 0x04
    2ffe:	75 81       	ldd	r23, Z+5	; 0x05
    3000:	86 81       	ldd	r24, Z+6	; 0x06
    3002:	97 81       	ldd	r25, Z+7	; 0x07
    3004:	60 d1       	rcall	.+704    	; 0x32c6 <__cmpsf2>
    3006:	88 23       	and	r24, r24
    3008:	21 f0       	breq	.+8      	; 0x3012 <track_slot+0x122>
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Rotating>
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <track_slot+0x126>
		else Rotating=0;
    3012:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Rotating>
	}
	t_theta = current_position[2]+tr_profile[tr_profile_it][1]/2*0.1;//divided by 2 to get average t_theat thought sample
    3016:	0f 2e       	mov	r0, r31
    3018:	fb e0       	ldi	r31, 0x0B	; 11
    301a:	2f 2e       	mov	r2, r31
    301c:	f8 e0       	ldi	r31, 0x08	; 8
    301e:	3f 2e       	mov	r3, r31
    3020:	f0 2d       	mov	r31, r0
    3022:	d1 01       	movw	r26, r2
    3024:	18 96       	adiw	r26, 0x08	; 8
    3026:	8d 91       	ld	r24, X+
    3028:	9d 91       	ld	r25, X+
    302a:	0d 90       	ld	r0, X+
    302c:	bc 91       	ld	r27, X
    302e:	a0 2d       	mov	r26, r0
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	9a 83       	std	Y+2, r25	; 0x02
    3034:	ab 83       	std	Y+3, r26	; 0x03
    3036:	bc 83       	std	Y+4, r27	; 0x04
    3038:	00 91 5d 02 	lds	r16, 0x025D	; 0x80025d <tr_profile_it>
    303c:	10 91 5e 02 	lds	r17, 0x025E	; 0x80025e <tr_profile_it+0x1>
    3040:	00 0f       	add	r16, r16
    3042:	11 1f       	adc	r17, r17
    3044:	00 0f       	add	r16, r16
    3046:	11 1f       	adc	r17, r17
    3048:	00 0f       	add	r16, r16
    304a:	11 1f       	adc	r17, r17
    304c:	01 5a       	subi	r16, 0xA1	; 161
    304e:	1d 4f       	sbci	r17, 0xFD	; 253
    3050:	f8 01       	movw	r30, r16
    3052:	84 80       	ldd	r8, Z+4	; 0x04
    3054:	95 80       	ldd	r9, Z+5	; 0x05
    3056:	a6 80       	ldd	r10, Z+6	; 0x06
    3058:	b7 80       	ldd	r11, Z+7	; 0x07
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	5f e3       	ldi	r21, 0x3F	; 63
    3062:	c5 01       	movw	r24, r10
    3064:	b4 01       	movw	r22, r8
    3066:	fe d2       	rcall	.+1532   	; 0x3664 <__mulsf3>
    3068:	2d ec       	ldi	r18, 0xCD	; 205
    306a:	3c ec       	ldi	r19, 0xCC	; 204
    306c:	4c ec       	ldi	r20, 0xCC	; 204
    306e:	5d e3       	ldi	r21, 0x3D	; 61
    3070:	f9 d2       	rcall	.+1522   	; 0x3664 <__mulsf3>
    3072:	9b 01       	movw	r18, r22
    3074:	ac 01       	movw	r20, r24
    3076:	69 81       	ldd	r22, Y+1	; 0x01
    3078:	7a 81       	ldd	r23, Y+2	; 0x02
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	9c 81       	ldd	r25, Y+4	; 0x04
    307e:	ac d0       	rcall	.+344    	; 0x31d8 <__addsf3>
    3080:	6b 01       	movw	r12, r22
    3082:	7c 01       	movw	r14, r24
    3084:	60 93 03 08 	sts	0x0803, r22	; 0x800803 <t_theta>
    3088:	70 93 04 08 	sts	0x0804, r23	; 0x800804 <t_theta+0x1>
    308c:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <t_theta+0x2>
    3090:	90 93 06 08 	sts	0x0806, r25	; 0x800806 <t_theta+0x3>
	current_position[0] += tr_profile[tr_profile_it][0]*cos(t_theta)*0.1;
    3094:	d8 01       	movw	r26, r16
    3096:	4d 90       	ld	r4, X+
    3098:	5d 90       	ld	r5, X+
    309a:	6d 90       	ld	r6, X+
    309c:	7c 90       	ld	r7, X
    309e:	17 d1       	rcall	.+558    	; 0x32ce <cos>
    30a0:	9b 01       	movw	r18, r22
    30a2:	ac 01       	movw	r20, r24
    30a4:	c3 01       	movw	r24, r6
    30a6:	b2 01       	movw	r22, r4
    30a8:	dd d2       	rcall	.+1466   	; 0x3664 <__mulsf3>
    30aa:	2d ec       	ldi	r18, 0xCD	; 205
    30ac:	3c ec       	ldi	r19, 0xCC	; 204
    30ae:	4c ec       	ldi	r20, 0xCC	; 204
    30b0:	5d e3       	ldi	r21, 0x3D	; 61
    30b2:	d8 d2       	rcall	.+1456   	; 0x3664 <__mulsf3>
    30b4:	9b 01       	movw	r18, r22
    30b6:	ac 01       	movw	r20, r24
    30b8:	f1 01       	movw	r30, r2
    30ba:	60 81       	ld	r22, Z
    30bc:	71 81       	ldd	r23, Z+1	; 0x01
    30be:	82 81       	ldd	r24, Z+2	; 0x02
    30c0:	93 81       	ldd	r25, Z+3	; 0x03
    30c2:	8a d0       	rcall	.+276    	; 0x31d8 <__addsf3>
    30c4:	d1 01       	movw	r26, r2
    30c6:	6d 93       	st	X+, r22
    30c8:	7d 93       	st	X+, r23
    30ca:	8d 93       	st	X+, r24
    30cc:	9c 93       	st	X, r25
    30ce:	13 97       	sbiw	r26, 0x03	; 3
	current_position[1] += tr_profile[tr_profile_it][0]*sin(t_theta)*0.1;
    30d0:	c7 01       	movw	r24, r14
    30d2:	b6 01       	movw	r22, r12
    30d4:	4a d3       	rcall	.+1684   	; 0x376a <sin>
    30d6:	9b 01       	movw	r18, r22
    30d8:	ac 01       	movw	r20, r24
    30da:	c3 01       	movw	r24, r6
    30dc:	b2 01       	movw	r22, r4
    30de:	c2 d2       	rcall	.+1412   	; 0x3664 <__mulsf3>
    30e0:	2d ec       	ldi	r18, 0xCD	; 205
    30e2:	3c ec       	ldi	r19, 0xCC	; 204
    30e4:	4c ec       	ldi	r20, 0xCC	; 204
    30e6:	5d e3       	ldi	r21, 0x3D	; 61
    30e8:	bd d2       	rcall	.+1402   	; 0x3664 <__mulsf3>
    30ea:	9b 01       	movw	r18, r22
    30ec:	ac 01       	movw	r20, r24
    30ee:	f1 01       	movw	r30, r2
    30f0:	64 81       	ldd	r22, Z+4	; 0x04
    30f2:	75 81       	ldd	r23, Z+5	; 0x05
    30f4:	86 81       	ldd	r24, Z+6	; 0x06
    30f6:	97 81       	ldd	r25, Z+7	; 0x07
    30f8:	6f d0       	rcall	.+222    	; 0x31d8 <__addsf3>
    30fa:	d1 01       	movw	r26, r2
    30fc:	14 96       	adiw	r26, 0x04	; 4
    30fe:	6d 93       	st	X+, r22
    3100:	7d 93       	st	X+, r23
    3102:	8d 93       	st	X+, r24
    3104:	9c 93       	st	X, r25
    3106:	17 97       	sbiw	r26, 0x07	; 7
	current_position[2] += tr_profile[tr_profile_it][1]*0.1;
    3108:	2d ec       	ldi	r18, 0xCD	; 205
    310a:	3c ec       	ldi	r19, 0xCC	; 204
    310c:	4c ec       	ldi	r20, 0xCC	; 204
    310e:	5d e3       	ldi	r21, 0x3D	; 61
    3110:	c5 01       	movw	r24, r10
    3112:	b4 01       	movw	r22, r8
    3114:	a7 d2       	rcall	.+1358   	; 0x3664 <__mulsf3>
    3116:	9b 01       	movw	r18, r22
    3118:	ac 01       	movw	r20, r24
    311a:	69 81       	ldd	r22, Y+1	; 0x01
    311c:	7a 81       	ldd	r23, Y+2	; 0x02
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	9c 81       	ldd	r25, Y+4	; 0x04
    3122:	5a d0       	rcall	.+180    	; 0x31d8 <__addsf3>
    3124:	f1 01       	movw	r30, r2
    3126:	60 87       	std	Z+8, r22	; 0x08
    3128:	71 87       	std	Z+9, r23	; 0x09
    312a:	82 87       	std	Z+10, r24	; 0x0a
    312c:	93 87       	std	Z+11, r25	; 0x0b
	t_cntr--;
    312e:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <t_cntr>
    3132:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <t_cntr+0x1>
    3136:	9c 01       	movw	r18, r24
    3138:	21 50       	subi	r18, 0x01	; 1
    313a:	31 09       	sbc	r19, r1
    313c:	30 93 46 0b 	sts	0x0B46, r19	; 0x800b46 <t_cntr+0x1>
    3140:	20 93 45 0b 	sts	0x0B45, r18	; 0x800b45 <t_cntr>
	if(Rotating==0&&t_OA==0) // not start OA while OA working
    3144:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <Rotating>
    3148:	21 11       	cpse	r18, r1
    314a:	22 c0       	rjmp	.+68     	; 0x3190 <track_slot+0x2a0>
    314c:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <t_OA>
    3150:	21 11       	cpse	r18, r1
    3152:	21 c0       	rjmp	.+66     	; 0x3196 <track_slot+0x2a6>
	{
		if(t_direction%2==0)
    3154:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <t_direction>
    3158:	20 fd       	sbrc	r18, 0
    315a:	0d c0       	rjmp	.+26     	; 0x3176 <track_slot+0x286>
		{
			if ((t_cntr-5)%10==0)
    315c:	06 97       	sbiw	r24, 0x06	; 6
    315e:	6a e0       	ldi	r22, 0x0A	; 10
    3160:	70 e0       	ldi	r23, 0x00	; 0
    3162:	88 d3       	rcall	.+1808   	; 0x3874 <__divmodhi4>
    3164:	7c 01       	movw	r14, r24
    3166:	89 2b       	or	r24, r25
    3168:	c9 f4       	brne	.+50     	; 0x319c <track_slot+0x2ac>
			{
				at_cell_center=1;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <at_cell_center>
				update_current_cell();
    3170:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <update_current_cell>
    3174:	18 c0       	rjmp	.+48     	; 0x31a6 <track_slot+0x2b6>
			}
		}
		else
		{
			if ((t_cntr-9)%14==0)
    3176:	0a 97       	sbiw	r24, 0x0a	; 10
    3178:	6e e0       	ldi	r22, 0x0E	; 14
    317a:	70 e0       	ldi	r23, 0x00	; 0
    317c:	7b d3       	rcall	.+1782   	; 0x3874 <__divmodhi4>
    317e:	7c 01       	movw	r14, r24
    3180:	89 2b       	or	r24, r25
    3182:	79 f4       	brne	.+30     	; 0x31a2 <track_slot+0x2b2>
			{
				at_cell_center=1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <at_cell_center>
				update_current_cell();
    318a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <update_current_cell>
    318e:	0b c0       	rjmp	.+22     	; 0x31a6 <track_slot+0x2b6>
			}
		}
	}
	return 0; 
    3190:	e1 2c       	mov	r14, r1
    3192:	f1 2c       	mov	r15, r1
    3194:	08 c0       	rjmp	.+16     	; 0x31a6 <track_slot+0x2b6>
    3196:	e1 2c       	mov	r14, r1
    3198:	f1 2c       	mov	r15, r1
    319a:	05 c0       	rjmp	.+10     	; 0x31a6 <track_slot+0x2b6>
    319c:	e1 2c       	mov	r14, r1
    319e:	f1 2c       	mov	r15, r1
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <track_slot+0x2b6>
    31a2:	e1 2c       	mov	r14, r1
    31a4:	f1 2c       	mov	r15, r1
    31a6:	c7 01       	movw	r24, r14
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	ff 90       	pop	r15
    31ba:	ef 90       	pop	r14
    31bc:	df 90       	pop	r13
    31be:	cf 90       	pop	r12
    31c0:	bf 90       	pop	r11
    31c2:	af 90       	pop	r10
    31c4:	9f 90       	pop	r9
    31c6:	8f 90       	pop	r8
    31c8:	7f 90       	pop	r7
    31ca:	6f 90       	pop	r6
    31cc:	5f 90       	pop	r5
    31ce:	4f 90       	pop	r4
    31d0:	3f 90       	pop	r3
    31d2:	2f 90       	pop	r2
    31d4:	08 95       	ret

000031d6 <__subsf3>:
    31d6:	50 58       	subi	r21, 0x80	; 128

000031d8 <__addsf3>:
    31d8:	bb 27       	eor	r27, r27
    31da:	aa 27       	eor	r26, r26
    31dc:	0e d0       	rcall	.+28     	; 0x31fa <__addsf3x>
    31de:	dc c1       	rjmp	.+952    	; 0x3598 <__fp_round>
    31e0:	a5 d1       	rcall	.+842    	; 0x352c <__fp_pscA>
    31e2:	30 f0       	brcs	.+12     	; 0x31f0 <__addsf3+0x18>
    31e4:	aa d1       	rcall	.+852    	; 0x353a <__fp_pscB>
    31e6:	20 f0       	brcs	.+8      	; 0x31f0 <__addsf3+0x18>
    31e8:	31 f4       	brne	.+12     	; 0x31f6 <__addsf3+0x1e>
    31ea:	9f 3f       	cpi	r25, 0xFF	; 255
    31ec:	11 f4       	brne	.+4      	; 0x31f2 <__addsf3+0x1a>
    31ee:	1e f4       	brtc	.+6      	; 0x31f6 <__addsf3+0x1e>
    31f0:	9a c1       	rjmp	.+820    	; 0x3526 <__fp_nan>
    31f2:	0e f4       	brtc	.+2      	; 0x31f6 <__addsf3+0x1e>
    31f4:	e0 95       	com	r30
    31f6:	e7 fb       	bst	r30, 7
    31f8:	67 c1       	rjmp	.+718    	; 0x34c8 <__fp_inf>

000031fa <__addsf3x>:
    31fa:	e9 2f       	mov	r30, r25
    31fc:	ef d1       	rcall	.+990    	; 0x35dc <__fp_split3>
    31fe:	80 f3       	brcs	.-32     	; 0x31e0 <__addsf3+0x8>
    3200:	ba 17       	cp	r27, r26
    3202:	62 07       	cpc	r22, r18
    3204:	73 07       	cpc	r23, r19
    3206:	84 07       	cpc	r24, r20
    3208:	95 07       	cpc	r25, r21
    320a:	18 f0       	brcs	.+6      	; 0x3212 <__addsf3x+0x18>
    320c:	71 f4       	brne	.+28     	; 0x322a <__addsf3x+0x30>
    320e:	9e f5       	brtc	.+102    	; 0x3276 <__addsf3x+0x7c>
    3210:	1e c2       	rjmp	.+1084   	; 0x364e <__fp_zero>
    3212:	0e f4       	brtc	.+2      	; 0x3216 <__addsf3x+0x1c>
    3214:	e0 95       	com	r30
    3216:	0b 2e       	mov	r0, r27
    3218:	ba 2f       	mov	r27, r26
    321a:	a0 2d       	mov	r26, r0
    321c:	0b 01       	movw	r0, r22
    321e:	b9 01       	movw	r22, r18
    3220:	90 01       	movw	r18, r0
    3222:	0c 01       	movw	r0, r24
    3224:	ca 01       	movw	r24, r20
    3226:	a0 01       	movw	r20, r0
    3228:	11 24       	eor	r1, r1
    322a:	ff 27       	eor	r31, r31
    322c:	59 1b       	sub	r21, r25
    322e:	99 f0       	breq	.+38     	; 0x3256 <__addsf3x+0x5c>
    3230:	59 3f       	cpi	r21, 0xF9	; 249
    3232:	50 f4       	brcc	.+20     	; 0x3248 <__addsf3x+0x4e>
    3234:	50 3e       	cpi	r21, 0xE0	; 224
    3236:	68 f1       	brcs	.+90     	; 0x3292 <__addsf3x+0x98>
    3238:	1a 16       	cp	r1, r26
    323a:	f0 40       	sbci	r31, 0x00	; 0
    323c:	a2 2f       	mov	r26, r18
    323e:	23 2f       	mov	r18, r19
    3240:	34 2f       	mov	r19, r20
    3242:	44 27       	eor	r20, r20
    3244:	58 5f       	subi	r21, 0xF8	; 248
    3246:	f3 cf       	rjmp	.-26     	; 0x322e <__addsf3x+0x34>
    3248:	46 95       	lsr	r20
    324a:	37 95       	ror	r19
    324c:	27 95       	ror	r18
    324e:	a7 95       	ror	r26
    3250:	f0 40       	sbci	r31, 0x00	; 0
    3252:	53 95       	inc	r21
    3254:	c9 f7       	brne	.-14     	; 0x3248 <__addsf3x+0x4e>
    3256:	7e f4       	brtc	.+30     	; 0x3276 <__addsf3x+0x7c>
    3258:	1f 16       	cp	r1, r31
    325a:	ba 0b       	sbc	r27, r26
    325c:	62 0b       	sbc	r22, r18
    325e:	73 0b       	sbc	r23, r19
    3260:	84 0b       	sbc	r24, r20
    3262:	ba f0       	brmi	.+46     	; 0x3292 <__addsf3x+0x98>
    3264:	91 50       	subi	r25, 0x01	; 1
    3266:	a1 f0       	breq	.+40     	; 0x3290 <__addsf3x+0x96>
    3268:	ff 0f       	add	r31, r31
    326a:	bb 1f       	adc	r27, r27
    326c:	66 1f       	adc	r22, r22
    326e:	77 1f       	adc	r23, r23
    3270:	88 1f       	adc	r24, r24
    3272:	c2 f7       	brpl	.-16     	; 0x3264 <__addsf3x+0x6a>
    3274:	0e c0       	rjmp	.+28     	; 0x3292 <__addsf3x+0x98>
    3276:	ba 0f       	add	r27, r26
    3278:	62 1f       	adc	r22, r18
    327a:	73 1f       	adc	r23, r19
    327c:	84 1f       	adc	r24, r20
    327e:	48 f4       	brcc	.+18     	; 0x3292 <__addsf3x+0x98>
    3280:	87 95       	ror	r24
    3282:	77 95       	ror	r23
    3284:	67 95       	ror	r22
    3286:	b7 95       	ror	r27
    3288:	f7 95       	ror	r31
    328a:	9e 3f       	cpi	r25, 0xFE	; 254
    328c:	08 f0       	brcs	.+2      	; 0x3290 <__addsf3x+0x96>
    328e:	b3 cf       	rjmp	.-154    	; 0x31f6 <__addsf3+0x1e>
    3290:	93 95       	inc	r25
    3292:	88 0f       	add	r24, r24
    3294:	08 f0       	brcs	.+2      	; 0x3298 <__addsf3x+0x9e>
    3296:	99 27       	eor	r25, r25
    3298:	ee 0f       	add	r30, r30
    329a:	97 95       	ror	r25
    329c:	87 95       	ror	r24
    329e:	08 95       	ret

000032a0 <ceil>:
    32a0:	bf d1       	rcall	.+894    	; 0x3620 <__fp_trunc>
    32a2:	80 f0       	brcs	.+32     	; 0x32c4 <ceil+0x24>
    32a4:	9f 37       	cpi	r25, 0x7F	; 127
    32a6:	40 f4       	brcc	.+16     	; 0x32b8 <ceil+0x18>
    32a8:	91 11       	cpse	r25, r1
    32aa:	0e f4       	brtc	.+2      	; 0x32ae <ceil+0xe>
    32ac:	d1 c1       	rjmp	.+930    	; 0x3650 <__fp_szero>
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	80 e8       	ldi	r24, 0x80	; 128
    32b4:	9f e3       	ldi	r25, 0x3F	; 63
    32b6:	08 95       	ret
    32b8:	26 f0       	brts	.+8      	; 0x32c2 <ceil+0x22>
    32ba:	1b 16       	cp	r1, r27
    32bc:	61 1d       	adc	r22, r1
    32be:	71 1d       	adc	r23, r1
    32c0:	81 1d       	adc	r24, r1
    32c2:	08 c1       	rjmp	.+528    	; 0x34d4 <__fp_mintl>
    32c4:	22 c1       	rjmp	.+580    	; 0x350a <__fp_mpack>

000032c6 <__cmpsf2>:
    32c6:	dc d0       	rcall	.+440    	; 0x3480 <__fp_cmp>
    32c8:	08 f4       	brcc	.+2      	; 0x32cc <__cmpsf2+0x6>
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	08 95       	ret

000032ce <cos>:
    32ce:	3d d1       	rcall	.+634    	; 0x354a <__fp_rempio2>
    32d0:	e3 95       	inc	r30
    32d2:	73 c1       	rjmp	.+742    	; 0x35ba <__fp_sinus>

000032d4 <__divsf3>:
    32d4:	0c d0       	rcall	.+24     	; 0x32ee <__divsf3x>
    32d6:	60 c1       	rjmp	.+704    	; 0x3598 <__fp_round>
    32d8:	30 d1       	rcall	.+608    	; 0x353a <__fp_pscB>
    32da:	40 f0       	brcs	.+16     	; 0x32ec <__divsf3+0x18>
    32dc:	27 d1       	rcall	.+590    	; 0x352c <__fp_pscA>
    32de:	30 f0       	brcs	.+12     	; 0x32ec <__divsf3+0x18>
    32e0:	21 f4       	brne	.+8      	; 0x32ea <__divsf3+0x16>
    32e2:	5f 3f       	cpi	r21, 0xFF	; 255
    32e4:	19 f0       	breq	.+6      	; 0x32ec <__divsf3+0x18>
    32e6:	f0 c0       	rjmp	.+480    	; 0x34c8 <__fp_inf>
    32e8:	51 11       	cpse	r21, r1
    32ea:	b2 c1       	rjmp	.+868    	; 0x3650 <__fp_szero>
    32ec:	1c c1       	rjmp	.+568    	; 0x3526 <__fp_nan>

000032ee <__divsf3x>:
    32ee:	76 d1       	rcall	.+748    	; 0x35dc <__fp_split3>
    32f0:	98 f3       	brcs	.-26     	; 0x32d8 <__divsf3+0x4>

000032f2 <__divsf3_pse>:
    32f2:	99 23       	and	r25, r25
    32f4:	c9 f3       	breq	.-14     	; 0x32e8 <__divsf3+0x14>
    32f6:	55 23       	and	r21, r21
    32f8:	b1 f3       	breq	.-20     	; 0x32e6 <__divsf3+0x12>
    32fa:	95 1b       	sub	r25, r21
    32fc:	55 0b       	sbc	r21, r21
    32fe:	bb 27       	eor	r27, r27
    3300:	aa 27       	eor	r26, r26
    3302:	62 17       	cp	r22, r18
    3304:	73 07       	cpc	r23, r19
    3306:	84 07       	cpc	r24, r20
    3308:	38 f0       	brcs	.+14     	; 0x3318 <__divsf3_pse+0x26>
    330a:	9f 5f       	subi	r25, 0xFF	; 255
    330c:	5f 4f       	sbci	r21, 0xFF	; 255
    330e:	22 0f       	add	r18, r18
    3310:	33 1f       	adc	r19, r19
    3312:	44 1f       	adc	r20, r20
    3314:	aa 1f       	adc	r26, r26
    3316:	a9 f3       	breq	.-22     	; 0x3302 <__divsf3_pse+0x10>
    3318:	33 d0       	rcall	.+102    	; 0x3380 <__divsf3_pse+0x8e>
    331a:	0e 2e       	mov	r0, r30
    331c:	3a f0       	brmi	.+14     	; 0x332c <__divsf3_pse+0x3a>
    331e:	e0 e8       	ldi	r30, 0x80	; 128
    3320:	30 d0       	rcall	.+96     	; 0x3382 <__divsf3_pse+0x90>
    3322:	91 50       	subi	r25, 0x01	; 1
    3324:	50 40       	sbci	r21, 0x00	; 0
    3326:	e6 95       	lsr	r30
    3328:	00 1c       	adc	r0, r0
    332a:	ca f7       	brpl	.-14     	; 0x331e <__divsf3_pse+0x2c>
    332c:	29 d0       	rcall	.+82     	; 0x3380 <__divsf3_pse+0x8e>
    332e:	fe 2f       	mov	r31, r30
    3330:	27 d0       	rcall	.+78     	; 0x3380 <__divsf3_pse+0x8e>
    3332:	66 0f       	add	r22, r22
    3334:	77 1f       	adc	r23, r23
    3336:	88 1f       	adc	r24, r24
    3338:	bb 1f       	adc	r27, r27
    333a:	26 17       	cp	r18, r22
    333c:	37 07       	cpc	r19, r23
    333e:	48 07       	cpc	r20, r24
    3340:	ab 07       	cpc	r26, r27
    3342:	b0 e8       	ldi	r27, 0x80	; 128
    3344:	09 f0       	breq	.+2      	; 0x3348 <__divsf3_pse+0x56>
    3346:	bb 0b       	sbc	r27, r27
    3348:	80 2d       	mov	r24, r0
    334a:	bf 01       	movw	r22, r30
    334c:	ff 27       	eor	r31, r31
    334e:	93 58       	subi	r25, 0x83	; 131
    3350:	5f 4f       	sbci	r21, 0xFF	; 255
    3352:	2a f0       	brmi	.+10     	; 0x335e <__divsf3_pse+0x6c>
    3354:	9e 3f       	cpi	r25, 0xFE	; 254
    3356:	51 05       	cpc	r21, r1
    3358:	68 f0       	brcs	.+26     	; 0x3374 <__divsf3_pse+0x82>
    335a:	b6 c0       	rjmp	.+364    	; 0x34c8 <__fp_inf>
    335c:	79 c1       	rjmp	.+754    	; 0x3650 <__fp_szero>
    335e:	5f 3f       	cpi	r21, 0xFF	; 255
    3360:	ec f3       	brlt	.-6      	; 0x335c <__divsf3_pse+0x6a>
    3362:	98 3e       	cpi	r25, 0xE8	; 232
    3364:	dc f3       	brlt	.-10     	; 0x335c <__divsf3_pse+0x6a>
    3366:	86 95       	lsr	r24
    3368:	77 95       	ror	r23
    336a:	67 95       	ror	r22
    336c:	b7 95       	ror	r27
    336e:	f7 95       	ror	r31
    3370:	9f 5f       	subi	r25, 0xFF	; 255
    3372:	c9 f7       	brne	.-14     	; 0x3366 <__divsf3_pse+0x74>
    3374:	88 0f       	add	r24, r24
    3376:	91 1d       	adc	r25, r1
    3378:	96 95       	lsr	r25
    337a:	87 95       	ror	r24
    337c:	97 f9       	bld	r25, 7
    337e:	08 95       	ret
    3380:	e1 e0       	ldi	r30, 0x01	; 1
    3382:	66 0f       	add	r22, r22
    3384:	77 1f       	adc	r23, r23
    3386:	88 1f       	adc	r24, r24
    3388:	bb 1f       	adc	r27, r27
    338a:	62 17       	cp	r22, r18
    338c:	73 07       	cpc	r23, r19
    338e:	84 07       	cpc	r24, r20
    3390:	ba 07       	cpc	r27, r26
    3392:	20 f0       	brcs	.+8      	; 0x339c <__divsf3_pse+0xaa>
    3394:	62 1b       	sub	r22, r18
    3396:	73 0b       	sbc	r23, r19
    3398:	84 0b       	sbc	r24, r20
    339a:	ba 0b       	sbc	r27, r26
    339c:	ee 1f       	adc	r30, r30
    339e:	88 f7       	brcc	.-30     	; 0x3382 <__divsf3_pse+0x90>
    33a0:	e0 95       	com	r30
    33a2:	08 95       	ret

000033a4 <__fixsfsi>:
    33a4:	04 d0       	rcall	.+8      	; 0x33ae <__fixunssfsi>
    33a6:	68 94       	set
    33a8:	b1 11       	cpse	r27, r1
    33aa:	52 c1       	rjmp	.+676    	; 0x3650 <__fp_szero>
    33ac:	08 95       	ret

000033ae <__fixunssfsi>:
    33ae:	1e d1       	rcall	.+572    	; 0x35ec <__fp_splitA>
    33b0:	88 f0       	brcs	.+34     	; 0x33d4 <__fixunssfsi+0x26>
    33b2:	9f 57       	subi	r25, 0x7F	; 127
    33b4:	90 f0       	brcs	.+36     	; 0x33da <__fixunssfsi+0x2c>
    33b6:	b9 2f       	mov	r27, r25
    33b8:	99 27       	eor	r25, r25
    33ba:	b7 51       	subi	r27, 0x17	; 23
    33bc:	a0 f0       	brcs	.+40     	; 0x33e6 <__fixunssfsi+0x38>
    33be:	d1 f0       	breq	.+52     	; 0x33f4 <__fixunssfsi+0x46>
    33c0:	66 0f       	add	r22, r22
    33c2:	77 1f       	adc	r23, r23
    33c4:	88 1f       	adc	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	1a f0       	brmi	.+6      	; 0x33d0 <__fixunssfsi+0x22>
    33ca:	ba 95       	dec	r27
    33cc:	c9 f7       	brne	.-14     	; 0x33c0 <__fixunssfsi+0x12>
    33ce:	12 c0       	rjmp	.+36     	; 0x33f4 <__fixunssfsi+0x46>
    33d0:	b1 30       	cpi	r27, 0x01	; 1
    33d2:	81 f0       	breq	.+32     	; 0x33f4 <__fixunssfsi+0x46>
    33d4:	3c d1       	rcall	.+632    	; 0x364e <__fp_zero>
    33d6:	b1 e0       	ldi	r27, 0x01	; 1
    33d8:	08 95       	ret
    33da:	39 c1       	rjmp	.+626    	; 0x364e <__fp_zero>
    33dc:	67 2f       	mov	r22, r23
    33de:	78 2f       	mov	r23, r24
    33e0:	88 27       	eor	r24, r24
    33e2:	b8 5f       	subi	r27, 0xF8	; 248
    33e4:	39 f0       	breq	.+14     	; 0x33f4 <__fixunssfsi+0x46>
    33e6:	b9 3f       	cpi	r27, 0xF9	; 249
    33e8:	cc f3       	brlt	.-14     	; 0x33dc <__fixunssfsi+0x2e>
    33ea:	86 95       	lsr	r24
    33ec:	77 95       	ror	r23
    33ee:	67 95       	ror	r22
    33f0:	b3 95       	inc	r27
    33f2:	d9 f7       	brne	.-10     	; 0x33ea <__fixunssfsi+0x3c>
    33f4:	3e f4       	brtc	.+14     	; 0x3404 <__fixunssfsi+0x56>
    33f6:	90 95       	com	r25
    33f8:	80 95       	com	r24
    33fa:	70 95       	com	r23
    33fc:	61 95       	neg	r22
    33fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3400:	8f 4f       	sbci	r24, 0xFF	; 255
    3402:	9f 4f       	sbci	r25, 0xFF	; 255
    3404:	08 95       	ret

00003406 <__floatunsisf>:
    3406:	e8 94       	clt
    3408:	09 c0       	rjmp	.+18     	; 0x341c <__floatsisf+0x12>

0000340a <__floatsisf>:
    340a:	97 fb       	bst	r25, 7
    340c:	3e f4       	brtc	.+14     	; 0x341c <__floatsisf+0x12>
    340e:	90 95       	com	r25
    3410:	80 95       	com	r24
    3412:	70 95       	com	r23
    3414:	61 95       	neg	r22
    3416:	7f 4f       	sbci	r23, 0xFF	; 255
    3418:	8f 4f       	sbci	r24, 0xFF	; 255
    341a:	9f 4f       	sbci	r25, 0xFF	; 255
    341c:	99 23       	and	r25, r25
    341e:	a9 f0       	breq	.+42     	; 0x344a <__floatsisf+0x40>
    3420:	f9 2f       	mov	r31, r25
    3422:	96 e9       	ldi	r25, 0x96	; 150
    3424:	bb 27       	eor	r27, r27
    3426:	93 95       	inc	r25
    3428:	f6 95       	lsr	r31
    342a:	87 95       	ror	r24
    342c:	77 95       	ror	r23
    342e:	67 95       	ror	r22
    3430:	b7 95       	ror	r27
    3432:	f1 11       	cpse	r31, r1
    3434:	f8 cf       	rjmp	.-16     	; 0x3426 <__floatsisf+0x1c>
    3436:	fa f4       	brpl	.+62     	; 0x3476 <__floatsisf+0x6c>
    3438:	bb 0f       	add	r27, r27
    343a:	11 f4       	brne	.+4      	; 0x3440 <__floatsisf+0x36>
    343c:	60 ff       	sbrs	r22, 0
    343e:	1b c0       	rjmp	.+54     	; 0x3476 <__floatsisf+0x6c>
    3440:	6f 5f       	subi	r22, 0xFF	; 255
    3442:	7f 4f       	sbci	r23, 0xFF	; 255
    3444:	8f 4f       	sbci	r24, 0xFF	; 255
    3446:	9f 4f       	sbci	r25, 0xFF	; 255
    3448:	16 c0       	rjmp	.+44     	; 0x3476 <__floatsisf+0x6c>
    344a:	88 23       	and	r24, r24
    344c:	11 f0       	breq	.+4      	; 0x3452 <__floatsisf+0x48>
    344e:	96 e9       	ldi	r25, 0x96	; 150
    3450:	11 c0       	rjmp	.+34     	; 0x3474 <__floatsisf+0x6a>
    3452:	77 23       	and	r23, r23
    3454:	21 f0       	breq	.+8      	; 0x345e <__floatsisf+0x54>
    3456:	9e e8       	ldi	r25, 0x8E	; 142
    3458:	87 2f       	mov	r24, r23
    345a:	76 2f       	mov	r23, r22
    345c:	05 c0       	rjmp	.+10     	; 0x3468 <__floatsisf+0x5e>
    345e:	66 23       	and	r22, r22
    3460:	71 f0       	breq	.+28     	; 0x347e <__floatsisf+0x74>
    3462:	96 e8       	ldi	r25, 0x86	; 134
    3464:	86 2f       	mov	r24, r22
    3466:	70 e0       	ldi	r23, 0x00	; 0
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	2a f0       	brmi	.+10     	; 0x3476 <__floatsisf+0x6c>
    346c:	9a 95       	dec	r25
    346e:	66 0f       	add	r22, r22
    3470:	77 1f       	adc	r23, r23
    3472:	88 1f       	adc	r24, r24
    3474:	da f7       	brpl	.-10     	; 0x346c <__floatsisf+0x62>
    3476:	88 0f       	add	r24, r24
    3478:	96 95       	lsr	r25
    347a:	87 95       	ror	r24
    347c:	97 f9       	bld	r25, 7
    347e:	08 95       	ret

00003480 <__fp_cmp>:
    3480:	99 0f       	add	r25, r25
    3482:	00 08       	sbc	r0, r0
    3484:	55 0f       	add	r21, r21
    3486:	aa 0b       	sbc	r26, r26
    3488:	e0 e8       	ldi	r30, 0x80	; 128
    348a:	fe ef       	ldi	r31, 0xFE	; 254
    348c:	16 16       	cp	r1, r22
    348e:	17 06       	cpc	r1, r23
    3490:	e8 07       	cpc	r30, r24
    3492:	f9 07       	cpc	r31, r25
    3494:	c0 f0       	brcs	.+48     	; 0x34c6 <__fp_cmp+0x46>
    3496:	12 16       	cp	r1, r18
    3498:	13 06       	cpc	r1, r19
    349a:	e4 07       	cpc	r30, r20
    349c:	f5 07       	cpc	r31, r21
    349e:	98 f0       	brcs	.+38     	; 0x34c6 <__fp_cmp+0x46>
    34a0:	62 1b       	sub	r22, r18
    34a2:	73 0b       	sbc	r23, r19
    34a4:	84 0b       	sbc	r24, r20
    34a6:	95 0b       	sbc	r25, r21
    34a8:	39 f4       	brne	.+14     	; 0x34b8 <__fp_cmp+0x38>
    34aa:	0a 26       	eor	r0, r26
    34ac:	61 f0       	breq	.+24     	; 0x34c6 <__fp_cmp+0x46>
    34ae:	23 2b       	or	r18, r19
    34b0:	24 2b       	or	r18, r20
    34b2:	25 2b       	or	r18, r21
    34b4:	21 f4       	brne	.+8      	; 0x34be <__fp_cmp+0x3e>
    34b6:	08 95       	ret
    34b8:	0a 26       	eor	r0, r26
    34ba:	09 f4       	brne	.+2      	; 0x34be <__fp_cmp+0x3e>
    34bc:	a1 40       	sbci	r26, 0x01	; 1
    34be:	a6 95       	lsr	r26
    34c0:	8f ef       	ldi	r24, 0xFF	; 255
    34c2:	81 1d       	adc	r24, r1
    34c4:	81 1d       	adc	r24, r1
    34c6:	08 95       	ret

000034c8 <__fp_inf>:
    34c8:	97 f9       	bld	r25, 7
    34ca:	9f 67       	ori	r25, 0x7F	; 127
    34cc:	80 e8       	ldi	r24, 0x80	; 128
    34ce:	70 e0       	ldi	r23, 0x00	; 0
    34d0:	60 e0       	ldi	r22, 0x00	; 0
    34d2:	08 95       	ret

000034d4 <__fp_mintl>:
    34d4:	88 23       	and	r24, r24
    34d6:	71 f4       	brne	.+28     	; 0x34f4 <__fp_mintl+0x20>
    34d8:	77 23       	and	r23, r23
    34da:	21 f0       	breq	.+8      	; 0x34e4 <__fp_mintl+0x10>
    34dc:	98 50       	subi	r25, 0x08	; 8
    34de:	87 2b       	or	r24, r23
    34e0:	76 2f       	mov	r23, r22
    34e2:	07 c0       	rjmp	.+14     	; 0x34f2 <__fp_mintl+0x1e>
    34e4:	66 23       	and	r22, r22
    34e6:	11 f4       	brne	.+4      	; 0x34ec <__fp_mintl+0x18>
    34e8:	99 27       	eor	r25, r25
    34ea:	0d c0       	rjmp	.+26     	; 0x3506 <__fp_mintl+0x32>
    34ec:	90 51       	subi	r25, 0x10	; 16
    34ee:	86 2b       	or	r24, r22
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	2a f0       	brmi	.+10     	; 0x3500 <__fp_mintl+0x2c>
    34f6:	9a 95       	dec	r25
    34f8:	66 0f       	add	r22, r22
    34fa:	77 1f       	adc	r23, r23
    34fc:	88 1f       	adc	r24, r24
    34fe:	da f7       	brpl	.-10     	; 0x34f6 <__fp_mintl+0x22>
    3500:	88 0f       	add	r24, r24
    3502:	96 95       	lsr	r25
    3504:	87 95       	ror	r24
    3506:	97 f9       	bld	r25, 7
    3508:	08 95       	ret

0000350a <__fp_mpack>:
    350a:	9f 3f       	cpi	r25, 0xFF	; 255
    350c:	31 f0       	breq	.+12     	; 0x351a <__fp_mpack_finite+0xc>

0000350e <__fp_mpack_finite>:
    350e:	91 50       	subi	r25, 0x01	; 1
    3510:	20 f4       	brcc	.+8      	; 0x351a <__fp_mpack_finite+0xc>
    3512:	87 95       	ror	r24
    3514:	77 95       	ror	r23
    3516:	67 95       	ror	r22
    3518:	b7 95       	ror	r27
    351a:	88 0f       	add	r24, r24
    351c:	91 1d       	adc	r25, r1
    351e:	96 95       	lsr	r25
    3520:	87 95       	ror	r24
    3522:	97 f9       	bld	r25, 7
    3524:	08 95       	ret

00003526 <__fp_nan>:
    3526:	9f ef       	ldi	r25, 0xFF	; 255
    3528:	80 ec       	ldi	r24, 0xC0	; 192
    352a:	08 95       	ret

0000352c <__fp_pscA>:
    352c:	00 24       	eor	r0, r0
    352e:	0a 94       	dec	r0
    3530:	16 16       	cp	r1, r22
    3532:	17 06       	cpc	r1, r23
    3534:	18 06       	cpc	r1, r24
    3536:	09 06       	cpc	r0, r25
    3538:	08 95       	ret

0000353a <__fp_pscB>:
    353a:	00 24       	eor	r0, r0
    353c:	0a 94       	dec	r0
    353e:	12 16       	cp	r1, r18
    3540:	13 06       	cpc	r1, r19
    3542:	14 06       	cpc	r1, r20
    3544:	05 06       	cpc	r0, r21
    3546:	08 95       	ret
    3548:	ee cf       	rjmp	.-36     	; 0x3526 <__fp_nan>

0000354a <__fp_rempio2>:
    354a:	50 d0       	rcall	.+160    	; 0x35ec <__fp_splitA>
    354c:	e8 f3       	brcs	.-6      	; 0x3548 <__fp_pscB+0xe>
    354e:	e8 94       	clt
    3550:	e0 e0       	ldi	r30, 0x00	; 0
    3552:	bb 27       	eor	r27, r27
    3554:	9f 57       	subi	r25, 0x7F	; 127
    3556:	f0 f0       	brcs	.+60     	; 0x3594 <__fp_rempio2+0x4a>
    3558:	2a ed       	ldi	r18, 0xDA	; 218
    355a:	3f e0       	ldi	r19, 0x0F	; 15
    355c:	49 ec       	ldi	r20, 0xC9	; 201
    355e:	06 c0       	rjmp	.+12     	; 0x356c <__fp_rempio2+0x22>
    3560:	ee 0f       	add	r30, r30
    3562:	bb 0f       	add	r27, r27
    3564:	66 1f       	adc	r22, r22
    3566:	77 1f       	adc	r23, r23
    3568:	88 1f       	adc	r24, r24
    356a:	28 f0       	brcs	.+10     	; 0x3576 <__fp_rempio2+0x2c>
    356c:	b2 3a       	cpi	r27, 0xA2	; 162
    356e:	62 07       	cpc	r22, r18
    3570:	73 07       	cpc	r23, r19
    3572:	84 07       	cpc	r24, r20
    3574:	28 f0       	brcs	.+10     	; 0x3580 <__fp_rempio2+0x36>
    3576:	b2 5a       	subi	r27, 0xA2	; 162
    3578:	62 0b       	sbc	r22, r18
    357a:	73 0b       	sbc	r23, r19
    357c:	84 0b       	sbc	r24, r20
    357e:	e3 95       	inc	r30
    3580:	9a 95       	dec	r25
    3582:	72 f7       	brpl	.-36     	; 0x3560 <__fp_rempio2+0x16>
    3584:	80 38       	cpi	r24, 0x80	; 128
    3586:	30 f4       	brcc	.+12     	; 0x3594 <__fp_rempio2+0x4a>
    3588:	9a 95       	dec	r25
    358a:	bb 0f       	add	r27, r27
    358c:	66 1f       	adc	r22, r22
    358e:	77 1f       	adc	r23, r23
    3590:	88 1f       	adc	r24, r24
    3592:	d2 f7       	brpl	.-12     	; 0x3588 <__fp_rempio2+0x3e>
    3594:	90 48       	sbci	r25, 0x80	; 128
    3596:	bb cf       	rjmp	.-138    	; 0x350e <__fp_mpack_finite>

00003598 <__fp_round>:
    3598:	09 2e       	mov	r0, r25
    359a:	03 94       	inc	r0
    359c:	00 0c       	add	r0, r0
    359e:	11 f4       	brne	.+4      	; 0x35a4 <__fp_round+0xc>
    35a0:	88 23       	and	r24, r24
    35a2:	52 f0       	brmi	.+20     	; 0x35b8 <__fp_round+0x20>
    35a4:	bb 0f       	add	r27, r27
    35a6:	40 f4       	brcc	.+16     	; 0x35b8 <__fp_round+0x20>
    35a8:	bf 2b       	or	r27, r31
    35aa:	11 f4       	brne	.+4      	; 0x35b0 <__fp_round+0x18>
    35ac:	60 ff       	sbrs	r22, 0
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <__fp_round+0x20>
    35b0:	6f 5f       	subi	r22, 0xFF	; 255
    35b2:	7f 4f       	sbci	r23, 0xFF	; 255
    35b4:	8f 4f       	sbci	r24, 0xFF	; 255
    35b6:	9f 4f       	sbci	r25, 0xFF	; 255
    35b8:	08 95       	ret

000035ba <__fp_sinus>:
    35ba:	ef 93       	push	r30
    35bc:	e0 ff       	sbrs	r30, 0
    35be:	06 c0       	rjmp	.+12     	; 0x35cc <__fp_sinus+0x12>
    35c0:	a2 ea       	ldi	r26, 0xA2	; 162
    35c2:	2a ed       	ldi	r18, 0xDA	; 218
    35c4:	3f e0       	ldi	r19, 0x0F	; 15
    35c6:	49 ec       	ldi	r20, 0xC9	; 201
    35c8:	5f eb       	ldi	r21, 0xBF	; 191
    35ca:	17 de       	rcall	.-978    	; 0x31fa <__addsf3x>
    35cc:	e5 df       	rcall	.-54     	; 0x3598 <__fp_round>
    35ce:	0f 90       	pop	r0
    35d0:	03 94       	inc	r0
    35d2:	01 fc       	sbrc	r0, 1
    35d4:	90 58       	subi	r25, 0x80	; 128
    35d6:	ec e9       	ldi	r30, 0x9C	; 156
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	16 c1       	rjmp	.+556    	; 0x3808 <__fp_powsodd>

000035dc <__fp_split3>:
    35dc:	57 fd       	sbrc	r21, 7
    35de:	90 58       	subi	r25, 0x80	; 128
    35e0:	44 0f       	add	r20, r20
    35e2:	55 1f       	adc	r21, r21
    35e4:	59 f0       	breq	.+22     	; 0x35fc <__fp_splitA+0x10>
    35e6:	5f 3f       	cpi	r21, 0xFF	; 255
    35e8:	71 f0       	breq	.+28     	; 0x3606 <__fp_splitA+0x1a>
    35ea:	47 95       	ror	r20

000035ec <__fp_splitA>:
    35ec:	88 0f       	add	r24, r24
    35ee:	97 fb       	bst	r25, 7
    35f0:	99 1f       	adc	r25, r25
    35f2:	61 f0       	breq	.+24     	; 0x360c <__fp_splitA+0x20>
    35f4:	9f 3f       	cpi	r25, 0xFF	; 255
    35f6:	79 f0       	breq	.+30     	; 0x3616 <__fp_splitA+0x2a>
    35f8:	87 95       	ror	r24
    35fa:	08 95       	ret
    35fc:	12 16       	cp	r1, r18
    35fe:	13 06       	cpc	r1, r19
    3600:	14 06       	cpc	r1, r20
    3602:	55 1f       	adc	r21, r21
    3604:	f2 cf       	rjmp	.-28     	; 0x35ea <__fp_split3+0xe>
    3606:	46 95       	lsr	r20
    3608:	f1 df       	rcall	.-30     	; 0x35ec <__fp_splitA>
    360a:	08 c0       	rjmp	.+16     	; 0x361c <__fp_splitA+0x30>
    360c:	16 16       	cp	r1, r22
    360e:	17 06       	cpc	r1, r23
    3610:	18 06       	cpc	r1, r24
    3612:	99 1f       	adc	r25, r25
    3614:	f1 cf       	rjmp	.-30     	; 0x35f8 <__fp_splitA+0xc>
    3616:	86 95       	lsr	r24
    3618:	71 05       	cpc	r23, r1
    361a:	61 05       	cpc	r22, r1
    361c:	08 94       	sec
    361e:	08 95       	ret

00003620 <__fp_trunc>:
    3620:	e5 df       	rcall	.-54     	; 0x35ec <__fp_splitA>
    3622:	a0 f0       	brcs	.+40     	; 0x364c <__fp_trunc+0x2c>
    3624:	be e7       	ldi	r27, 0x7E	; 126
    3626:	b9 17       	cp	r27, r25
    3628:	88 f4       	brcc	.+34     	; 0x364c <__fp_trunc+0x2c>
    362a:	bb 27       	eor	r27, r27
    362c:	9f 38       	cpi	r25, 0x8F	; 143
    362e:	60 f4       	brcc	.+24     	; 0x3648 <__fp_trunc+0x28>
    3630:	16 16       	cp	r1, r22
    3632:	b1 1d       	adc	r27, r1
    3634:	67 2f       	mov	r22, r23
    3636:	78 2f       	mov	r23, r24
    3638:	88 27       	eor	r24, r24
    363a:	98 5f       	subi	r25, 0xF8	; 248
    363c:	f7 cf       	rjmp	.-18     	; 0x362c <__fp_trunc+0xc>
    363e:	86 95       	lsr	r24
    3640:	77 95       	ror	r23
    3642:	67 95       	ror	r22
    3644:	b1 1d       	adc	r27, r1
    3646:	93 95       	inc	r25
    3648:	96 39       	cpi	r25, 0x96	; 150
    364a:	c8 f3       	brcs	.-14     	; 0x363e <__fp_trunc+0x1e>
    364c:	08 95       	ret

0000364e <__fp_zero>:
    364e:	e8 94       	clt

00003650 <__fp_szero>:
    3650:	bb 27       	eor	r27, r27
    3652:	66 27       	eor	r22, r22
    3654:	77 27       	eor	r23, r23
    3656:	cb 01       	movw	r24, r22
    3658:	97 f9       	bld	r25, 7
    365a:	08 95       	ret

0000365c <__gesf2>:
    365c:	11 df       	rcall	.-478    	; 0x3480 <__fp_cmp>
    365e:	08 f4       	brcc	.+2      	; 0x3662 <__gesf2+0x6>
    3660:	8f ef       	ldi	r24, 0xFF	; 255
    3662:	08 95       	ret

00003664 <__mulsf3>:
    3664:	0b d0       	rcall	.+22     	; 0x367c <__mulsf3x>
    3666:	98 cf       	rjmp	.-208    	; 0x3598 <__fp_round>
    3668:	61 df       	rcall	.-318    	; 0x352c <__fp_pscA>
    366a:	28 f0       	brcs	.+10     	; 0x3676 <__mulsf3+0x12>
    366c:	66 df       	rcall	.-308    	; 0x353a <__fp_pscB>
    366e:	18 f0       	brcs	.+6      	; 0x3676 <__mulsf3+0x12>
    3670:	95 23       	and	r25, r21
    3672:	09 f0       	breq	.+2      	; 0x3676 <__mulsf3+0x12>
    3674:	29 cf       	rjmp	.-430    	; 0x34c8 <__fp_inf>
    3676:	57 cf       	rjmp	.-338    	; 0x3526 <__fp_nan>
    3678:	11 24       	eor	r1, r1
    367a:	ea cf       	rjmp	.-44     	; 0x3650 <__fp_szero>

0000367c <__mulsf3x>:
    367c:	af df       	rcall	.-162    	; 0x35dc <__fp_split3>
    367e:	a0 f3       	brcs	.-24     	; 0x3668 <__mulsf3+0x4>

00003680 <__mulsf3_pse>:
    3680:	95 9f       	mul	r25, r21
    3682:	d1 f3       	breq	.-12     	; 0x3678 <__mulsf3+0x14>
    3684:	95 0f       	add	r25, r21
    3686:	50 e0       	ldi	r21, 0x00	; 0
    3688:	55 1f       	adc	r21, r21
    368a:	62 9f       	mul	r22, r18
    368c:	f0 01       	movw	r30, r0
    368e:	72 9f       	mul	r23, r18
    3690:	bb 27       	eor	r27, r27
    3692:	f0 0d       	add	r31, r0
    3694:	b1 1d       	adc	r27, r1
    3696:	63 9f       	mul	r22, r19
    3698:	aa 27       	eor	r26, r26
    369a:	f0 0d       	add	r31, r0
    369c:	b1 1d       	adc	r27, r1
    369e:	aa 1f       	adc	r26, r26
    36a0:	64 9f       	mul	r22, r20
    36a2:	66 27       	eor	r22, r22
    36a4:	b0 0d       	add	r27, r0
    36a6:	a1 1d       	adc	r26, r1
    36a8:	66 1f       	adc	r22, r22
    36aa:	82 9f       	mul	r24, r18
    36ac:	22 27       	eor	r18, r18
    36ae:	b0 0d       	add	r27, r0
    36b0:	a1 1d       	adc	r26, r1
    36b2:	62 1f       	adc	r22, r18
    36b4:	73 9f       	mul	r23, r19
    36b6:	b0 0d       	add	r27, r0
    36b8:	a1 1d       	adc	r26, r1
    36ba:	62 1f       	adc	r22, r18
    36bc:	83 9f       	mul	r24, r19
    36be:	a0 0d       	add	r26, r0
    36c0:	61 1d       	adc	r22, r1
    36c2:	22 1f       	adc	r18, r18
    36c4:	74 9f       	mul	r23, r20
    36c6:	33 27       	eor	r19, r19
    36c8:	a0 0d       	add	r26, r0
    36ca:	61 1d       	adc	r22, r1
    36cc:	23 1f       	adc	r18, r19
    36ce:	84 9f       	mul	r24, r20
    36d0:	60 0d       	add	r22, r0
    36d2:	21 1d       	adc	r18, r1
    36d4:	82 2f       	mov	r24, r18
    36d6:	76 2f       	mov	r23, r22
    36d8:	6a 2f       	mov	r22, r26
    36da:	11 24       	eor	r1, r1
    36dc:	9f 57       	subi	r25, 0x7F	; 127
    36de:	50 40       	sbci	r21, 0x00	; 0
    36e0:	8a f0       	brmi	.+34     	; 0x3704 <__mulsf3_pse+0x84>
    36e2:	e1 f0       	breq	.+56     	; 0x371c <__mulsf3_pse+0x9c>
    36e4:	88 23       	and	r24, r24
    36e6:	4a f0       	brmi	.+18     	; 0x36fa <__mulsf3_pse+0x7a>
    36e8:	ee 0f       	add	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	bb 1f       	adc	r27, r27
    36ee:	66 1f       	adc	r22, r22
    36f0:	77 1f       	adc	r23, r23
    36f2:	88 1f       	adc	r24, r24
    36f4:	91 50       	subi	r25, 0x01	; 1
    36f6:	50 40       	sbci	r21, 0x00	; 0
    36f8:	a9 f7       	brne	.-22     	; 0x36e4 <__mulsf3_pse+0x64>
    36fa:	9e 3f       	cpi	r25, 0xFE	; 254
    36fc:	51 05       	cpc	r21, r1
    36fe:	70 f0       	brcs	.+28     	; 0x371c <__mulsf3_pse+0x9c>
    3700:	e3 ce       	rjmp	.-570    	; 0x34c8 <__fp_inf>
    3702:	a6 cf       	rjmp	.-180    	; 0x3650 <__fp_szero>
    3704:	5f 3f       	cpi	r21, 0xFF	; 255
    3706:	ec f3       	brlt	.-6      	; 0x3702 <__mulsf3_pse+0x82>
    3708:	98 3e       	cpi	r25, 0xE8	; 232
    370a:	dc f3       	brlt	.-10     	; 0x3702 <__mulsf3_pse+0x82>
    370c:	86 95       	lsr	r24
    370e:	77 95       	ror	r23
    3710:	67 95       	ror	r22
    3712:	b7 95       	ror	r27
    3714:	f7 95       	ror	r31
    3716:	e7 95       	ror	r30
    3718:	9f 5f       	subi	r25, 0xFF	; 255
    371a:	c1 f7       	brne	.-16     	; 0x370c <__mulsf3_pse+0x8c>
    371c:	fe 2b       	or	r31, r30
    371e:	88 0f       	add	r24, r24
    3720:	91 1d       	adc	r25, r1
    3722:	96 95       	lsr	r25
    3724:	87 95       	ror	r24
    3726:	97 f9       	bld	r25, 7
    3728:	08 95       	ret

0000372a <round>:
    372a:	60 df       	rcall	.-320    	; 0x35ec <__fp_splitA>
    372c:	e0 f0       	brcs	.+56     	; 0x3766 <round+0x3c>
    372e:	9e 37       	cpi	r25, 0x7E	; 126
    3730:	d8 f0       	brcs	.+54     	; 0x3768 <round+0x3e>
    3732:	96 39       	cpi	r25, 0x96	; 150
    3734:	b8 f4       	brcc	.+46     	; 0x3764 <round+0x3a>
    3736:	9e 38       	cpi	r25, 0x8E	; 142
    3738:	48 f4       	brcc	.+18     	; 0x374c <round+0x22>
    373a:	67 2f       	mov	r22, r23
    373c:	78 2f       	mov	r23, r24
    373e:	88 27       	eor	r24, r24
    3740:	98 5f       	subi	r25, 0xF8	; 248
    3742:	f9 cf       	rjmp	.-14     	; 0x3736 <round+0xc>
    3744:	86 95       	lsr	r24
    3746:	77 95       	ror	r23
    3748:	67 95       	ror	r22
    374a:	93 95       	inc	r25
    374c:	95 39       	cpi	r25, 0x95	; 149
    374e:	d0 f3       	brcs	.-12     	; 0x3744 <round+0x1a>
    3750:	b6 2f       	mov	r27, r22
    3752:	b1 70       	andi	r27, 0x01	; 1
    3754:	6b 0f       	add	r22, r27
    3756:	71 1d       	adc	r23, r1
    3758:	81 1d       	adc	r24, r1
    375a:	20 f4       	brcc	.+8      	; 0x3764 <round+0x3a>
    375c:	87 95       	ror	r24
    375e:	77 95       	ror	r23
    3760:	67 95       	ror	r22
    3762:	93 95       	inc	r25
    3764:	b7 ce       	rjmp	.-658    	; 0x34d4 <__fp_mintl>
    3766:	d1 ce       	rjmp	.-606    	; 0x350a <__fp_mpack>
    3768:	73 cf       	rjmp	.-282    	; 0x3650 <__fp_szero>

0000376a <sin>:
    376a:	9f 93       	push	r25
    376c:	ee de       	rcall	.-548    	; 0x354a <__fp_rempio2>
    376e:	0f 90       	pop	r0
    3770:	07 fc       	sbrc	r0, 7
    3772:	ee 5f       	subi	r30, 0xFE	; 254
    3774:	22 cf       	rjmp	.-444    	; 0x35ba <__fp_sinus>
    3776:	11 f4       	brne	.+4      	; 0x377c <sin+0x12>
    3778:	0e f4       	brtc	.+2      	; 0x377c <sin+0x12>
    377a:	d5 ce       	rjmp	.-598    	; 0x3526 <__fp_nan>
    377c:	c6 ce       	rjmp	.-628    	; 0x350a <__fp_mpack>

0000377e <sqrt>:
    377e:	36 df       	rcall	.-404    	; 0x35ec <__fp_splitA>
    3780:	d0 f3       	brcs	.-12     	; 0x3776 <sin+0xc>
    3782:	99 23       	and	r25, r25
    3784:	d9 f3       	breq	.-10     	; 0x377c <sin+0x12>
    3786:	ce f3       	brts	.-14     	; 0x377a <sin+0x10>
    3788:	9f 57       	subi	r25, 0x7F	; 127
    378a:	55 0b       	sbc	r21, r21
    378c:	87 ff       	sbrs	r24, 7
    378e:	35 d0       	rcall	.+106    	; 0x37fa <__fp_norm2>
    3790:	00 24       	eor	r0, r0
    3792:	a0 e6       	ldi	r26, 0x60	; 96
    3794:	40 ea       	ldi	r20, 0xA0	; 160
    3796:	90 01       	movw	r18, r0
    3798:	80 58       	subi	r24, 0x80	; 128
    379a:	56 95       	lsr	r21
    379c:	97 95       	ror	r25
    379e:	28 f4       	brcc	.+10     	; 0x37aa <sqrt+0x2c>
    37a0:	80 5c       	subi	r24, 0xC0	; 192
    37a2:	66 0f       	add	r22, r22
    37a4:	77 1f       	adc	r23, r23
    37a6:	88 1f       	adc	r24, r24
    37a8:	20 f0       	brcs	.+8      	; 0x37b2 <sqrt+0x34>
    37aa:	26 17       	cp	r18, r22
    37ac:	37 07       	cpc	r19, r23
    37ae:	48 07       	cpc	r20, r24
    37b0:	30 f4       	brcc	.+12     	; 0x37be <sqrt+0x40>
    37b2:	62 1b       	sub	r22, r18
    37b4:	73 0b       	sbc	r23, r19
    37b6:	84 0b       	sbc	r24, r20
    37b8:	20 29       	or	r18, r0
    37ba:	31 29       	or	r19, r1
    37bc:	4a 2b       	or	r20, r26
    37be:	a6 95       	lsr	r26
    37c0:	17 94       	ror	r1
    37c2:	07 94       	ror	r0
    37c4:	20 25       	eor	r18, r0
    37c6:	31 25       	eor	r19, r1
    37c8:	4a 27       	eor	r20, r26
    37ca:	58 f7       	brcc	.-42     	; 0x37a2 <sqrt+0x24>
    37cc:	66 0f       	add	r22, r22
    37ce:	77 1f       	adc	r23, r23
    37d0:	88 1f       	adc	r24, r24
    37d2:	20 f0       	brcs	.+8      	; 0x37dc <sqrt+0x5e>
    37d4:	26 17       	cp	r18, r22
    37d6:	37 07       	cpc	r19, r23
    37d8:	48 07       	cpc	r20, r24
    37da:	30 f4       	brcc	.+12     	; 0x37e8 <sqrt+0x6a>
    37dc:	62 0b       	sbc	r22, r18
    37de:	73 0b       	sbc	r23, r19
    37e0:	84 0b       	sbc	r24, r20
    37e2:	20 0d       	add	r18, r0
    37e4:	31 1d       	adc	r19, r1
    37e6:	41 1d       	adc	r20, r1
    37e8:	a0 95       	com	r26
    37ea:	81 f7       	brne	.-32     	; 0x37cc <sqrt+0x4e>
    37ec:	b9 01       	movw	r22, r18
    37ee:	84 2f       	mov	r24, r20
    37f0:	91 58       	subi	r25, 0x81	; 129
    37f2:	88 0f       	add	r24, r24
    37f4:	96 95       	lsr	r25
    37f6:	87 95       	ror	r24
    37f8:	08 95       	ret

000037fa <__fp_norm2>:
    37fa:	91 50       	subi	r25, 0x01	; 1
    37fc:	50 40       	sbci	r21, 0x00	; 0
    37fe:	66 0f       	add	r22, r22
    3800:	77 1f       	adc	r23, r23
    3802:	88 1f       	adc	r24, r24
    3804:	d2 f7       	brpl	.-12     	; 0x37fa <__fp_norm2>
    3806:	08 95       	ret

00003808 <__fp_powsodd>:
    3808:	9f 93       	push	r25
    380a:	8f 93       	push	r24
    380c:	7f 93       	push	r23
    380e:	6f 93       	push	r22
    3810:	ff 93       	push	r31
    3812:	ef 93       	push	r30
    3814:	9b 01       	movw	r18, r22
    3816:	ac 01       	movw	r20, r24
    3818:	25 df       	rcall	.-438    	; 0x3664 <__mulsf3>
    381a:	ef 91       	pop	r30
    381c:	ff 91       	pop	r31
    381e:	05 d0       	rcall	.+10     	; 0x382a <__fp_powser>
    3820:	2f 91       	pop	r18
    3822:	3f 91       	pop	r19
    3824:	4f 91       	pop	r20
    3826:	5f 91       	pop	r21
    3828:	1d cf       	rjmp	.-454    	; 0x3664 <__mulsf3>

0000382a <__fp_powser>:
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	1f 93       	push	r17
    3830:	0f 93       	push	r16
    3832:	ff 92       	push	r15
    3834:	ef 92       	push	r14
    3836:	df 92       	push	r13
    3838:	7b 01       	movw	r14, r22
    383a:	8c 01       	movw	r16, r24
    383c:	68 94       	set
    383e:	05 c0       	rjmp	.+10     	; 0x384a <__fp_powser+0x20>
    3840:	da 2e       	mov	r13, r26
    3842:	ef 01       	movw	r28, r30
    3844:	1b df       	rcall	.-458    	; 0x367c <__mulsf3x>
    3846:	fe 01       	movw	r30, r28
    3848:	e8 94       	clt
    384a:	a5 91       	lpm	r26, Z+
    384c:	25 91       	lpm	r18, Z+
    384e:	35 91       	lpm	r19, Z+
    3850:	45 91       	lpm	r20, Z+
    3852:	55 91       	lpm	r21, Z+
    3854:	ae f3       	brts	.-22     	; 0x3840 <__fp_powser+0x16>
    3856:	ef 01       	movw	r28, r30
    3858:	d0 dc       	rcall	.-1632   	; 0x31fa <__addsf3x>
    385a:	fe 01       	movw	r30, r28
    385c:	97 01       	movw	r18, r14
    385e:	a8 01       	movw	r20, r16
    3860:	da 94       	dec	r13
    3862:	79 f7       	brne	.-34     	; 0x3842 <__fp_powser+0x18>
    3864:	df 90       	pop	r13
    3866:	ef 90       	pop	r14
    3868:	ff 90       	pop	r15
    386a:	0f 91       	pop	r16
    386c:	1f 91       	pop	r17
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <__divmodhi4>:
    3874:	97 fb       	bst	r25, 7
    3876:	07 2e       	mov	r0, r23
    3878:	16 f4       	brtc	.+4      	; 0x387e <__divmodhi4+0xa>
    387a:	00 94       	com	r0
    387c:	06 d0       	rcall	.+12     	; 0x388a <__divmodhi4_neg1>
    387e:	77 fd       	sbrc	r23, 7
    3880:	08 d0       	rcall	.+16     	; 0x3892 <__divmodhi4_neg2>
    3882:	14 d0       	rcall	.+40     	; 0x38ac <__udivmodhi4>
    3884:	07 fc       	sbrc	r0, 7
    3886:	05 d0       	rcall	.+10     	; 0x3892 <__divmodhi4_neg2>
    3888:	3e f4       	brtc	.+14     	; 0x3898 <__divmodhi4_exit>

0000388a <__divmodhi4_neg1>:
    388a:	90 95       	com	r25
    388c:	81 95       	neg	r24
    388e:	9f 4f       	sbci	r25, 0xFF	; 255
    3890:	08 95       	ret

00003892 <__divmodhi4_neg2>:
    3892:	70 95       	com	r23
    3894:	61 95       	neg	r22
    3896:	7f 4f       	sbci	r23, 0xFF	; 255

00003898 <__divmodhi4_exit>:
    3898:	08 95       	ret

0000389a <__tablejump2__>:
    389a:	ee 0f       	add	r30, r30
    389c:	ff 1f       	adc	r31, r31
    389e:	00 24       	eor	r0, r0
    38a0:	00 1c       	adc	r0, r0
    38a2:	0b be       	out	0x3b, r0	; 59
    38a4:	07 90       	elpm	r0, Z+
    38a6:	f6 91       	elpm	r31, Z
    38a8:	e0 2d       	mov	r30, r0
    38aa:	09 94       	ijmp

000038ac <__udivmodhi4>:
    38ac:	aa 1b       	sub	r26, r26
    38ae:	bb 1b       	sub	r27, r27
    38b0:	51 e1       	ldi	r21, 0x11	; 17
    38b2:	07 c0       	rjmp	.+14     	; 0x38c2 <__udivmodhi4_ep>

000038b4 <__udivmodhi4_loop>:
    38b4:	aa 1f       	adc	r26, r26
    38b6:	bb 1f       	adc	r27, r27
    38b8:	a6 17       	cp	r26, r22
    38ba:	b7 07       	cpc	r27, r23
    38bc:	10 f0       	brcs	.+4      	; 0x38c2 <__udivmodhi4_ep>
    38be:	a6 1b       	sub	r26, r22
    38c0:	b7 0b       	sbc	r27, r23

000038c2 <__udivmodhi4_ep>:
    38c2:	88 1f       	adc	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	5a 95       	dec	r21
    38c8:	a9 f7       	brne	.-22     	; 0x38b4 <__udivmodhi4_loop>
    38ca:	80 95       	com	r24
    38cc:	90 95       	com	r25
    38ce:	bc 01       	movw	r22, r24
    38d0:	cd 01       	movw	r24, r26
    38d2:	08 95       	ret

000038d4 <_exit>:
    38d4:	f8 94       	cli

000038d6 <__stop_program>:
    38d6:	ff cf       	rjmp	.-2      	; 0x38d6 <__stop_program>
